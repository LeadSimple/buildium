{
  "openapi": "3.0.0",
  "info": {
    "version": "v1",
    "title": "Open API, powered by Buildium",
    "description": "GetAllGLAccounts) response message now includes the property `IsBankAccount`. This is a boolean property that indicates whether the general ledger account is also a bank account.\r\n* A `Country` property has been added to all Address messages. This property contains an enumeration indicating the country of the address. \r\n\r\n",
    "x-logo": {
      "url": "Buildium-RP-Color-Logo.png",
      "backgroundColor": "#FFFFFF",
      "altText": "Buildium Logo",
      "href": "https://www.buildium.com"
    }
  },
  "paths": {
    "/v1/associations": {
      "get": {
        "tags": ["Associations"],
        "summary": "Retrieve all associations",
        "description": "Retrieves a list of associations.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Associations and units</span> - `View`",
        "operationId": "GetAssociations",
        "parameters": [
          {
            "name": "location",
            "in": "query",
            "description": "Filters results to any association whose address *contains* the specified value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filters results by the status of the association. If no status is specified both `active` and `inactive` associations will be returned.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["Active", "InActive"]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssociationMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 1
      },
      "post": {
        "tags": ["Associations"],
        "summary": "Create an association",
        "description": "Creates an association.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Associations and units</span> - `View` `Edit`",
        "operationId": "CreateAssociation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssociationPostMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "x-path-sort-index": 1
    },
    "/v1/rentals/units/listings": {
      "get": {
        "tags": ["Listings"],
        "summary": "Retrieve all listings",
        "description": "Retrieves all listings.\r\n<br /><br /><span class=\"permissionBlock\">Rentals &gt; Listings</span> - `View`\r\n<br /><span class=\"permissionBlock\">Rentals &gt; Rental properties and units</span> - `View`",
        "operationId": "GetListingsAsync",
        "parameters": [
          {
            "name": "entitytype",
            "in": "query",
            "description": "Specifies the type of entity that `EntityId` refers to.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["Property", "RentalOwner"]
            }
          },
          {
            "name": "entityid",
            "in": "query",
            "description": "Filters results to only listings that are associated with the specified entity id value. The id must be of the type specified in `EntityType` property.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListingMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 1
      },
      "x-path-sort-index": 1
    },
    "/v1/associations/{associationId}": {
      "get": {
        "tags": ["Associations"],
        "summary": "Retrieve an association",
        "description": "Retrieve a specific association.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Associations and units</span> - `View`",
        "operationId": "GetAssociationById",
        "parameters": [
          {
            "name": "associationId",
            "in": "path",
            "description": "The association identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 2
      },
      "put": {
        "tags": ["Associations"],
        "summary": "Update an association",
        "description": "Updates an association.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Associations and units</span> - `View` `Edit`",
        "operationId": "UpdateAssociation",
        "parameters": [
          {
            "name": "associationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssociationPutMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "x-path-sort-index": 2
    },
    "/v1/rentals/units/{unitId}/listing": {
      "get": {
        "tags": ["Listings"],
        "summary": "Retrieve a listing",
        "description": "Retrieves a specific listing.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Listings</span> - `View`\r\n<br /><span class=\"permissionBlock\">Rentals &gt; Rental properties and units</span> - `View`",
        "operationId": "GetListingForUnitAsync",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "description": "The rental unit identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 2
      },
      "put": {
        "tags": ["Listings"],
        "summary": "Create a listing",
        "description": "Listings will automatically pull in the information, features, and media that exists for the property and unit details.\r\n<br /><br />\r\nThe listing will post immediately to your Buildium public website, and will post to the selected syndicated sites within 24-48 hours.\r\n<br /><br />\r\nNote, a unit can only ever have one active listing. When this endpoint is called if no listing exists one will be created, otherwise the existing listing will be updated. \r\n<br /><br /><span class=\"permissionBlock\">Rentals &gt; Listings</span> - `Edit`\r\n<br /><span class=\"permissionBlock\">Rentals &gt; Rental properties and units</span> - `Edit`",
        "operationId": "UpsertListingsAsync",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListingPutMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingMessage"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Listings"],
        "summary": "Delete a listing",
        "description": "Deleting a listing will immediately remove it from your Buildium public website. The listing will also be removed\r\nfrom any syndicated sites within 24-48 hours.<br /><br />Listings manually created on craigslist using the Buildium\r\nguided tool will not be removed. The listing must be removed using craigslist's tools provided in your craigslist account.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Listings</span> - `Delete`",
        "operationId": "DelistUnit",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "description": "The rental property unit identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK - No Content."
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "x-path-sort-index": 2
    },
    "/v1/associations/units": {
      "get": {
        "tags": ["Association Units"],
        "summary": "Retrieve all association units",
        "description": "Retrieves a list of association units.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Associations and units</span> - `View`",
        "operationId": "GetAllAssociationUnits",
        "parameters": [
          {
            "name": "associationids",
            "in": "query",
            "description": "Filters results to only include Associations with matching IDs",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssociationUnitMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 3
      },
      "post": {
        "tags": ["Association Units"],
        "summary": "Create an association unit",
        "description": "Creates an association unit.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Associations and units</span> - `View` `Edit`",
        "operationId": "CreateAssociationUnit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssociationUnitsPostMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationUnitMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "x-path-sort-index": 3
    },
    "/v1/rentals/units/listingcontacts": {
      "get": {
        "tags": ["Listings"],
        "summary": "Retrieve all listing contacts",
        "description": "Retrieves all listing contacts.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Listings</span> - `View`",
        "operationId": "GetAllListingContacts",
        "parameters": [
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListingContactMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 3
      },
      "post": {
        "tags": ["Listings"],
        "summary": "Create a listing contact",
        "description": "Create a listing contact. Note, at least one contact field (phone number, email or website) is required for the listing contact.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Listings</span> - `Edit`",
        "operationId": "CreateListingContact",
        "requestBody": {
          "$ref": "#/components/requestBodies/ListingContactSaveMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingContactMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "x-path-sort-index": 3
    },
    "/v1/associations/units/{unitId}": {
      "get": {
        "tags": ["Association Units"],
        "summary": "Retrieve an association unit",
        "description": "Retrieve a specific association unit.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Associations and units</span> - `View`",
        "operationId": "GetAssociationUnitById",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "description": "The association unit identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationUnitMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 4
      },
      "put": {
        "tags": ["Association Units"],
        "summary": "Update an association unit",
        "description": "Updates an association unit.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Associations and units</span> - `View` `Edit`",
        "operationId": "UpdateAssociationUnit",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "description": "The identifier of the unit to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssociationUnitPutMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationUnitMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "x-path-sort-index": 4
    },
    "/v1/rentals/units/listingcontacts/{listingContactId}": {
      "get": {
        "tags": ["Listings"],
        "summary": "Retrieve a listing contact",
        "description": "Retrieves a specific listing contact.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Listings</span> - `View`",
        "operationId": "GetListingContactById",
        "parameters": [
          {
            "name": "listingContactId",
            "in": "path",
            "description": "The listing contact identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingContactMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 4
      },
      "put": {
        "tags": ["Listings"],
        "summary": "Update a listing contact",
        "description": "Update a listing contact. Note, at least one contact field (phone number, email or website) is required for the listing contact.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Listings</span> - `Edit`",
        "operationId": "UpdateListingContact",
        "parameters": [
          {
            "name": "listingContactId",
            "in": "path",
            "description": "The listing contact identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ListingContactSaveMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingContactMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "x-path-sort-index": 4
    },
    "/v1/associations/ownershipaccounts": {
      "get": {
        "tags": ["Association Ownership Accounts"],
        "summary": "Retrieve all ownership accounts",
        "description": "Retrieves a list of ownership accounts.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Ownership accounts</span> - `View`",
        "operationId": "GetAllOwnershipAccounts",
        "parameters": [
          {
            "name": "associationids",
            "in": "query",
            "description": "Filters results to any ownership accounts who belong to the specified set of association ids.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "unitorowner",
            "in": "query",
            "description": "Filters results to any association whose unit or owner *contains* the specified value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "datefrom",
            "in": "query",
            "description": "Filters results to any ownership account whose start date is greater than or equal to the specified value.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "dateto",
            "in": "query",
            "description": "Filters results to any ownership account whose start date is less than or equal to the specified value.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filters results by the status of the association. If no status is specified, `active`, `past` and `future` associations will be returned.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["Active", "Past", "Future"]
              }
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssociationOwnershipAccountMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 5
      },
      "post": {
        "tags": ["Association Ownership Accounts"],
        "summary": "Create an ownership account",
        "description": "Creates an ownership account.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Ownership accounts</span> - `View` `Edit`\r\n<br /><span class=\"permissionBlock\">Associations &gt; Owners</span> - `View` `Edit`",
        "operationId": "CreateAssociationOwnershipAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssociationOwnershipAccountPostMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationOwnershipAccountMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "An association ownership account already exists for this unit.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "x-path-sort-index": 5
    },
    "/v1/associations/ownershipaccounts/{ownershipAccountId}": {
      "get": {
        "tags": ["Association Ownership Accounts"],
        "summary": "Retrieve an ownership account",
        "description": "Retrieves a specific ownership account.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Ownership accounts</span> - `View`",
        "operationId": "GetOwnershipAccountById",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "description": "The ownership account identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationOwnershipAccountMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 6
      },
      "x-path-sort-index": 6
    },
    "/v1/associations/owners": {
      "get": {
        "tags": ["Association Owners"],
        "summary": "Retrieve all association owners",
        "description": "Retrieves a list of association owners.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Association owners and tenants</span> - `View`",
        "operationId": "GetAllAssociationOwners",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Filters results to only records whose name *contains* the specified value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phone",
            "in": "query",
            "description": "Filters results to only records whose phone number *contains* the specified value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Filters results to only records whose email *contains* the specified value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "associationids",
            "in": "query",
            "description": "Filters results to only records that belong to the specified set of association ids.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Filters results to only records whose status is equal to the specified value.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["Active", "Past", "Future"]
              }
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssociationOwnerMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 7
      },
      "post": {
        "tags": ["Association Owners"],
        "summary": "Create an association owner",
        "description": "Creates an association owner.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Association owners and tenants</span> - `View` `Edit`\r\n<br /><span class=\"permissionBlock\">Associations &gt; Ownership accounts</span> - `View` `Edit`",
        "operationId": "CreateAssociationOwner",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssociationOwnerToExistingOwnershipAccountPostMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationOwnerMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "x-path-sort-index": 7
    },
    "/v1/associations/owners/{ownerId}": {
      "get": {
        "tags": ["Association Owners"],
        "summary": "Retrieve an association owner",
        "description": "Retrieve a specific association owner.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Association owners and tenants</span> - `View`",
        "operationId": "GetAssociationOwnerById",
        "parameters": [
          {
            "name": "ownerId",
            "in": "path",
            "description": "The association owner identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationOwnerMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 8
      },
      "put": {
        "tags": ["Association Owners"],
        "summary": "Update an association owner",
        "description": "Updates an existing association owner.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Association owners and tenants</span> - `View` `Edit`",
        "operationId": "UpdateAssociationOwner",
        "parameters": [
          {
            "name": "ownerId",
            "in": "path",
            "description": "The identifier of the association owner to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssociationOwnerPutMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationOwnerMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "x-path-sort-index": 8
    },
    "/v1/associations/tenants": {
      "get": {
        "tags": ["Association Tenants"],
        "summary": "Retrieve all association tenants",
        "description": "Retrieves a list of association tenants.\r\n\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Association owners and tenants</span> - `View`",
        "operationId": "GetAssociationTenants",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Filters results to only records whose name *contains* the specified value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phone",
            "in": "query",
            "description": "Filters results to only records whose phone number *contains* the specified value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Filters results to only records whose email *contains* the specified value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "associationids",
            "in": "query",
            "description": "Filters results to only records that belong to the specified set of association ids.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Filters results to only records whose status is equal to the specified value.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["Active", "Past", "Future"]
              }
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssociationTenantMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 9
      },
      "post": {
        "tags": ["Association Tenants"],
        "summary": "Create an association tenant",
        "description": "Creates an association tenant.\r\n\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Association owners and tenants</span> - `View` `Edit`",
        "operationId": "CreateAssociationTenant",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssociationTenantPostMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationTenantMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "x-path-sort-index": 9
    },
    "/v1/associations/tenants/{tenantId}": {
      "get": {
        "tags": ["Association Tenants"],
        "summary": "Retrieve an association tenant",
        "description": "Retrieves a specific association tenant.\r\n\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Association owners and tenants</span> - `View`",
        "operationId": "GetAssociationTenantById",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationTenantMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 10
      },
      "put": {
        "tags": ["Association Tenants"],
        "summary": "Update an association tenant",
        "description": "Updates an association tenant.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Association owners and tenants</span> - `View` `Edit`",
        "operationId": "UpdateAssociationTenant",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The identifier of the association tenant to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssociationTenantPutMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationTenantMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "x-path-sort-index": 10
    },
    "/v1/administration/account": {
      "get": {
        "tags": ["Administration"],
        "summary": "Retrieve Account Info",
        "description": "Retrieves account info.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Administration &gt; Account Information</span> - `View`",
        "operationId": "GetAccountInfo",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountInfoMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/applicants": {
      "get": {
        "tags": ["Applicants"],
        "summary": "Retrieve all applicants",
        "description": "Retrieves all applicants.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Applicants</span> - `View`",
        "operationId": "GetApplicants",
        "parameters": [
          {
            "name": "entityid",
            "in": "query",
            "description": "Filters results to any applicant associated with the specified entity identifier. This filter is used in conjunction with the `EntityType` field which must be set to the type of entity this identifier references.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "entitytype",
            "in": "query",
            "description": "Specifies the type of entity that `EntityId` refers to. This field is required if `EntityId` is specified.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["Rental", "RentalOwner"]
            }
          },
          {
            "name": "applicationstatuses",
            "in": "query",
            "description": "Filters results by the applicant application status. If no status is specified, applicants with an application in any status will be returned.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Undecided",
                  "Approved",
                  "Rejected",
                  "AddedToLease",
                  "Cancelled",
                  "Deferred",
                  "New"
                ]
              }
            }
          },
          {
            "name": "unitids",
            "in": "query",
            "description": "Filters results to applicants associated to any of the specified rental property unit identifiers.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filters results to applicants whose name *contains* the specified value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationsubmittedstartdate",
            "in": "query",
            "description": "Filters results to any applicant who submitted an application on or after the date specified.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "applicationsubmittedenddate",
            "in": "query",
            "description": "Filters results to any applicant who submitted an application on or prior to the date specified.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicantMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Applicants"],
        "summary": "Create an applicant",
        "description": "Creates an applicant.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Applicants</span> - `View` `Edit`",
        "operationId": "CreateApplicant",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicantPostMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicantMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/applicants/{applicantId}": {
      "get": {
        "tags": ["Applicants"],
        "summary": "Retrieve an applicant",
        "description": "Retrieves an applicant.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Applicants</span> - `View`",
        "operationId": "GetApplicantById",
        "parameters": [
          {
            "name": "applicantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicantMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Applicants"],
        "summary": "Update an applicant",
        "description": "Updates an applicant.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Applicants</span> - `View` `Edit`",
        "operationId": "UpdateApplicant",
        "parameters": [
          {
            "name": "applicantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicantPutMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicantMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/applicants/{applicantId}/applications": {
      "get": {
        "tags": ["Applicants"],
        "summary": "Retrieve all applications",
        "description": "Retrieves all the applications for a given applicant.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Applicants</span> - `Read`",
        "operationId": "GetApplicationsForApplicant",
        "parameters": [
          {
            "name": "applicantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/applicants/{applicantId}/applications/{applicationId}": {
      "get": {
        "tags": ["Applicants"],
        "summary": "Retrieve an application",
        "description": "Retrieves an application.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Applicants</span> - `Read`",
        "operationId": "GetApplicationForApplicantById",
        "parameters": [
          {
            "name": "applicantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Applicants"],
        "summary": "Update an application",
        "description": "Updates a rental application.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Applicants</span> - `Edit`",
        "operationId": "UpdateApplication",
        "parameters": [
          {
            "name": "applicantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationPutMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/applicants/groups": {
      "get": {
        "tags": ["Applicants"],
        "summary": "Retrieve all applicant groups",
        "description": "Retrieves all applicant groups.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Applicants</span> - `View`",
        "operationId": "GetApplicantGroups",
        "parameters": [
          {
            "name": "entitytype",
            "in": "query",
            "description": "Filters results to any applicant groups associated with the specified entity identifier. This filter is used in conjunction with the `EntityType` field which must be set to the type of entity this identifier references.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["Rental", "RentalOwner"]
            }
          },
          {
            "name": "entityid",
            "in": "query",
            "description": "Specifies the type of entity that `EntityId` refers to. This field is required if `EntityId` is specified.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "applicationgroupstatuses",
            "in": "query",
            "description": "Filters results by the applicant group status. If no status is specified, applicant groups in any status will be returned.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Undecided",
                  "Approved",
                  "Rejected",
                  "AddedToLease",
                  "Cancelled",
                  "Deferred",
                  "New"
                ]
              }
            }
          },
          {
            "name": "unitids",
            "in": "query",
            "description": "Filters results to applicant groups associated to any of the specified rental property unit identifiers.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filters results to applicant groups that includes applicants whose name *contains* the specified value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicantGroupMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Applicants"],
        "summary": "Create an applicant group",
        "description": "Creates an applicant group.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Applicants</span> - `View` `Edit`",
        "operationId": "CreateApplicantGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicantGroupPostMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicantGroupMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/applicants/groups/{applicantGroupId}": {
      "get": {
        "tags": ["Applicants"],
        "summary": "Retrieve an applicant group",
        "description": "Retrieves an applicant group.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Applicants</span> - `View`",
        "operationId": "GetApplicantGroupById",
        "parameters": [
          {
            "name": "applicantGroupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicantGroupMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Applicants"],
        "summary": "Update an applicant group",
        "description": "Updates an applicant group.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Applicants</span> - `View` `Edit`",
        "operationId": "UpdateApplicantGroup",
        "parameters": [
          {
            "name": "applicantGroupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicantGroupPutMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicantGroupMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/applicants/groups/{applicantGroupId}/notes": {
      "get": {
        "tags": ["Applicants"],
        "summary": "Retrieve all applicant group notes",
        "description": "Retrieves all applicant group notes.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Applicants</span> - `View`",
        "operationId": "GetApplicantGroupNotes",
        "parameters": [
          {
            "name": "applicantGroupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "updateddatetimefrom",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are greater than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "updateddatetimeto",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are less than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "lastupdatedbyuserid",
            "in": "query",
            "description": "Filters results to only notes that were last updated by the specified user identifier.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoteMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Applicants"],
        "summary": "Create an applicant group note",
        "description": "Creates an applicant group note.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Applicants</span> - `View` `Edit`",
        "operationId": "CreateApplicationGroupNote",
        "parameters": [
          {
            "name": "applicantGroupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/NotePostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/applicants/groups/{applicantGroupId}/notes/{noteId}": {
      "get": {
        "tags": ["Applicants"],
        "summary": "Retrieve an applicant group note",
        "description": "Retrieves an applicant group note.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Applicants</span> - `View`",
        "operationId": "GetApplicantGroupNoteByNoteId",
        "parameters": [
          {
            "name": "applicantGroupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Applicants"],
        "summary": "Update an applicant group note",
        "description": "Updates an applicant group note.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Applicants</span> - `View` `Edit`",
        "operationId": "UpdateApplicationGroupNote",
        "parameters": [
          {
            "name": "applicantGroupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/NotePutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/{associationId}/notes": {
      "get": {
        "tags": ["Associations"],
        "summary": "Retrieve all association property notes",
        "description": "Retrieves all association property notes.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Associations and units</span> - `View`",
        "operationId": "GetAssociationNotes",
        "parameters": [
          {
            "name": "associationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "updateddatetimefrom",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are greater than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "updateddatetimeto",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are less than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "lastupdatedbyuserid",
            "in": "query",
            "description": "Filters results to only notes that were last updated by the specified user identifier.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoteMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Associations"],
        "summary": "Create an association note",
        "description": "Creates a new association note.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Associations and units</span> - `View` `Edit`",
        "operationId": "CreateAssociationNote",
        "parameters": [
          {
            "name": "associationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/NotePostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/{associationId}/notes/{noteId}": {
      "get": {
        "tags": ["Associations"],
        "summary": "Retrieve an association property note",
        "description": "Retrieves a association property note.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Associations and units</span> - `View`",
        "operationId": "GetAssociationNoteByNoteId",
        "parameters": [
          {
            "name": "associationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Associations"],
        "summary": "Update an association note",
        "description": "Updates an association note.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Associations and units</span> - `View` `Edit`",
        "operationId": "UpdateAssociationNote",
        "parameters": [
          {
            "name": "associationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/NotePutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/owners/{ownerId}/notes": {
      "get": {
        "tags": ["Association Owners"],
        "summary": "Retrieve all association owner notes",
        "description": "Retrieves all association owner notes.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Association owners and tenants</span> - `View`",
        "operationId": "GetAssociationOwnerNotes",
        "parameters": [
          {
            "name": "ownerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "updateddatetimefrom",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are greater than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "updateddatetimeto",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are less than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "lastupdatedbyuserid",
            "in": "query",
            "description": "Filters results to only notes that were last updated by the specified user identifier.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoteMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Association Owners"],
        "summary": "Create an association owner note",
        "description": "Creates an association owner note.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Association owners and tenants</span> - `View` `Edit`",
        "operationId": "CreateAssociationOwnerNote",
        "parameters": [
          {
            "name": "ownerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/NotePostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/owners/{ownerId}/notes/{noteId}": {
      "get": {
        "tags": ["Association Owners"],
        "summary": "Retrieve an association owner note",
        "description": "Retrieves an association owner note.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Association owners and tenants</span> - `View`",
        "operationId": "GetAssociationOwnerNoteByNoteId",
        "parameters": [
          {
            "name": "ownerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Association Owners"],
        "summary": "Update an association owner note",
        "description": "Updates an association owner note.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Association owners and tenants</span> - `View` `Edit`",
        "operationId": "UpdateAssociationOwnerNote",
        "parameters": [
          {
            "name": "ownerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/NotePutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/ownershipaccounts/{ownershipAccountId}/charges": {
      "post": {
        "tags": ["Association Ownership Accounts"],
        "summary": "Create a ledger charge",
        "description": "Creates a new association ownership account ledger charge.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Ownership account transactions</span> - `View` `Edit`\r\n<br />",
        "operationId": "CreateOwnershipAccountLedgerCharge",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "description": "The ownership account identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OwnershipAccountLedgerChargePostMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnershipAccountTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/ownershipaccounts/{ownershipAccountId}/credits": {
      "post": {
        "tags": ["Association Ownership Accounts"],
        "summary": "Create a ledger credit",
        "description": "Creates a new ownership account ledger credit.",
        "operationId": "CreateOwnershipAccountCredit",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OwnershipAccountCreditPostMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnershipAccountTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/ownershipaccounts/{ownershipAccountId}/notes": {
      "get": {
        "tags": ["Association Ownership Accounts"],
        "summary": "Retrieve all ownership account notes",
        "description": "Retrieves notes for an ownership account.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; OwnershipAccounts</span> - `View`",
        "operationId": "GetAssociationOwnershipAccountNotes",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "updateddatetimefrom",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are greater than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "updateddatetimeto",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are less than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "lastupdatedbyuserid",
            "in": "query",
            "description": "Filters results to only notes that were last updated by the specified user identifier.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoteMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Association Ownership Accounts"],
        "summary": "Create an ownership account note",
        "description": "Creates a new ownership account note.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Ownership accounts</span> - `View` `Edit`",
        "operationId": "CreateAssociationOwnershipAccountNote",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/NotePostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/ownershipaccounts/{ownershipAccountId}/notes/{noteId}": {
      "get": {
        "tags": ["Association Ownership Accounts"],
        "summary": "Retrieve an ownership account note",
        "description": "Retrieves an ownership account note.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; OwnershipAccounts</span> - `View`",
        "operationId": "GetAssociationOwnershipAccountNoteByNoteId",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Association Ownership Accounts"],
        "summary": "Update an ownership account note",
        "description": "Updates an association ownership account note.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Ownership Accounts</span> - `View` `Edit`",
        "operationId": "UpdateAssociationOwnershipAccountNote",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/NotePutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/ownershipaccounts/{ownershipAccountId}/payments": {
      "post": {
        "tags": ["Association Ownership Accounts"],
        "summary": "Create a ledger payment",
        "description": "Creates a new ownership account ledger payment.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Ownership account transactions</span> - `Edit`",
        "operationId": "CreateOwnershipAccountLedgerPayment",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OwnershipAccountLedgerPaymentPostMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnershipAccountTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/ownershipaccounts/{ownershipAccountId}/transactions": {
      "get": {
        "tags": ["Association Ownership Accounts"],
        "summary": "Retrieve ownership account transactions",
        "description": "Retrieves all transactions for a specific ownership account.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Ownership account transactions</span> - `View`",
        "operationId": "GetOwnershipAccountLedger",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "description": "The ownership account identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "transactiondatefrom",
            "in": "query",
            "description": "Filters results to any lease transaction whose start date is greater than or equal to the specified value.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "transactiondateto",
            "in": "query",
            "description": "Filters results to any lease transaction whose end date is less than or equal to the specified value.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "transactiontypes",
            "in": "query",
            "description": "Filters results to any lease transaction whose lease transaction type matches the specified status. If no type is specified, lease transactions with any type will be returned.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Bill",
                  "Check",
                  "Charge",
                  "Payment",
                  "Credit",
                  "Refund",
                  "ApplyDeposit",
                  "ElectronicFundsTransfer",
                  "Other",
                  "Deposit",
                  "GeneralJournalEntry",
                  "OwnerContribution",
                  "ReversePayment",
                  "ReverseElectronicFundsTransfer",
                  "VendorCredit",
                  "RentalApplicationFeePayment",
                  "ReverseRentalApplicationFeePayment",
                  "ReverseOwnerContribution",
                  "VendorRefund",
                  "UnreversedPayment",
                  "UnreversedElectronicFundsTransfer",
                  "UnreversedOwnerContribution",
                  "UnreversedRentalApplicationFeePayment"
                ]
              }
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OwnershipAccountTransactionMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/ownershipaccounts/{ownershipAccountId}/transactions/{transactionId}": {
      "get": {
        "tags": ["Association Ownership Accounts"],
        "summary": "Retrieve a single ownership account transaction",
        "description": "Retrieves a single ownership account transaction.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Ownership account transactions</span> - `View`",
        "operationId": "GetOwnershipAccountTransactionById",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "description": "The ownership account identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "transactionId",
            "in": "path",
            "description": "The transaction identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnershipAccountTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/ownershipaccounts/outstandingbalances": {
      "get": {
        "tags": ["Association Ownership Accounts"],
        "summary": "Retrieve all outstanding balances",
        "description": "Retrieves a list of ownership account outstanding balances.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Outstanding Balances</span> - `View`",
        "operationId": "GetOwnershipAccountOutstandingBalances",
        "parameters": [
          {
            "name": "associationid",
            "in": "query",
            "description": "Association unique identifier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ownershipaccountstatuses",
            "in": "query",
            "description": "List of ownership account statuses",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["Active", "Past", "Future"]
              }
            }
          },
          {
            "name": "ownershipaccountids",
            "in": "query",
            "description": "List of ownership account ids",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "pastdueemail",
            "in": "query",
            "description": "Status of notification of outstanding balances",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["NoEmailAddress", "Sent"]
            }
          },
          {
            "name": "balanceduration",
            "in": "query",
            "description": "Duration of outstanding balances",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "TotalBalance",
                "Balance0to30Days",
                "Balance31to60Days",
                "Balance61to90Days",
                "BalanceOver90Days"
              ]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OwnershipAccountOutstandingBalanceMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/tenants/{tenantId}/notes": {
      "get": {
        "tags": ["Association Tenants"],
        "summary": "Retrieve all association tenant notes",
        "description": "Retrieves all association tenant notes.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Association owners and tenants</span> - `View`",
        "operationId": "GetAssociationTenantNotes",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "updateddatetimefrom",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are greater than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "updateddatetimeto",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are less than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "lastupdatedbyuserid",
            "in": "query",
            "description": "Filters results to only notes that were last updated by the specified user identifier.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoteMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Association Tenants"],
        "summary": "Create an association tenant note",
        "description": "Creates an association tenant note.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Association owners and tenants</span> - `View` `Edit`",
        "operationId": "CreateAssociationTenantNote",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/NotePostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/tenants/{tenantId}/notes/{noteId}": {
      "get": {
        "tags": ["Association Tenants"],
        "summary": "Retrieve an association tenant note",
        "description": "Retrieves an association tenant note.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Association owners and tenants</span> - `View`",
        "operationId": "GetAssociationTenantNoteById",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Association Tenants"],
        "summary": "Update an association tenant note",
        "description": "Updates an association tenant note.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Association owners and tenants</span> - `View` `Edit`",
        "operationId": "UpdateAssociationTenantNote",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/NotePutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/units/{unitId}/notes": {
      "get": {
        "tags": ["Association Units"],
        "summary": "Retrieve all association unit notes",
        "description": "Retrieves all association unit notes.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Associations and units</span> - `View`",
        "operationId": "GetAssociationUnitNotes",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "updateddatetimefrom",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are greater than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "updateddatetimeto",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are less than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "lastupdatedbyuserid",
            "in": "query",
            "description": "Filters results to only notes that were last updated by the specified user identifier.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoteMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Association Units"],
        "summary": "Create an association unit note",
        "description": "Creates a new association unit note.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Associations and units</span> - `View` `Edit`",
        "operationId": "CreateAssociationUnitNote",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/NotePostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/units/{unitId}/notes/{noteId}": {
      "get": {
        "tags": ["Association Units"],
        "summary": "Retrieve an association unit note",
        "description": "Retrieves an association unit note.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Associations and units</span> - `View`",
        "operationId": "GetAssociationUnitNoteByNoteId",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Association Units"],
        "summary": "Update an association unit note",
        "description": "Updates an association unit note.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations &gt; Associations and units</span> - `View` `Edit`",
        "operationId": "UpdateAssociationUnitNote",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/NotePutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts": {
      "get": {
        "tags": ["Bank Accounts"],
        "summary": "Retrieve all bank accounts",
        "description": "Retrieves a list of bank accounts.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bank Accounts</span> - `View`",
        "operationId": "GetAllBankAccounts",
        "parameters": [
          {
            "name": "bankaccountstatus",
            "in": "query",
            "description": "Filters results by the status of the bank account. If no status is specified, bank accounts with any status will be returned.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["Active", "InActive"]
            }
          },
          {
            "name": "bankname",
            "in": "query",
            "description": "Filters results to any bank account whose name *contains* the specified value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BankAccountMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Bank Accounts"],
        "summary": "Create a bank account",
        "description": "Creates a bank account.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Banking</span> - `View` `Edit`",
        "operationId": "CreateBankAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BankAccountPostMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}": {
      "get": {
        "tags": ["Bank Accounts"],
        "summary": "Retrieve a bank account",
        "description": "Retrieves a specific bank account.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bank Accounts</span> - `View`",
        "operationId": "GetBankAccount",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "description": "The bank account identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Bank Accounts"],
        "summary": "Update a bank account",
        "description": "Updates a bank account.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Banking</span> - `View` `Edit`",
        "operationId": "UpdateBankAccount",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BankAccountPutMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/checks": {
      "get": {
        "tags": ["Bank Accounts"],
        "summary": "Retrieve all checks",
        "description": "Retrieves all bank account checks.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bank Accounts</span> - `View`",
        "operationId": "GetBankAccountChecks",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "Filters results to any transactions that were recorded on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "enddate",
            "in": "query",
            "description": "Filters results to any transactions that were recorded on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BankAccountCheckMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Bank Accounts"],
        "summary": "Create a check",
        "description": "Creates a check.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bank Accounts</span> - `View` `Edit`",
        "operationId": "CreateBankAccountCheck",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BankAccountCheckPostMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountCheckMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/checks/{checkId}": {
      "get": {
        "tags": ["Bank Accounts"],
        "summary": "Retrieve a check",
        "description": "Retrieves a bank account check.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bank Accounts</span> - `View`",
        "operationId": "GetCheckForBankAccount",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "checkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountCheckMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Bank Accounts"],
        "summary": "Update a check",
        "description": "Updates a check.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bank Accounts</span> - `View` `Edit`",
        "operationId": "UpdateCheckForBankAccount",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "checkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BankAccountCheckPutMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountCheckMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/deposits": {
      "get": {
        "tags": ["Bank Accounts"],
        "summary": "Retrieve all deposits",
        "description": "Retrieves all bank account deposits.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; BankAccount</span> - `View`",
        "operationId": "GetBankAccountDeposits",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "Filters results to any deposits that were recorded on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "enddate",
            "in": "query",
            "description": "Filters results to any deposits that were recorded on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BankAccountDepositMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Bank Accounts"],
        "summary": "Create a deposit",
        "description": "Creates a deposit.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bank Accounts</span> - `View` `Edit`",
        "operationId": "CreateBankAccountDeposit",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BankAccountDepositPostMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountDepositMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/deposits/{depositId}": {
      "get": {
        "tags": ["Bank Accounts"],
        "summary": "Retrieve a deposit",
        "description": "Retrieves a bank account deposit.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; BankAccount</span> - `View`",
        "operationId": "GetBankAccountDepositById",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "depositId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountDepositMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Bank Accounts"],
        "summary": "Update a deposit",
        "description": "Updates a deposit.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bank Accounts</span> - `View` `Edit`",
        "operationId": "UpdateBankAccountDeposit",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "depositId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BankAccountDepositPutMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountDepositMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/quickdeposits": {
      "get": {
        "tags": ["Bank Accounts"],
        "summary": "Retrieve all quick deposits",
        "description": "Retrieves all quick deposits.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; BankAccount</span> - `View`",
        "operationId": "GetAllQuickDeposits",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "Filters results to any transactions that were recorded on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "enddate",
            "in": "query",
            "description": "Filters results to any transactions that were recorded on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BankAccountQuickDepositMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Bank Accounts"],
        "summary": "Create a quick deposit",
        "description": "Creates a quick deposit.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; BankAccount</span> - `View`",
        "operationId": "CreateQuickDeposit",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/BankAccountQuickDepositSaveMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountQuickDepositMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/quickdeposits/{quickDepositId}": {
      "get": {
        "tags": ["Bank Accounts"],
        "summary": "Retrieve a quick deposit",
        "description": "Retrieves a quick deposit.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; BankAccount</span> - `View`",
        "operationId": "GetQuickDepositById",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "quickDepositId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountQuickDepositMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Bank Accounts"],
        "summary": "Update a quick deposit",
        "description": "Updates a quick deposit.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bank Accounts</span> - `Edit`",
        "operationId": "UpdateQuickDeposit",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "quickDepositId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/BankAccountQuickDepositSaveMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountQuickDepositMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/transactions": {
      "get": {
        "tags": ["Bank Accounts"],
        "summary": "Retrieve all transactions",
        "description": "Retrieves all bank account transactions.\r\n            <br /><br />\r\n            Note: When using the `orderby` query string parameter, the only supported parameter is EntryDate.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bank Accounts</span> - `View`",
        "operationId": "GetBankAccountTransactions",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "selectionentityid",
            "in": "query",
            "description": "Filters results to any transaction containing journal lines for an entity associated with the specified entity id value. The id must be of the type specified in SelectionEntityType.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "selectionentitytype",
            "in": "query",
            "description": "Specifies the type of entity that SelectionEntityId refers to.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["Company", "Rental", "RentalOwner", "Association"]
            }
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "Filters results to any transactions that were recorded on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "enddate",
            "in": "query",
            "description": "Filters results to any transactions that were recorded on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BankAccountTransactionMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/transactions/{transactionId}": {
      "get": {
        "tags": ["Bank Accounts"],
        "summary": "Retrieve a transaction",
        "description": "Retrieves a specific bank account transaction.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bank Account</span> - `View`",
        "operationId": "GetBankAccountTransactionById",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/transfers": {
      "get": {
        "tags": ["Bank Accounts"],
        "summary": "Retrieve all transfers",
        "description": "Retrieves all bank account transfers.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; BankAccount</span> - `View`",
        "operationId": "GetBankAccountTransfers",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "Filters results to any transfers that were recorded on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "enddate",
            "in": "query",
            "description": "Filters results to any transfers that were recorded on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BankAccountTransferMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Bank Accounts"],
        "summary": "Create a transfer",
        "description": "Creates a bank account transfer.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bank Accounts</span> - `Edit`",
        "operationId": "CreateBankAccountTransfer",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/BankAccountTransferSaveMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountTransferMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/transfers/{transferId}": {
      "get": {
        "tags": ["Bank Accounts"],
        "summary": "Retrieve a transfer",
        "description": "Retrieves a bank account transfer.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bank Accounts</span> - `View`",
        "operationId": "GetBankAccountTransferById",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "description": "The bank account identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "transferId",
            "in": "path",
            "description": "The transfer identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Bank Accounts"],
        "summary": "Update a transfer for a bank account",
        "description": "Updates a bank account transfer.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bank Accounts</span> - `Edit`",
        "operationId": "UpdateBankAccountTransfer",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "transferId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/BankAccountTransferSaveMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountTransferMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/undepositedfunds": {
      "get": {
        "tags": ["Bank Accounts"],
        "summary": "Retrieve all undeposited funds",
        "description": "Retrieve all bank account undeposited funds.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bank Accounts</span> - `View`",
        "operationId": "GetUndepositedFunds",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UndepositedFundsMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/withdrawals": {
      "get": {
        "tags": ["Bank Accounts"],
        "summary": "Retrieve all withdrawals",
        "description": "Retrieves all bank account withdrawals.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; BankAccounts</span> - `View`",
        "operationId": "GetBankAccountWithdrawals",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "Filters results to any transactions that were recorded on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "enddate",
            "in": "query",
            "description": "Filters results to any transactions that were recorded on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BankAccountWithdrawalMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Bank Accounts"],
        "summary": "Create a withdrawal",
        "description": "Creates a bank account withdrawal.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bank Accounts</span> - `View` `Edit`",
        "operationId": "CreateWithdrawalForBankAccount",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/BankAccountWithdrawalSaveMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountWithdrawalMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/withdrawals/{withdrawalId}": {
      "get": {
        "tags": ["Bank Accounts"],
        "summary": "Retrieve a withdrawal",
        "description": "Retrieves a bank account withdrawal.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; BankAccounts</span> - `View`",
        "operationId": "GetBankAccountWithdrawalById",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "withdrawalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountWithdrawalMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Bank Accounts"],
        "summary": "Update a withdrawal",
        "description": "Updates a bank account withdrawal.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bank Accounts</span> - `View` `Edit`",
        "operationId": "UpdateBankAccountWithdrawal",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "withdrawalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/BankAccountWithdrawalSaveMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountWithdrawalMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bills": {
      "get": {
        "tags": ["Accounting"],
        "summary": "Retrieve all bills",
        "description": "Retrieves a list of bills.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bills</span> - `View`",
        "operationId": "GetBillsAsync",
        "parameters": [
          {
            "name": "entityid",
            "in": "query",
            "description": "Filters results to any bill containing line items associated with the specified entity identifier. This filter is used in conjunction with the `EntityType` field which must be set to the type of entity this identifier references.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "entitytype",
            "in": "query",
            "description": "Specifies the type of entity that `EntityId` refers to. This field is required if `EntityId` is specified.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["Rental", "RentalOwner", "Association"]
            }
          },
          {
            "name": "vendorid",
            "in": "query",
            "description": "Filters results to bills associated with a specific vendor.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "referencenumber",
            "in": "query",
            "description": "Filters results to bills whose reference number contains the specified value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paidstatus",
            "in": "query",
            "description": "Filters results by the bill's paid status. If no status is specified, bills with any status will be returned.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["Paid", "Unpaid", "UncollectedMarkups"]
            }
          },
          {
            "name": "frompaiddate",
            "in": "query",
            "description": "Filters results to any bill whose paid date is greater than or equal to the specified value.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "topaiddate",
            "in": "query",
            "description": "Filters results to any bill whose paid date is less than or equal to the specified value.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BillMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Accounting"],
        "summary": "Create a bill",
        "description": "Creates a bill.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bills</span> - `View` `Edit`",
        "operationId": "CreateBill",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillPostMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bills/{billId}": {
      "get": {
        "tags": ["Accounting"],
        "summary": "Retrieve a bill",
        "description": "Retrieves a single bill.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bills</span> - `View`",
        "operationId": "GetBillById",
        "parameters": [
          {
            "name": "billId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Accounting"],
        "summary": "Update a bill",
        "description": "Updates a bill.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bills</span> - `View` `Edit`",
        "operationId": "UpdateBill",
        "parameters": [
          {
            "name": "billId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillPutMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bills/{billId}/payments": {
      "get": {
        "tags": ["Accounting"],
        "summary": "Retrieve all bill payments",
        "description": "Retrieves a list of bill payments for a specific bill.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bills</span> - `View`",
        "operationId": "GetBillPayments",
        "parameters": [
          {
            "name": "billId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BillPaymentMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bills/{billId}/payments/{paymentId}": {
      "get": {
        "tags": ["Accounting"],
        "summary": "Retrieve a bill payment",
        "description": "Retrieves specific bill payment.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bills</span> - `View`",
        "operationId": "GetBillPaymentById",
        "parameters": [
          {
            "name": "billId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillPaymentMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/communications/phonelogs": {
      "get": {
        "tags": ["Communications"],
        "summary": "Retrieve all phone logs",
        "description": "Retrieves all phone logs.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Communications &gt; Timelines (Phone Logs)</span> - `View`",
        "operationId": "GetPhoneLogs",
        "parameters": [
          {
            "name": "fromdate",
            "in": "query",
            "description": "Filters results to any phone log whose call date is greater than or equal to the specified value.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "todate",
            "in": "query",
            "description": "Filters results to any phone log whose call date is less than or equal to the specified value.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "loggedbystaffuserids",
            "in": "query",
            "description": "Filters results to any phone log that was logged by staff user(s).",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "subject",
            "in": "query",
            "description": "Filters results to any phone log whose subject *contains* the specified value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "participantentityid",
            "in": "query",
            "description": "Filters results to any phone logs that match the participant identifier. Note, if a value is provided in this field the `ParticipantEntityType` must also be provided.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "participantentitytype",
            "in": "query",
            "description": "Filters results to any phone log with the specified participant type. This field is required if a value is provided for the `ParticipantEntityId` field.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "Vendor",
                "RentalOwner",
                "RentalTenant",
                "AssociationOwner"
              ]
            }
          },
          {
            "name": "unitagreementid",
            "in": "query",
            "description": "Filters results to any phone log with the specified unit agreement identifier. Note, if a value is provided in this field the `UnitAgreementType` must also be provided.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "unitagreementtype",
            "in": "query",
            "description": "Filters results to any phone log with the specified unit agreement type. This field is required if a value is provided for the `UnitAgreementId` field.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["Lease", "OwnershipAccount"]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PhoneLogMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Communications"],
        "summary": "Create a phone log",
        "description": "Creates a phone log.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Communications &gt; Timelines (Phone Logs)</span> - `View` `Edit`",
        "operationId": "CreatePhoneLog",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneLogPostMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneLogMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/communications/phonelogs/{phoneLogId}": {
      "get": {
        "tags": ["Communications"],
        "summary": "Retrieve a phone log",
        "description": "Retrieves a specific phone log.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Communications &gt; Timelines (Phone Logs)</span> - `View`",
        "operationId": "GetPhoneLogById",
        "parameters": [
          {
            "name": "phoneLogId",
            "in": "path",
            "description": "The phone log identifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneLogMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Communications"],
        "summary": "Update a phone log",
        "description": "Update a phone log\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Communications &gt; Timelines (Phone Logs)</span> - `View` `Edit`",
        "operationId": "UpdatePhoneLog",
        "parameters": [
          {
            "name": "phoneLogId",
            "in": "path",
            "description": "The phone log identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneLogPutMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneLogMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/generalledger/transactions": {
      "get": {
        "tags": ["Accounting"],
        "summary": "Retrieve all general ledger transactions",
        "description": "Retrieves a list of general ledger transactions.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; General Ledger Transactions</span> - `View`",
        "operationId": "GetAllTransactions",
        "parameters": [
          {
            "name": "selectionentityid",
            "in": "query",
            "description": "Filters results to any transaction containing journal lines for an entity associated with the specified entity id value. The id must be of the type specified in SelectionEntityType.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "selectionentitytype",
            "in": "query",
            "description": "Specifies the type of entity that SelectionEntityId refers to.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["Rental", "RentalOwner", "Association"]
            }
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "Filters results to any transaction whose date is greater than or equal to the specified value.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "enddate",
            "in": "query",
            "description": "Filters results to any transaction whose date is less than or equal to the specified value.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "glaccountids",
            "in": "query",
            "description": "Filters results to transactions whose general ledger account belongs to the specified set of general ledger account ids.",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GeneralLedgerTransactionMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/generalledger/transactions/{transactionId}": {
      "get": {
        "tags": ["Accounting"],
        "summary": "Retrieve a general ledger transaction",
        "description": "Retrieves a specific general ledger transaction.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; General Ledger Transactions</span> - `View`",
        "operationId": "GetTransactionById",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "description": "The general ledger transaction identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralLedgerTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/glaccounts": {
      "get": {
        "tags": ["Accounting"],
        "summary": "Retrieve all general ledger accounts",
        "description": "Retrieves a list of general ledger accounts.<br /><br />General ledger accounts are used to categorize transactions for accounting purposes.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; General Ledger Accounts</span> - `View`",
        "operationId": "GetAllGLAccounts",
        "parameters": [
          {
            "name": "accounttypes",
            "in": "query",
            "description": "Filters results by the specified general ledger account types.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["Asset", "Liability", "Equity", "Income", "Expense"]
              }
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GLAccountMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/glaccounts/{glAccountId}": {
      "get": {
        "tags": ["Accounting"],
        "summary": "Retrieve a general ledger account",
        "description": "Retrieves a specific general ledger account.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; General Ledger Accounts</span> - `View`",
        "operationId": "GetGlAccountById",
        "parameters": [
          {
            "name": "glAccountId",
            "in": "path",
            "description": "The general ledger account identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GLAccountMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/glaccounts/balances": {
      "get": {
        "tags": ["Accounting"],
        "summary": "Retrieve all general ledger account balances",
        "description": "Retrieves all general ledger account balances as of a given date. The response includes the total balance of each account along with the subtotals for any accounting entities (company, associations or rental properties) that have transactions assigned to the account.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; General Ledger Accounts</span> - `View`",
        "operationId": "GetGlAccountBalances",
        "parameters": [
          {
            "name": "entitytype",
            "in": "query",
            "description": "Specifies the type of entity that `EntityId` field refers to.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["Association", "Rental", "RentalOwner"]
            }
          },
          {
            "name": "entityid",
            "in": "query",
            "description": "Filters transactions used in calculating the general ledger account balances to only those containing journal lines for with the specified entity id value. The entity id specified must be of the type specified in `EntityType`.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "glaccountids",
            "in": "query",
            "description": "Filters results to the specified set of general ledger account identifiers.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "accountingbasis",
            "in": "query",
            "description": "The methodology in which revenues and expenses are recognized when calculating the balances. Specifying `Cash` calculates balances based on when money changes hands. Specifying `Accrual` calculates balances based on the period in which the transaction originally happened.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["Accrual", "Cash"]
            }
          },
          {
            "name": "asofdate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GLAccountBalanceMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/leases": {
      "get": {
        "tags": ["Leases"],
        "summary": "Retrieve all leases",
        "description": "Retrieves a list of leases.\r\n<br /><br /><span class=\"permissionBlock\">Rentals &gt; Leases</span> - `View`",
        "operationId": "GetLeases",
        "parameters": [
          {
            "name": "propertyids",
            "in": "query",
            "description": "Filters results to any lease whose unit belongs to the specified set of property ids.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "rentalownerids",
            "in": "query",
            "description": "Filters results to any lease whose unit belongs to a property with a rental owner in the specified set of rental owner ids.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "unitnumber",
            "in": "query",
            "description": "Filters results to any lease whose unit number *contains* the specified value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantname",
            "in": "query",
            "description": "Filters results to any lease whose current tenants' names *contain* the specified value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "leasedatefrom",
            "in": "query",
            "description": "Filters results to any lease whose start date is greater than or equal to the specified value.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "leasedateto",
            "in": "query",
            "description": "Filters results to any lease whose end date is less than or equal to the specified value.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "leasetypes",
            "in": "query",
            "description": "Filters results to any lease whose lease type matches the specified status. If no type is specified, leases with any type will be returned.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["None", "Fixed", "FixedWithRollover", "AtWill"]
              }
            }
          },
          {
            "name": "leasestatuses",
            "in": "query",
            "description": "Filters results to any lease whose lease term matches the specified status. If no status is specified, leases with any lease term status will be returned.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["Active", "Past", "Future"]
              }
            }
          },
          {
            "name": "createddatetimefrom",
            "in": "query",
            "description": "Filters results to any lease whose created date and time are greater than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "createddatetimeto",
            "in": "query",
            "description": "Filters results to any lease whose created date and time are less than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeaseMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Leases"],
        "summary": "Create a lease",
        "description": "Creates a signed lease.\r\n<br /><br /><span class=\"permissionBlock\">Rentals &gt; Leases</span> - `Edit`\r\n<br /><span class=\"permissionBlock\">Rentals &gt; Tenants</span> - `Edit`\r\n<br /><span class=\"permissionBlock\">Rentals &gt; Lease transactions</span> - `Edit`",
        "operationId": "CreateLease",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeasePostMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/leases/{leaseId}": {
      "get": {
        "tags": ["Leases"],
        "summary": "Retrieve a lease",
        "description": "Retrieves a specific lease.\r\n<br /><br /><span class=\"permissionBlock\">Rentals &gt; Leases</span> - `View`",
        "operationId": "GetLeaseById",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "description": "The lease identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Leases"],
        "summary": "Update a lease",
        "description": "Update a signed lease.\r\n<br /><br /><span class=\"permissionBlock\">Rentals &gt; Leases</span> - `Edit`",
        "operationId": "UpdateLease",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeasePutMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/leases/{leaseId}/charges": {
      "post": {
        "tags": ["Leases"],
        "summary": "Create a ledger charge",
        "description": "Creates a charge transaction on a specific lease ledger.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Lease transactions</span> - `View` `Edit`",
        "operationId": "CreateLeaseLedgerCharge",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeaseChargeMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeaseTransactionMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Lease not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/leases/{leaseId}/credits": {
      "post": {
        "tags": ["Leases"],
        "summary": "Create a ledger credit",
        "description": "Creates a lease ledger credit.",
        "operationId": "CreateLeaseCredit",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeaseLedgerCreditPostMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaseTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/leases/{leaseId}/notes": {
      "get": {
        "tags": ["Leases"],
        "summary": "Retrieve all lease notes",
        "description": "Retrieves all lease notes.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Leases</span> - `View`",
        "operationId": "GetLeaseNotes",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "updateddatetimefrom",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are greater than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "updateddatetimeto",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are less than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "lastupdatedbyuserid",
            "in": "query",
            "description": "Filters results to only notes that were last updated by the specified user identifier.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoteMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Leases"],
        "summary": "Create a lease note",
        "description": "Creates a lease note.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Leases</span> - `View` `Edit`",
        "operationId": "CreateLeaseNote",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/NotePostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/leases/{leaseId}/notes/{noteId}": {
      "get": {
        "tags": ["Leases"],
        "summary": "Retrieve a lease note",
        "description": "Retrieves a lease note.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Leases</span> - `View`",
        "operationId": "GetLeaseNoteByNoteId",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Leases"],
        "summary": "Update a lease note",
        "description": "Updates a lease note.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Leases</span> - `View` `Edit`",
        "operationId": "UpdateLeaseNote",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/NotePutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/leases/{leaseId}/payments": {
      "post": {
        "tags": ["Leases"],
        "summary": "Create a ledger payment",
        "description": "Creates a lease ledger payment.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Lease transactions</span> - `View` `Edit`",
        "operationId": "CreatePayment",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "description": "The lease unique identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeaseLedgerPaymentPostMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaseTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/leases/{leaseId}/transactions": {
      "get": {
        "tags": ["Leases"],
        "summary": "Retrieve all lease transactions",
        "description": "Retrieves all the transactions for a specific lease.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Lease transactions</span> - `View`",
        "operationId": "GetLeaseLedgers",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "transactiondatefrom",
            "in": "query",
            "description": "Filters results to any lease transaction whose start date is greater than or equal to the specified value.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "transactiondateto",
            "in": "query",
            "description": "Filters results to any lease transaction whose end date is less than or equal to the specified value.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "transactiontypes",
            "in": "query",
            "description": "Filters results to any lease transaction whose lease transaction type matches the specified status. If no type is specified, lease transactions with any type will be returned.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Bill",
                  "Check",
                  "Charge",
                  "Payment",
                  "Credit",
                  "Refund",
                  "ApplyDeposit",
                  "ElectronicFundsTransfer",
                  "Other",
                  "Deposit",
                  "GeneralJournalEntry",
                  "OwnerContribution",
                  "ReversePayment",
                  "ReverseElectronicFundsTransfer",
                  "VendorCredit",
                  "RentalApplicationFeePayment",
                  "ReverseRentalApplicationFeePayment",
                  "ReverseOwnerContribution",
                  "VendorRefund",
                  "UnreversedPayment",
                  "UnreversedElectronicFundsTransfer",
                  "UnreversedOwnerContribution",
                  "UnreversedRentalApplicationFeePayment"
                ]
              }
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeaseTransactionMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/leases/{leaseId}/transactions/{transactionId}": {
      "get": {
        "tags": ["Leases"],
        "summary": "Retrieve a lease transaction",
        "description": "Retrieves a specific lease transaction.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Lease Transactions</span> - `View`",
        "operationId": "GetLeaseLedgerTransactionById",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaseTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/leases/outstandingbalances": {
      "get": {
        "tags": ["Leases"],
        "summary": "Retrieve all lease outstanding balances",
        "description": "Retrieves a list of lease outstanding balances.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Outstanding Balances</span> - `View`",
        "operationId": "GetLeaseOutstandingBalances",
        "parameters": [
          {
            "name": "entitytype",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["Rental", "RentalOwner"]
            }
          },
          {
            "name": "entityid",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "leasestatuses",
            "in": "query",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["Active", "Past", "Future"]
              }
            }
          },
          {
            "name": "leaseids",
            "in": "query",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "pastdueemail",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["NoEmailAddress", "Sent"]
            }
          },
          {
            "name": "balanceduration",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "TotalBalance",
                "Balance0to30Days",
                "Balance31to60Days",
                "Balance61to90Days",
                "BalanceOver90Days"
              ]
            }
          },
          {
            "name": "evictionstatus",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["NotEvictionPending", "EvictionPending"]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeaseOutstandingBalanceMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/leases/tenants": {
      "get": {
        "tags": ["Rental Tenants"],
        "summary": "Retrieve all tenants",
        "description": "Retrieves a list of tenants.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Tenants</span> - `View`",
        "operationId": "GetAllTenants",
        "parameters": [
          {
            "name": "buildingstatuses",
            "in": "query",
            "description": "Filters results by the status of the rental property the tenants are associated with. If no status is specified tenants in either `active` and `inactive` rental properties will be returned.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["Active", "InActive"]
              }
            }
          },
          {
            "name": "leasetermstatuses",
            "in": "query",
            "description": "Filters results to any tenant whose lease term matches the specified status.  If no status is specified tenants with any lease terms status will be returned.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["Active", "Past", "Future"]
              }
            }
          },
          {
            "name": "unitnumber",
            "in": "query",
            "description": "Filters results to any tenant whose unit number *contains* the specified value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filters results to any tenant whose name *contains* the specified value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phone",
            "in": "query",
            "description": "Filters results to any tenant whose phone number *contains* the specified value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Filters results to any tenant whose email *contains* the specified value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyids",
            "in": "query",
            "description": "Filters results to tenants whose rental unit belongs to the specified set of property ids.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "rentalownerids",
            "in": "query",
            "description": "Filters results to tenants whose rental unit belongs to a property with a rental owner in the specified set of rental owner ids.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Rental Tenants"],
        "summary": "Create a rental tenant",
        "description": "Creates a rental tenant.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Tenants</span> - `View` `Edit`\r\n<br /><span class=\"permissionBlock\">Rentals &gt; Leases</span> - `View` `Edit`",
        "operationId": "CreateRentalTenant",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RentalTenantPostMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/leases/tenants/{tenantId}": {
      "get": {
        "tags": ["Rental Tenants"],
        "summary": "Retrieve a tenant",
        "description": "Retrieve a specific tenant.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Tenants</span> - `View`",
        "operationId": "GetTenantById",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Rental Tenants"],
        "summary": "Update a rental tenant",
        "description": "Updates a rental tenant.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Tenants</span> - `View` `Edit`",
        "operationId": "UpdateRentalTenant",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RentalTenantPutMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/leases/tenants/{tenantId}/notes": {
      "get": {
        "tags": ["Rental Tenants"],
        "summary": "Retrieve all tenant notes",
        "description": "Retrieves all tenant notes.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Tenants</span> - `View`",
        "operationId": "GetAllTenantNotes",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "updateddatetimefrom",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are greater than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "updateddatetimeto",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are less than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "lastupdatedbyuserid",
            "in": "query",
            "description": "Filters results to only notes that were last updated by the specified user identifier.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoteMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Rental Tenants"],
        "summary": "Create a lease tenant note",
        "description": "Creates a lease tenant note.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Tenants</span> - `View` `Edit`",
        "operationId": "CreateTenantNote",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/NotePostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/leases/tenants/{tenantId}/notes/{noteId}": {
      "get": {
        "tags": ["Rental Tenants"],
        "summary": "Retrieve a tenant note",
        "description": "Retrieves a tenant note.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Tenants</span> - `View`",
        "operationId": "GetTenantNoteById",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Rental Tenants"],
        "summary": "Update a lease tenant note",
        "description": "Updates a lease tenant note.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Tenants</span> - `View` `Edit`",
        "operationId": "UpdateLeaseTenantNote",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/NotePutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals": {
      "get": {
        "tags": ["Rental Properties"],
        "summary": "Retrieve all rental properties",
        "description": "Retrieves a list of rental properties.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Rental properties and units</span> - `View`",
        "operationId": "GetAllRentals",
        "parameters": [
          {
            "name": "location",
            "in": "query",
            "description": "Filters results to only rental properties whose address *contains* the specified value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "Filters results by the rental type. If no type is provided all types will be returned.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["Residential", "Commercial"]
              }
            }
          },
          {
            "name": "subtypes",
            "in": "query",
            "description": "Filters results by the sub type of the rental property. If no sub type is specified all sub types will be returned.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "CondoTownhome",
                  "MultiFamily",
                  "SingleFamily",
                  "Industrial",
                  "Office",
                  "Retail",
                  "ShoppingCenter",
                  "Storage",
                  "ParkingSpace"
                ]
              }
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filters results by the status of the rental property. If no status is specified both `active` and `inactive` rental properties will be returned.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["Active", "InActive"]
            }
          },
          {
            "name": "rentalownerids",
            "in": "query",
            "description": "Filters results to only rental properties whose RentalOwnerId matches the specified Id.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "propertyids",
            "in": "query",
            "description": "Filters results to only rental properties units whose Rental matches the specified Id.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RentalMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Rental Properties"],
        "summary": "Create a rental property",
        "description": "Creates a new rental property.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Rental properties and units</span> - `View` `Edit`",
        "operationId": "CreateRentalProperty",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RentalPropertyPostMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/{propertyId}": {
      "get": {
        "tags": ["Rental Properties"],
        "summary": "Retrieve a rental property",
        "description": "Retrieve a specific rental property.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Rental properties and units</span> - `View`",
        "operationId": "GetRentalById",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "The rental property identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Rental Properties"],
        "summary": "Update a rental property",
        "description": "Updates a rental property.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Rental properties and units</span> - `View` `Edit`",
        "operationId": "UpdateRentalProperty",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RentalPropertyPutMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/{propertyId}/notes": {
      "get": {
        "tags": ["Rental Properties"],
        "summary": "Retrieve all rental property notes",
        "description": "Retrieve all rental property notes.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Rental properties and units</span> - `View`",
        "operationId": "GetRentalNotes",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "updateddatetimefrom",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are greater than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "updateddatetimeto",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are less than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "lastupdatedbyuserid",
            "in": "query",
            "description": "Filters results to only notes that were last updated by the specified user identifier.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoteMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Rental Properties"],
        "summary": "Create a rental property note",
        "description": "Creates a rental property note.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Rental properties and units</span> - `View` `Edit`",
        "operationId": "CreateRentalPropertyNote",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/NotePostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/{propertyId}/notes/{noteId}": {
      "get": {
        "tags": ["Rental Properties"],
        "summary": "Retrieve a rental property note",
        "description": "Retrieves a rental property note.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Rental properties and units</span> - `View`",
        "operationId": "GetRentalNoteByNoteId",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Rental Properties"],
        "summary": "Update a rental property note",
        "description": "Updates a rental property note.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Rental properties and units</span> - `View` `Edit`",
        "operationId": "UpdateRentalPropertyNote",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/NotePutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/owners": {
      "get": {
        "tags": ["Rental Owners"],
        "summary": "Retrieve all rental owners",
        "description": "Retrieves a list of rental owners.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Property Rental Owners</span> - `View`",
        "operationId": "GetRentalOwners",
        "parameters": [
          {
            "name": "propertyids",
            "in": "query",
            "description": "Filters results to any lease whose unit belongs to the specified set of property ids.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filters results by the status of the user. If no status is specified both `active` and `inactive` users will be returned.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["Inactive", "Active"]
            }
          },
          {
            "name": "agreementdaysremaining",
            "in": "query",
            "description": "Filters results by the days remaining on their lease agreement.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ownername",
            "in": "query",
            "description": "Filters results to any owner whose name *contains* the specified value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phone",
            "in": "query",
            "description": "Filters results to any owner who has a phone number that *contains* the specified value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RentalOwnerMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Rental Owners"],
        "summary": "Create a rental owner",
        "description": "Creates a rental owner.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Property Rental Owners</span> - `View` `Edit`",
        "operationId": "CreateRentalOwner",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RentalOwnerPostMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalOwnerMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/owners/{rentalOwnerId}": {
      "get": {
        "tags": ["Rental Owners"],
        "summary": "Retrieve a rental owner",
        "description": "Retrieves a specific rental owner.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Property Rental Owners</span> - `View`",
        "operationId": "GetRentalOwnerById",
        "parameters": [
          {
            "name": "rentalOwnerId",
            "in": "path",
            "description": "The rental owner identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalOwnerMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Rental Owners"],
        "summary": "Update a rental owner",
        "description": "Updates a rental owner.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Property Rental Owners</span> - `View` `Edit`",
        "operationId": "UpdateRentalOwner",
        "parameters": [
          {
            "name": "rentalOwnerId",
            "in": "path",
            "description": "The identifier of the rental owner to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RentalOwnerPutMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalOwnerMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/owners/{rentalOwnerId}/notes": {
      "get": {
        "tags": ["Rental Owners"],
        "summary": "Retrieves all rental owner notes",
        "description": "Retrieves all rental owner notes.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Property Rental Owners</span> - `View`",
        "operationId": "GetRentalOwnerNotes",
        "parameters": [
          {
            "name": "rentalOwnerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "updateddatetimefrom",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are greater than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "updateddatetimeto",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are less than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "lastupdatedbyuserid",
            "in": "query",
            "description": "Filters results to only notes that were last updated by the specified user identifier.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoteMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Rental Owners"],
        "summary": "Create a Rental Owner note",
        "description": "Creates a new Rental Owner note.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Property Rental Owners</span> - `View` `Edit`",
        "operationId": "CreateRentalOwnerNote",
        "parameters": [
          {
            "name": "rentalOwnerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/NotePostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/owners/{rentalOwnerId}/notes/{noteId}": {
      "get": {
        "tags": ["Rental Owners"],
        "summary": "Retrieve a rental owner note",
        "description": "Retrieves a rental owner note.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Property Rental Owners</span> - `View`",
        "operationId": "GetRentalOwnerNoteById",
        "parameters": [
          {
            "name": "rentalOwnerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Rental Owners"],
        "summary": "Update a Rental Owner note",
        "description": "Updates a Rental Owner note.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Property Rental Owners</span> - `View` `Edit`",
        "operationId": "UpdateRentalOwnerNote",
        "parameters": [
          {
            "name": "rentalOwnerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/NotePutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/units": {
      "get": {
        "tags": ["Rental Units"],
        "summary": "Retrieve all rental property units",
        "description": "Retrieves a list of rental property units.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Rental properties and units</span> - `View`",
        "operationId": "GetAllRentalUnits",
        "parameters": [
          {
            "name": "propertyids",
            "in": "query",
            "description": "Filters results to rental units that belong to the specified set of property ids.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RentalUnitMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Rental Units"],
        "summary": "Create a rental unit",
        "description": "Creates a rental unit.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Rental properties and units</span> - `View` `Edit`",
        "operationId": "CreateRentalUnit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RentalUnitsPostMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalUnitMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/units/{unitId}": {
      "get": {
        "tags": ["Rental Units"],
        "summary": "Retrieve a rental property unit",
        "description": "Retrieves a specific rental property unit.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Rental properties and units</span> - `View`",
        "operationId": "GetRentalUnitById",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "description": "The rental unit identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalUnitMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Rental Units"],
        "summary": "Update a rental unit",
        "description": "Updates a rental unit.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Rental properties and units</span> - `View` `Edit`",
        "operationId": "UpdateRentalUnit",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "description": "The identifier of the unit to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RentalUnitPutMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalUnitMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/units/{unitId}/notes": {
      "get": {
        "tags": ["Rental Units"],
        "summary": "Retrieve all rental unit notes",
        "description": "Retrieves all rental unit notes.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Rental properties and units</span> - `View`",
        "operationId": "GetRentalUnitNotes",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "updateddatetimefrom",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are greater than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "updateddatetimeto",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are less than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "lastupdatedbyuserid",
            "in": "query",
            "description": "Filters results to only notes that were last updated by the specified user identifier.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoteMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Rental Units"],
        "summary": "Create a rental unit note",
        "description": "Creates a rental unit note.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Rental properties and units</span> - `View` `Edit`",
        "operationId": "CreateRentalUnitNote",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/NotePostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/units/{unitId}/notes/{noteId}": {
      "get": {
        "tags": ["Rental Units"],
        "summary": "Retrieve a rental unit note",
        "description": "Retrieves a rental unit note.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Rental properties and units</span> - `View`",
        "operationId": "GetRentalUnitNoteByNoteId",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Rental Units"],
        "summary": "Update a rental unit note",
        "description": "Updates a rental unit note.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Rental properties and units</span> - `View` `Edit`",
        "operationId": "UpdateNoteForRentalUnit",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/NotePutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tasks": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Retrieve all tasks",
        "description": "Retrieves a list of tasks.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks &gt; Tasks</span> - `View`",
        "operationId": "GetAllTasks",
        "parameters": [
          {
            "name": "entitytype",
            "in": "query",
            "description": "Specifies the type of entity that the `EntityId` field refers to. This field is required if the `EntityId` field is populated.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["Rental", "RentalOwner", "Association"]
            }
          },
          {
            "name": "entityid",
            "in": "query",
            "description": "Filters results to any task associated with the specified entity id value. The value must be of the type specified in the `EntityType` field.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Filters results by the status of the task. If no status is specified, tasks with any status will be returned.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["New", "InProgress", "Completed", "Deferred", "Closed"]
              }
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filters results to any task associated with the task type specified.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ContactRequest",
                "ResidentRequest",
                "Todo",
                "RentalOwnerRequest"
              ]
            }
          },
          {
            "name": "unitid",
            "in": "query",
            "description": "Filters results to any task associated with the unit identifier.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "unitagreementid",
            "in": "query",
            "description": "Filters results to any task associated with the unit agreement identifier specified.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lastupdatedfrom",
            "in": "query",
            "description": "Filters results to any tasks were updated on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "lastupdatedto",
            "in": "query",
            "description": "Filters results to any tasks were updated on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "duedatefrom",
            "in": "query",
            "description": "Filters results to any tasks with a due date on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "duedateto",
            "in": "query",
            "description": "Filters results to any tasks with a due date on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "taskcategoryid",
            "in": "query",
            "description": "Filters results to any tasks with the specified category identifier.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "priorities",
            "in": "query",
            "description": "Filters results to any tasks whose priority matches the specified values. If no priority is specified, tasks with any priority will be returned.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["Low", "Normal", "High"]
              }
            }
          },
          {
            "name": "assignedtoid",
            "in": "query",
            "description": "Filters results to any tasks that have been assigned to the specified staff user identifier.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "tasktitle",
            "in": "query",
            "description": "Filters results to any task whose title *contains* the specified value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AllTasksMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tasks/{taskId}": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Retrieve a task",
        "description": "Retrieves a specific task.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks &gt; Tasks</span> - `View`",
        "operationId": "GetTaskById",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The task identifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllTasksMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tasks/categories": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Retrieve all task categories",
        "description": "Retrieves a list of task categories.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks &gt; Tasks</span> - `View`",
        "operationId": "GetAllTaskCategories",
        "parameters": [
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskCategoryMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Tasks"],
        "summary": "Create a task category",
        "description": "Create a task category.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks &gt; Tasks</span> - `Edit`",
        "operationId": "CreateTaskCategory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskCategorySaveMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCategoryMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tasks/categories/{taskCategoryId}": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Retrieve a task category",
        "description": "Retrieves a specific task category.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks &gt; Tasks</span> - `View`",
        "operationId": "GetTaskCategoryById",
        "parameters": [
          {
            "name": "taskCategoryId",
            "in": "path",
            "description": "The task category identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCategoryMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Tasks"],
        "summary": "Updates a task category",
        "description": "Updates a task category.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks &gt; Tasks</span> - `Edit`",
        "operationId": "UpdateTaskCategory",
        "parameters": [
          {
            "name": "taskCategoryId",
            "in": "path",
            "description": "The task category identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskCategoryPutMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCategoryMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tasks/contactrequests": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Retrieve all contact requests",
        "description": "Retrieves a list of contact requests.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks &gt; Tasks</span> - `View`",
        "operationId": "GetContactRequestTasks",
        "parameters": [
          {
            "name": "entitytype",
            "in": "query",
            "description": "Specifies the type of entity that the `EntityId` field refers to. This field is required if the `EntityId` field is populated.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["Rental", "RentalOwner", "Association"]
            }
          },
          {
            "name": "entityid",
            "in": "query",
            "description": "Filters results to any task associated with the specified entity id value. The value must be of the type specified in the `EntityType` field.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Filters results by the status of the task. If no status is specified, tasks with any status will be returned.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["New", "InProgress", "Completed", "Deferred", "Closed"]
              }
            }
          },
          {
            "name": "unitid",
            "in": "query",
            "description": "Filters results to any task associated with the unit identifier.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lastupdatedfrom",
            "in": "query",
            "description": "Filters results to any tasks were updated on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "lastupdatedto",
            "in": "query",
            "description": "Filters results to any tasks were updated on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "duedatefrom",
            "in": "query",
            "description": "Filters results to any tasks with a due date on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "duedateto",
            "in": "query",
            "description": "Filters results to any tasks with a due date on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "taskcategoryid",
            "in": "query",
            "description": "Filters results to any tasks with the specified category identifier.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "priorities",
            "in": "query",
            "description": "Filters results to any tasks whose priority matches the specified values. If no priority is specified, tasks with any priority will be returned.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["Low", "Normal", "High"]
              }
            }
          },
          {
            "name": "assignedtoid",
            "in": "query",
            "description": "Filters results to any tasks that have been assigned to the specified staff user identifier.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "tasktitle",
            "in": "query",
            "description": "Filters results to any task whose title *contains* the specified value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactRequestTaskMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Tasks"],
        "summary": "Create a contact request",
        "description": "Creates a contact request.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks &gt; Tasks</span> - `View` `Edit`",
        "operationId": "CreateContactRequestTask",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactRequestTaskPostMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactRequestTaskMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tasks/contactrequests/{contactRequestTaskId}": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Retrieve a contact request",
        "description": "Retrieves a contact request.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks &gt; Tasks</span> - `View`",
        "operationId": "GetContactRequestTaskById",
        "parameters": [
          {
            "name": "contactRequestTaskId",
            "in": "path",
            "description": "The contact request identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactRequestTaskMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Tasks"],
        "summary": "Update a contact request",
        "description": "Updates a contact request.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks &gt; Tasks</span> - `View` `Edit`",
        "operationId": "UpdateContactRequestTask",
        "parameters": [
          {
            "name": "contactRequestTaskId",
            "in": "path",
            "description": "The contact request identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactRequestTaskPutMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactRequestTaskMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tasks/rentalownerrequests": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Retrieve all rental owner requests",
        "description": "Retrieves all rental owner requests.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks &gt; Tasks</span> - `View`",
        "operationId": "GetAllRentalOwnerRequestTasks",
        "parameters": [
          {
            "name": "entitytype",
            "in": "query",
            "description": "Specifies the type of entity that the `EntityId` field refers to. This field is required if the `EntityId` field is populated.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["Rental", "RentalOwner", "Association"]
            }
          },
          {
            "name": "entityid",
            "in": "query",
            "description": "Filters results to any task associated with the specified entity id value. The value must be of the type specified in the `EntityType` field.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Filters results by the status of the task. If no status is specified, tasks with any status will be returned.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["New", "InProgress", "Completed", "Deferred", "Closed"]
              }
            }
          },
          {
            "name": "unitid",
            "in": "query",
            "description": "Filters results to any task associated with the unit identifier.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lastupdatedfrom",
            "in": "query",
            "description": "Filters results to any tasks were updated on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "lastupdatedto",
            "in": "query",
            "description": "Filters results to any tasks were updated on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "duedatefrom",
            "in": "query",
            "description": "Filters results to any tasks with a due date on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "duedateto",
            "in": "query",
            "description": "Filters results to any tasks with a due date on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "taskcategoryid",
            "in": "query",
            "description": "Filters results to any tasks with the specified category identifier.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "priorities",
            "in": "query",
            "description": "Filters results to any tasks whose priority matches the specified values. If no priority is specified, tasks with any priority will be returned.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["Low", "Normal", "High"]
              }
            }
          },
          {
            "name": "assignedtoid",
            "in": "query",
            "description": "Filters results to any tasks that have been assigned to the specified staff user identifier.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "tasktitle",
            "in": "query",
            "description": "Filters results to any task whose title *contains* the specified value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RentalOwnerRequestTaskMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Tasks"],
        "summary": "Create a rental owner request",
        "description": "Creates a rental owner request.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks &gt; Tasks</span> - `View` `Edit`",
        "operationId": "CreateRentalOwnerRequestTask",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RentalOwnerRequestTaskPostMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalOwnerRequestTaskMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tasks/rentalownerrequests/{rentalOwnerRequestTaskId}": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Retrieve a rental owner request",
        "description": "Retrieves a specific rental owner request.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks &gt; Tasks</span> - `View`",
        "operationId": "GetRentalOwnerRequestTaskById",
        "parameters": [
          {
            "name": "rentalOwnerRequestTaskId",
            "in": "path",
            "description": "The rental owner request identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalOwnerRequestTaskMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Tasks"],
        "summary": "Update a rental owner request",
        "description": "Updates a rental owner request.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks &gt; Tasks</span> - `View` `Edit`",
        "operationId": "UpdateRentalOwnerRequestTask",
        "parameters": [
          {
            "name": "rentalOwnerRequestTaskId",
            "in": "path",
            "description": "The rental owner request identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RentalOwnerRequestTaskPutMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalOwnerRequestTaskMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tasks/residentrequests": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Retrieve all resident requests",
        "description": "Retrieves a list of resident requests.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks &gt; Tasks</span> - `View`",
        "operationId": "GetResidentRequestTasks",
        "parameters": [
          {
            "name": "entitytype",
            "in": "query",
            "description": "Specifies the type of entity that the `EntityId` field refers to. This field is required if the `EntityId` field is populated.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["Rental", "RentalOwner", "Association"]
            }
          },
          {
            "name": "entityid",
            "in": "query",
            "description": "Filters results to any task associated with the specified entity id value. The value must be of the type specified in the `EntityType` field.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Filters results by the status of the task. If no status is specified, tasks with any status will be returned.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["New", "InProgress", "Completed", "Deferred", "Closed"]
              }
            }
          },
          {
            "name": "unitid",
            "in": "query",
            "description": "Filters results to any task associated with the unit identifier.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "unitagreementid",
            "in": "query",
            "description": "Filters results to any task associated with the unit agreement identifier specified.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lastupdatedfrom",
            "in": "query",
            "description": "Filters results to any tasks were updated on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "lastupdatedto",
            "in": "query",
            "description": "Filters results to any tasks were updated on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "duedatefrom",
            "in": "query",
            "description": "Filters results to any tasks with a due date on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "duedateto",
            "in": "query",
            "description": "Filters results to any tasks with a due date on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "taskcategoryid",
            "in": "query",
            "description": "Filters results to any tasks with the specified category identifier.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "priorities",
            "in": "query",
            "description": "Filters results to any tasks whose priority matches the specified values. If no priority is specified, tasks with any priority will be returned.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["Low", "Normal", "High"]
              }
            }
          },
          {
            "name": "assignedtoid",
            "in": "query",
            "description": "Filters results to any tasks that have been assigned to the specified staff user identifier.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "tasktitle",
            "in": "query",
            "description": "Filters results to any task whose title *contains* the specified value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResidentRequestTaskMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Tasks"],
        "summary": "Create a resident request",
        "description": "Creates a resident request.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks &gt; Tasks</span> - `Edit`",
        "operationId": "CreateResource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResidentRequestTaskPostMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResidentRequestTaskMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tasks/residentrequests/{residentRequestTaskId}": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Retrieve a resident request",
        "description": "Retrieves a specific resident request.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks &gt; Tasks</span> - `View`",
        "operationId": "GetResidentRequestTask",
        "parameters": [
          {
            "name": "residentRequestTaskId",
            "in": "path",
            "description": "The resident request identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResidentRequestTaskMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Tasks"],
        "summary": "Update a resident request",
        "description": "Update a resident request.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks &gt; Tasks</span> - `Edit`",
        "operationId": "UpdateResource",
        "parameters": [
          {
            "name": "residentRequestTaskId",
            "in": "path",
            "description": "The resident request identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResidentRequestTaskPutMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResidentRequestTaskMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tasks/todorequests": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Retrieve all to do tasks",
        "description": "Retrieves a list of to do tasks.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks &gt; Tasks</span> - `View`",
        "operationId": "GetToDoTasks",
        "parameters": [
          {
            "name": "entitytype",
            "in": "query",
            "description": "Specifies the type of entity that the `EntityId` field refers to. This field is required if the `EntityId` field is populated.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["Rental", "RentalOwner", "Association"]
            }
          },
          {
            "name": "entityid",
            "in": "query",
            "description": "Filters results to any task associated with the specified entity id value. The value must be of the type specified in the `EntityType` field.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Filters results by the status of the task. If no status is specified, tasks with any status will be returned.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["New", "InProgress", "Completed", "Deferred", "Closed"]
              }
            }
          },
          {
            "name": "unitid",
            "in": "query",
            "description": "Filters results to any task associated with the unit identifier.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lastupdatedfrom",
            "in": "query",
            "description": "Filters results to any tasks were updated on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "lastupdatedto",
            "in": "query",
            "description": "Filters results to any tasks were updated on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "duedatefrom",
            "in": "query",
            "description": "Filters results to any tasks with a due date on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "duedateto",
            "in": "query",
            "description": "Filters results to any tasks with a due date on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "taskcategoryid",
            "in": "query",
            "description": "Filters results to any tasks with the specified category identifier.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "priorities",
            "in": "query",
            "description": "Filters results to any tasks whose priority matches the specified values. If no priority is specified, tasks with any priority will be returned.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["Low", "Normal", "High"]
              }
            }
          },
          {
            "name": "assignedtoid",
            "in": "query",
            "description": "Filters results to any tasks that have been assigned to the specified staff user identifier.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "tasktitle",
            "in": "query",
            "description": "Filters results to any task whose title *contains* the specified value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ToDoTaskMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Tasks"],
        "summary": "Create a to do task",
        "description": "Creates a to do task.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks &gt; Tasks</span> - `Edit`",
        "operationId": "CreateToDoTask",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToDoTaskPostMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToDoTaskMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tasks/todorequests/{toDoTaskId}": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Retrieve a to do task",
        "description": "Retrieves a to do task.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks &gt; Tasks</span> - `View`",
        "operationId": "GetToDoTaskById",
        "parameters": [
          {
            "name": "toDoTaskId",
            "in": "path",
            "description": "The to do task identifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToDoTaskMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Tasks"],
        "summary": "Updates a to do task",
        "description": "Updates a to do task\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks &gt; Tasks</span> - `View` `Edit`",
        "operationId": "UpdateToDoTask",
        "parameters": [
          {
            "name": "toDoTaskId",
            "in": "path",
            "description": "The to do task identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToDoTaskPutMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToDoTaskMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/userroles": {
      "get": {
        "tags": ["Administration"],
        "summary": "Retrieve all user roles",
        "description": "Retrieves a list of user roles.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Administration &gt; User Roles</span> - `View`",
        "operationId": "GetAllUserRoles",
        "parameters": [
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRoleMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials do not have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/userroles/{userRoleId}": {
      "get": {
        "tags": ["Administration"],
        "summary": "Retrieve a user role",
        "description": "Retrieve a specific user role.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Administration &gt; User Roles</span> - `View`",
        "operationId": "GetUserRoleById",
        "parameters": [
          {
            "name": "userRoleId",
            "in": "path",
            "description": "The user role identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRoleMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials do not have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users": {
      "get": {
        "tags": ["Administration"],
        "summary": "Retrieve all users",
        "description": "Retrieves a list of users.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Administration &gt; Users</span> - `View`",
        "operationId": "GetAllUsers",
        "parameters": [
          {
            "name": "roleids",
            "in": "query",
            "description": "Describes the role of the user.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "usertypes",
            "in": "query",
            "description": "Describes the user type of the user.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["Staff", "RentalOwner", "Vendor"]
              }
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filters results by the status of the user. If no status is specified both `active` and `inactive` staff members will be returned.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["Inactive", "Active"]
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filters results to only records whose name *contains* the specified value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Filters results to only records whose email *contains* the specified value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials do not have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{userId}": {
      "get": {
        "tags": ["Administration"],
        "summary": "Retrieve a user",
        "description": "Retrieve a specific user.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Administration &gt; Users</span> - `View`",
        "operationId": "GetUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials do not have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/vendors": {
      "get": {
        "tags": ["Vendors"],
        "summary": "Retrieve all vendors",
        "description": "Retrieves a list of vendors.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance &gt; Vendors</span> - `View`",
        "operationId": "GetAllVendors",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Filters results by the status of the vendor. If no status is specified both `active` and `inactive` vendors will be returned.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["Inactive", "Active"]
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Filters results to any vendor whose email *contains* the specified value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "website",
            "in": "query",
            "description": "Filters results to any vendor whose website *contains* the specified value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filters results to any vendor whose name *contains* the specified value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "insuranceexpiration",
            "in": "query",
            "description": "Filters results to any vendor whose insurance will expire in the specified date range.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "None",
                "Any",
                "Expired",
                "ThirtyDaysOrLess",
                "SixtyDaysOrLess",
                "NinetyDaysOrLess"
              ]
            }
          },
          {
            "name": "phone",
            "in": "query",
            "description": "Filters results to any vendor who has a phone number that *contains* the specified value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VendorMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Vendors"],
        "summary": "Create a vendor",
        "description": "Creates a vendor.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance &gt; Vendors</span> - `Edit`",
        "operationId": "CreateVendor",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VendorPostMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/vendors/{vendorId}": {
      "get": {
        "tags": ["Vendors"],
        "summary": "Retrieve a vendor",
        "description": "Retrieve a specific vendor.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance &gt; Vendors</span> - `View`",
        "operationId": "GetVendorById",
        "parameters": [
          {
            "name": "vendorId",
            "in": "path",
            "description": "The vendor identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Vendors"],
        "summary": "Update a vendor",
        "description": "Updates a vendor.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance &gt; Vendors</span> - `Edit`",
        "operationId": "UpdateVendor",
        "parameters": [
          {
            "name": "vendorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VendorPutMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/vendors/{vendorId}/notes": {
      "get": {
        "tags": ["Vendors"],
        "summary": "Retrieve all vendor notes",
        "description": "Retrieves all vendor notes.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance &gt; Vendors</span> - `View`",
        "operationId": "GetVendorNotes",
        "parameters": [
          {
            "name": "vendorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "updateddatetimefrom",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are greater than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "updateddatetimeto",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are less than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "lastupdatedbyuserid",
            "in": "query",
            "description": "Filters results to only notes that were last updated by the specified user identifier.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoteMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Vendors"],
        "summary": "Create a vendor note",
        "description": "Creates a vendor note.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance &gt; Vendors</span> - `View` `Edit`",
        "operationId": "CreateVendorNote",
        "parameters": [
          {
            "name": "vendorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/NotePostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/vendors/{vendorId}/notes/{noteId}": {
      "get": {
        "tags": ["Vendors"],
        "summary": "Retrieve a vendor note",
        "description": "Retrieves a vendor note.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance &gt; Vendors</span> - `View`",
        "operationId": "GetVendorNoteByNoteId",
        "parameters": [
          {
            "name": "vendorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Vendors"],
        "summary": "Update a vendor note",
        "description": "Updates a vendor note.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance &gt; Vendors</span> - `View` `Edit`",
        "operationId": "UpdateVendorNote",
        "parameters": [
          {
            "name": "vendorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/NotePutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/vendors/categories": {
      "get": {
        "tags": ["Vendors"],
        "summary": "Retrieve all vendor categories",
        "description": "Retrieves a list of vendor categories.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance &gt; Vendors</span> - `View`",
        "operationId": "GetAllVendorCategories",
        "parameters": [
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VendorCategoryMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Vendors"],
        "summary": "Create a vendor category",
        "description": "Creates a vendor category.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance &gt; Vendors</span> - `Edit`",
        "operationId": "CreateVendorCategory",
        "requestBody": {
          "$ref": "#/components/requestBodies/VendorCategorySaveMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorCategoryMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/vendors/categories/{vendorCategoryId}": {
      "get": {
        "tags": ["Vendors"],
        "summary": "Retrieve a vendor category",
        "description": "Retrieves a specific vendor category.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance &gt; Vendors</span> - `View`",
        "operationId": "GetVendorCategoryById",
        "parameters": [
          {
            "name": "vendorCategoryId",
            "in": "path",
            "description": "The vendor category identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorCategoryMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Vendors"],
        "summary": "Update a vendor category",
        "description": "Updates a vendor category.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance &gt; Vendors</span> - `Edit`",
        "operationId": "UpdateVendorCategory",
        "parameters": [
          {
            "name": "vendorCategoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/VendorCategorySaveMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorCategoryMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/workorders": {
      "get": {
        "tags": ["Work Orders"],
        "summary": "Retrieve all work orders",
        "description": "Retrieves a list of work orders.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance &gt; Work Orders</span> - `Read`",
        "operationId": "GetAllWorkOrders",
        "parameters": [
          {
            "name": "entitytype",
            "in": "query",
            "description": "Specifies the type of entity that the `EntityId` field refers to. This field is required if the `EntityId` field is populated.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["Rental", "RentalOwner", "Association"]
            }
          },
          {
            "name": "entityid",
            "in": "query",
            "description": "Filters results to any work order associated with the specified entity id value. The value must be of the type specified in the `EntityType` field.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Filters results by the status of the task associated with the work order. If no status is specified, work orders with any status will be returned.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["New", "InProgress", "Completed", "Deferred", "Closed"]
              }
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filters results to any work order with an associated task with the task type specified.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ContactRequest",
                "ResidentRequest",
                "Todo",
                "RentalOwnerRequest"
              ]
            }
          },
          {
            "name": "unitid",
            "in": "query",
            "description": "Filters results to any work order associated with the unit identifier.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "unitagreementid",
            "in": "query",
            "description": "Filters results to any work order associated with the unit agreement identifier specified.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lastupdatedfrom",
            "in": "query",
            "description": "Filters results to any work orders were updated on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "lastupdatedto",
            "in": "query",
            "description": "Filters results to any work orders were updated on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "duedatefrom",
            "in": "query",
            "description": "Filters results to any work orders with a due date on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "duedateto",
            "in": "query",
            "description": "Filters results to any work orders with a due date on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "taskcategoryid",
            "in": "query",
            "description": "Filters results to any work orders whose priority matches the specified values. If no priority is specified, tasks with any priority will be returned.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "priorities",
            "in": "query",
            "description": "Filters results to any work orders that have been assigned to the specified staff user identifier.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["Low", "Normal", "High"]
              }
            }
          },
          {
            "name": "assignedtoid",
            "in": "query",
            "description": "Filters results to any work orders that have been assigned to the specified staff user identifier.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "vendorids",
            "in": "query",
            "description": "Filters results to any work orders that have been assigned to the specified vendor identifier.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "amountfrom",
            "in": "query",
            "description": "Filters results to any work orders whose total amounts are equal or greater than the specified amount.",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "amountto",
            "in": "query",
            "description": "Filters results to any work orders whose total amounts are equal or less than the specified amount.",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "isbilled",
            "in": "query",
            "description": "Filters results to work orders that have an associated bill.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "title",
            "in": "query",
            "description": "Filters results to any work orders whose title *contains* the specified value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "taskids",
            "in": "query",
            "description": "Filters results to work orders that have an associated to a task in the specified list.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkOrderMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Work Orders"],
        "summary": "Create a work order",
        "description": "Creates a work order.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance &gt; Work Orders</span> - `Edit`",
        "operationId": "CreateWorkOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkOrderPostMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkOrderMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/workorders/{workOrderId}": {
      "get": {
        "tags": ["Work Orders"],
        "summary": "Retrieve a work order",
        "description": "Retrieves a specific work order.\r\n<br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance &gt; Work Orders</span> - `Read`",
        "operationId": "GetWorkOrderById",
        "parameters": [
          {
            "name": "workOrderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkOrderMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Work Orders"],
        "summary": "Update a work order",
        "description": "Updates a work order.\r\n            <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance &gt; Work Orders</span> - `Edit`",
        "operationId": "UpdateWorkOrder",
        "parameters": [
          {
            "name": "workOrderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkOrderPutMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkOrderMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Accounting",
      "description": "GetAllGLAccounts\">general ledger accounts</a>."
    },
    {
      "name": "Bank Accounts",
      "description": "GetAllBankAccounts\">bank accounts</a>."
    },
    {
      "name": "Associations",
      "description": "GetAssociationNotes\">association notes</a>."
    },
    {
      "name": "Association Units",
      "description": "GetAssociationUnitNotes\">unit notes</a>."
    },
    {
      "name": "Association Owners",
      "description": "GetAssociationOwnerNotes\">owner notes</a>."
    },
    {
      "name": "Association Ownership Accounts",
      "description": "GetAssociationOwnershipAccountNotes\">ownership account notes</a>."
    },
    {
      "name": "Association Tenants",
      "description": "GetAssociationTenantNotes\">tenant notes</a>."
    },
    {
      "name": "Rental Properties",
      "description": "GetRentalNotes\">property notes</a>."
    },
    {
      "name": "Rental Units",
      "description": "GetRentalUnitNotes\">unit notes</a>."
    },
    {
      "name": "Rental Owners",
      "description": "GetRentalOwnerNotes\">owner notes</a>."
    },
    {
      "name": "Rental Tenants",
      "description": "GetAllTenantNotes\">tenant notes</a>."
    },
    {
      "name": "Leases",
      "description": "GetLeaseLedgers\">lease transactions</a>."
    },
    {
      "name": "Listings",
      "description": "GetAllListingContacts\">listing contacts</a>."
    },
    {
      "name": "Applicants",
      "description": "GetApplicantGroupNotes\">applicant group notes</a>."
    },
    {
      "name": "Tasks",
      "description": ""
    },
    {
      "name": "Work Orders",
      "description": ""
    },
    {
      "name": "Vendors",
      "description": "GetVendorNotes\">vendor notes</a>."
    },
    {
      "name": "Communications",
      "description": "GetPhoneLogs\">phone logs</a>."
    },
    {
      "name": "Administration",
      "description": "GetAllUserRoles\">user roles</a>."
    }
  ],
  "servers": [
    {
      "url": "https://api.buildium.com/"
    }
  ],
  "components": {
    "securitySchemes": {
      "clientId": {
        "type": "apiKey",
        "in": "header",
        "name": "x-buildium-client-id"
      },
      "clientSecret": {
        "type": "apiKey",
        "in": "header",
        "name": "x-buildium-client-secret"
      }
    },
    "requestBodies": {
      "VendorCategorySaveMessage": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/VendorCategorySaveMessage"
            }
          }
        },
        "required": true
      },
      "BankAccountWithdrawalSaveMessage": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BankAccountWithdrawalSaveMessage"
            }
          }
        },
        "required": true
      },
      "ListingContactSaveMessage": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ListingContactSaveMessage"
            }
          }
        },
        "required": true
      },
      "NotePostMessage": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NotePostMessage"
            }
          }
        },
        "required": true
      },
      "NotePutMessage": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NotePutMessage"
            }
          }
        },
        "required": true
      },
      "BankAccountQuickDepositSaveMessage": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BankAccountQuickDepositSaveMessage"
            }
          }
        },
        "required": true
      },
      "BankAccountTransferSaveMessage": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BankAccountTransferSaveMessage"
            }
          }
        },
        "required": true
      }
    },
    "schemas": {
      "AccountInfoMessage": {
        "description": "This is an object that represents account info.",
        "type": "object",
        "properties": {
          "CompanyName": {
            "description": "Account company name.",
            "type": "string"
          },
          "Contact": {
            "$ref": "#/components/schemas/ContactInfoMessage"
          },
          "AccountingSettings": {
            "$ref": "#/components/schemas/AccountingSettingsMessage"
          }
        }
      },
      "AccountingEntityMessage": {
        "description": "An object that represents an accounting entity.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The accounting entity unique identifier.",
            "type": "integer"
          },
          "AccountingEntityType": {
            "description": "The type of accounting entity.",
            "enum": ["Association", "Rental", "Company"],
            "type": "string"
          },
          "Href": {
            "description": "A link to the accounting entity resource.",
            "type": "string"
          }
        }
      },
      "AccountingEntitySaveMessage": {
        "description": "Object to represent an Accounting Entity",
        "required": ["Id", "AccountingEntityType"],
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The unique identifier of the accounting entity",
            "type": "integer"
          },
          "AccountingEntityType": {
            "description": "The type of the accounting entity",
            "enum": ["Association", "Rental", "Company"],
            "type": "string"
          }
        }
      },
      "AccountingSettingsMessage": {
        "type": "object",
        "properties": {
          "AccountingBookId": {
            "format": "int32",
            "description": "The accounting book entity unique identifier.",
            "type": "integer"
          },
          "DefaultBankAccountId": {
            "format": "int32",
            "description": "The default bank account unique identifier.",
            "type": "integer"
          },
          "DefaultAccountingBasis": {
            "description": "The default accounting basis.",
            "enum": ["Accrual", "Cash"],
            "type": "string"
          },
          "TrustAccountWarning": {
            "description": "Indicates the type of trust account warnings are enable within the account, if any.",
            "enum": ["Off", "ByProperty", "ByRentalOwner"],
            "type": "string"
          },
          "FiscalYearEndMonth": {
            "format": "int32",
            "description": "The month the fiscal year ends.",
            "type": "integer"
          },
          "FiscalYearEndDay": {
            "format": "int32",
            "description": "The day the fiscal year ends.",
            "type": "integer"
          }
        }
      },
      "AddressMessage": {
        "description": "This object represents an address.",
        "type": "object",
        "properties": {
          "AddressLine1": {
            "description": "Address line 1 (e.g., street, PO Box, or company name).",
            "type": "string"
          },
          "AddressLine2": {
            "description": "Address line 2 (e.g., apartment, suite, unit, or building).",
            "type": "string"
          },
          "AddressLine3": {
            "description": "Address line 3",
            "type": "string"
          },
          "City": {
            "description": "City, district, suburb, town, or village.",
            "type": "string"
          },
          "State": {
            "description": "State, county, province, or region.",
            "type": "string"
          },
          "PostalCode": {
            "description": "ZIP or postal code.",
            "type": "string"
          },
          "Country": {
            "description": "Country.",
            "enum": [
              "UnitedStates",
              "Afghanistan",
              "Akrotiri",
              "Albania",
              "Algeria",
              "AmericanSamoa",
              "Andorra",
              "Angola",
              "Anguilla",
              "Antarctica",
              "AntiguaandBarbuda",
              "Argentina",
              "Armenia",
              "Aruba",
              "AshmoreandCartierIslands",
              "Australia",
              "Austria",
              "Azerbaijan",
              "Bahamas",
              "Bahrain",
              "Bangladesh",
              "Barbados",
              "BassasdaIndia",
              "Belarus",
              "Belgium",
              "Belize",
              "Benin",
              "Bermuda",
              "Bhutan",
              "Bolivia",
              "BosniaandHerzegovina",
              "Botswana",
              "BouvetIsland",
              "Brazil",
              "BritishIndianOceanTerritory",
              "BritishVirginIslands",
              "Brunei",
              "Bulgaria",
              "BurkinaFaso",
              "Burma",
              "Burundi",
              "Cambodia",
              "Cameroon",
              "Canada",
              "CapeVerde",
              "CaymanIslands",
              "CentralAfricanRepublic",
              "Chad",
              "Chile",
              "China",
              "ChristmasIsland",
              "ClippertonIsland",
              "CocosIslands",
              "Colombia",
              "Comoros",
              "DemocraticRepublicOfTheCongo",
              "RepublicOfTheCongo",
              "CookIslands",
              "CoralSeaIslands",
              "CostaRica",
              "CotedIvoire",
              "Croatia",
              "Cuba",
              "Cyprus",
              "CzechRepublic",
              "Denmark",
              "Dhekelia",
              "Djibouti",
              "Dominica",
              "DominicanRepublic",
              "Ecuador",
              "Egypt",
              "ElSalvador",
              "EquatorialGuinea",
              "Eritrea",
              "Estonia",
              "Ethiopia",
              "EuropaIsland",
              "FalklandIslands",
              "FaroeIslands",
              "Fiji",
              "Finland",
              "France",
              "FrenchGuiana",
              "FrenchPolynesia",
              "FrenchSouthernandAntarcticLands",
              "Gabon",
              "Gambia",
              "GazaStrip",
              "Georgia",
              "Germany",
              "Ghana",
              "Gibraltar",
              "GloriosoIslands",
              "Greece",
              "Greenland",
              "Grenada",
              "Guadeloupe",
              "Guam",
              "Guatemala",
              "Guernsey",
              "Guinea",
              "GuineaBissau",
              "Guyana",
              "Haiti",
              "HeardIslandandMcDonaldIslands",
              "VaticanCity",
              "Honduras",
              "HongKong",
              "Hungary",
              "Iceland",
              "India",
              "Indonesia",
              "Iran",
              "Iraq",
              "Ireland",
              "IsleofMan",
              "Israel",
              "Italy",
              "Jamaica",
              "JanMayen",
              "Japan",
              "Jersey",
              "Jordan",
              "JuandeNovaIsland",
              "Kazakhstan",
              "Kenya",
              "Kiribati",
              "NorthKorea",
              "SouthKorea",
              "Kuwait",
              "Kyrgyzstan",
              "Laos",
              "Latvia",
              "Lebanon",
              "Lesotho",
              "Liberia",
              "Libya",
              "Liechtenstein",
              "Lithuania",
              "Luxembourg",
              "Macau",
              "Macedonia",
              "Madagascar",
              "Malawi",
              "Malaysia",
              "Maldives",
              "Mali",
              "Malta",
              "MarshallIslands",
              "Martinique",
              "Mauritania",
              "Mauritius",
              "Mayotte",
              "Mexico",
              "Micronesia",
              "Moldova",
              "Monaco",
              "Mongolia",
              "Montserrat",
              "Morocco",
              "Mozambique",
              "Namibia",
              "Nauru",
              "NavassaIsland",
              "Nepal",
              "Netherlands",
              "NetherlandsAntilles",
              "NewCaledonia",
              "NewZealand",
              "Nicaragua",
              "Niger",
              "Nigeria",
              "Niue",
              "NorfolkIsland",
              "NorthernMarianaIslands",
              "Norway",
              "Oman",
              "Pakistan",
              "Palau",
              "Panama",
              "PapuaNewGuinea",
              "ParacelIslands",
              "Paraguay",
              "Peru",
              "Philippines",
              "PitcairnIslands",
              "Poland",
              "Portugal",
              "PuertoRico",
              "Qatar",
              "Reunion",
              "Romania",
              "Russia",
              "Rwanda",
              "SaintHelena",
              "SaintKittsandNevis",
              "SaintLucia",
              "SaintPierreandMiquelon",
              "SaintVincentandtheGrenadines",
              "Samoa",
              "SanMarino",
              "SaoTomeandPrincipe",
              "SaudiArabia",
              "Senegal",
              "SerbiaandMontenegro",
              "Seychelles",
              "SierraLeone",
              "Singapore",
              "Slovakia",
              "Slovenia",
              "SolomonIslands",
              "Somalia",
              "SouthAfrica",
              "SouthGeorgiaandtheSouthSandwichIslands",
              "Spain",
              "SpratlyIslands",
              "SriLanka",
              "Sudan",
              "Suriname",
              "Svalbard",
              "Swaziland",
              "Sweden",
              "Switzerland",
              "Syria",
              "Taiwan",
              "Tajikistan",
              "Tanzania",
              "Thailand",
              "TimorLeste",
              "Togo",
              "Tokelau",
              "Tonga",
              "TrinidadandTobago",
              "TromelinIsland",
              "Tunisia",
              "Turkey",
              "Turkmenistan",
              "TurksandCaicosIslands",
              "Tuvalu",
              "Uganda",
              "Ukraine",
              "UnitedArabEmirates",
              "UnitedKingdom",
              "Uruguay",
              "Uzbekistan",
              "Vanuatu",
              "Venezuela",
              "Vietnam",
              "VirginIslands",
              "WakeIsland",
              "WallisandFutuna",
              "WestBank",
              "WesternSahara",
              "Yemen",
              "Zambia",
              "Zimbabwe"
            ],
            "type": "string"
          }
        }
      },
      "AllTasksMessage": {
        "description": "This object represents a task.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Task unique identifier.",
            "type": "integer"
          },
          "TaskType": {
            "description": "The task type.",
            "enum": [
              "ContactRequest",
              "ResidentRequest",
              "Todo",
              "RentalOwnerRequest"
            ],
            "type": "string"
          },
          "Category": {
            "$ref": "#/components/schemas/TaskCategoryResponseMessage"
          },
          "Title": {
            "description": "Task title.",
            "type": "string"
          },
          "Description": {
            "description": "Task description.",
            "type": "string"
          },
          "Property": {
            "$ref": "#/components/schemas/PropertyMessage"
          },
          "UnitId": {
            "format": "int32",
            "description": "The unit unique identifier associated with the task.",
            "type": "integer"
          },
          "UnitAgreement": {
            "$ref": "#/components/schemas/UnitAgreementMessage"
          },
          "RequestedByUserEntity": {
            "$ref": "#/components/schemas/RequestedByUserEntityMessage"
          },
          "AssignedToUserId": {
            "format": "int32",
            "description": "The unique identifier of the staff user assigned to the task.",
            "type": "integer"
          },
          "TaskStatus": {
            "description": "Task status.",
            "enum": ["New", "InProgress", "Completed", "Deferred", "Closed"],
            "type": "string"
          },
          "Priority": {
            "description": "Task priority.",
            "enum": ["Low", "Normal", "High"],
            "type": "string"
          },
          "DueDate": {
            "format": "date",
            "description": "Task due date.",
            "type": "string"
          },
          "CreatedDateTime": {
            "format": "date-time",
            "description": "The date and time the task was created.",
            "type": "string"
          },
          "LastUpdatedDateTime": {
            "format": "date-time",
            "description": "The date and time the task was last updated.",
            "type": "string"
          }
        }
      },
      "ApiError": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string"
          },
          "Value": {
            "type": "string"
          }
        }
      },
      "ApiErrorResponse": {
        "type": "object",
        "properties": {
          "UserMessage": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "string"
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "ApplianceMessage": {
        "description": "Appliance information.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Unique identifier of the appliance.",
            "type": "integer"
          },
          "Name": {
            "description": "Name of the appliance.",
            "type": "string"
          },
          "Make": {
            "description": "Make of the appliance.",
            "type": "string"
          },
          "Model": {
            "description": "Model of the appliance.",
            "type": "string"
          },
          "Description": {
            "description": "Description of the appliance.",
            "type": "string"
          }
        }
      },
      "ApplicantApplicationMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Rental application unique identifier.",
            "type": "integer"
          },
          "ApplicationNumber": {
            "description": "An alpha numeric value that can be used to uniquely identify the application. This is typically provided to an applicant to use as a reference when making inquiries about their application.",
            "type": "string"
          },
          "ApplicationStatus": {
            "description": "Indicates the current application status.",
            "enum": [
              "Undecided",
              "Approved",
              "Rejected",
              "AddedToLease",
              "Cancelled",
              "Deferred",
              "New"
            ],
            "type": "string"
          },
          "ApplicationSubmittedDateTime": {
            "format": "date-time",
            "description": "Date and time the application was submitted.",
            "type": "string"
          }
        }
      },
      "ApplicantGroupMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Applicant group unique identifier.",
            "type": "integer"
          },
          "PropertyId": {
            "format": "int32",
            "description": "Rental property unique identifier that the applicant group is associated with.",
            "type": "integer"
          },
          "UnitId": {
            "format": "int32",
            "description": "Rental property unit unique identifier that the applicant group is associated with.",
            "type": "integer"
          },
          "ApplicationGroupStatus": {
            "description": "Indicates the current applicant group status. Note, this status is independent from individual application statuses within the group.",
            "enum": [
              "Undecided",
              "Approved",
              "Rejected",
              "AddedToLease",
              "Cancelled",
              "Deferred",
              "New"
            ],
            "type": "string"
          },
          "Applicants": {
            "description": "A collection of applicants in the group.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicantMessage"
            }
          }
        }
      },
      "ApplicantGroupPostMessage": {
        "required": ["ApplicantIds"],
        "type": "object",
        "properties": {
          "UnitId": {
            "format": "int32",
            "description": "Rental property unit unique identifier to associate with the applicant group.",
            "type": "integer"
          },
          "ApplicantIds": {
            "description": "The applicant unique identifiers to include in the applicant group. Note, that applicants can only be included in one applicant group.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      },
      "ApplicantGroupPutMessage": {
        "required": ["ApplicantGroupStatus", "ApplicantIds"],
        "type": "object",
        "properties": {
          "UnitId": {
            "format": "int32",
            "description": "Rental property unit unique identifier to associate with the applicant group.",
            "type": "integer"
          },
          "ApplicantGroupStatus": {
            "description": "Sets the status of the applicant group.",
            "enum": [
              "Undecided",
              "Approved",
              "Rejected",
              "Cancelled",
              "Deferred"
            ],
            "type": "string"
          },
          "ApplicantIds": {
            "description": "The applicant unique identifiers to include in the applicant group. Note, that applicants can only be included in one applicant group.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      },
      "ApplicantGroupSearchMessage": {
        "type": "object",
        "properties": {
          "EntityType": {
            "description": "Filters results to any applicant groups associated with the specified entity identifier. This filter is used in conjunction with the `EntityType` field which must be set to the type of entity this identifier references.",
            "enum": ["Rental", "RentalOwner"],
            "type": "string"
          },
          "EntityId": {
            "format": "int32",
            "description": "Specifies the type of entity that `EntityId` refers to. This field is required if `EntityId` is specified.",
            "type": "integer"
          },
          "ApplicationGroupStatuses": {
            "description": "Filters results by the applicant group status. If no status is specified, applicant groups in any status will be returned.",
            "type": "array",
            "items": {
              "enum": [
                "Undecided",
                "Approved",
                "Rejected",
                "AddedToLease",
                "Cancelled",
                "Deferred",
                "New"
              ],
              "type": "string"
            }
          },
          "UnitIds": {
            "description": "Filters results to applicant groups associated to any of the specified rental property unit identifiers.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "Name": {
            "description": "Filters results to applicant groups that includes applicants whose name *contains* the specified value.",
            "type": "string"
          }
        }
      },
      "ApplicantMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Applicant unique identifier.",
            "type": "integer"
          },
          "ApplicantGroupId": {
            "format": "int32",
            "description": "Applicant group unique identifier.",
            "type": "integer"
          },
          "PropertyId": {
            "format": "int32",
            "description": "Rental property unique identifier that the applicant is associated with.",
            "type": "integer"
          },
          "UnitId": {
            "format": "int32",
            "description": "Rental property unit unique identifier that the applicant is associated with.",
            "type": "integer"
          },
          "FirstName": {
            "description": "Applicant first name.",
            "type": "string"
          },
          "LastName": {
            "description": "Applicant last name.",
            "type": "string"
          },
          "Email": {
            "description": "Applicant email address.",
            "type": "string"
          },
          "PhoneNumbers": {
            "description": "Applicant phone numbers.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberMessage"
            }
          },
          "Applications": {
            "description": "A collection of applications associated with the applicant.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicantApplicationMessage"
            }
          }
        }
      },
      "ApplicantPostMessage": {
        "description": "This object represents an applicant.",
        "required": ["FirstName", "LastName", "SendRentalApplicationEmail"],
        "type": "object",
        "properties": {
          "UnitId": {
            "format": "int32",
            "description": "The rental property unit unique identifier to associate with the applicant.",
            "type": "integer"
          },
          "FirstName": {
            "description": "The first name of the applicant. The value can not exceed 127 characters.",
            "type": "string"
          },
          "LastName": {
            "description": "The last name of the applicant. The value can not exceed 127 characters.",
            "type": "string"
          },
          "Email": {
            "description": "The email address of the applicant.",
            "type": "string"
          },
          "PhoneNumbers": {
            "$ref": "#/components/schemas/PhoneNumbersMessage"
          },
          "SendRentalApplicationEmail": {
            "description": "Indicates whether to send the applicant an email with a link to the online rental application form.",
            "type": "boolean"
          }
        }
      },
      "ApplicantPutMessage": {
        "required": ["FirstName", "LastName"],
        "type": "object",
        "properties": {
          "UnitId": {
            "format": "int32",
            "description": "The rental property unit unique identifier to associate with the applicant.",
            "type": "integer"
          },
          "FirstName": {
            "description": "The first name of the applicant. The value can not exceed 127 characters.",
            "type": "string"
          },
          "LastName": {
            "description": "The last name of the applicant. The value can not exceed 127 characters.",
            "type": "string"
          },
          "Email": {
            "description": "The email address of the applicant.",
            "type": "string"
          },
          "PhoneNumbers": {
            "$ref": "#/components/schemas/PhoneNumbersMessage"
          }
        }
      },
      "ApplicantSearchMessage": {
        "type": "object",
        "properties": {
          "EntityId": {
            "format": "int32",
            "description": "Filters results to any applicant associated with the specified entity identifier. This filter is used in conjunction with the `EntityType` field which must be set to the type of entity this identifier references.",
            "type": "integer"
          },
          "EntityType": {
            "description": "Specifies the type of entity that `EntityId` refers to. This field is required if `EntityId` is specified.",
            "enum": ["Rental", "RentalOwner"],
            "type": "string"
          },
          "ApplicationStatuses": {
            "description": "Filters results by the applicant application status. If no status is specified, applicants with an application in any status will be returned.",
            "type": "array",
            "items": {
              "enum": [
                "Undecided",
                "Approved",
                "Rejected",
                "AddedToLease",
                "Cancelled",
                "Deferred",
                "New"
              ],
              "type": "string"
            }
          },
          "UnitIds": {
            "description": "Filters results to applicants associated to any of the specified rental property unit identifiers.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "Name": {
            "description": "Filters results to applicants whose name *contains* the specified value.",
            "type": "string"
          },
          "ApplicationSubmittedStartDate": {
            "format": "date-time",
            "description": "Filters results to any applicant who submitted an application on or after the date specified.",
            "type": "string"
          },
          "ApplicationSubmittedEndDate": {
            "format": "date-time",
            "description": "Filters results to any applicant who submitted an application on or prior to the date specified.",
            "type": "string"
          }
        }
      },
      "ApplicationMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Rental application unique identifier.",
            "type": "integer"
          },
          "ApplicationNumber": {
            "description": "An alpha numeric value that can be used to uniquely identify the application. This is typically provided to an applicant to use as a reference when making inquiries about their application.",
            "type": "string"
          },
          "ApplicationStatus": {
            "description": "Indicates the current application status.",
            "enum": [
              "Undecided",
              "Approved",
              "Rejected",
              "AddedToLease",
              "Cancelled",
              "Deferred",
              "New"
            ],
            "type": "string"
          },
          "ApplicationSubmittedDateTime": {
            "format": "date-time",
            "description": "Date and time the application was submitted.",
            "type": "string"
          },
          "Application": {
            "description": "A submitted rental application.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationResponseMessage"
            }
          }
        }
      },
      "ApplicationPutMessage": {
        "required": ["ApplicationStatus"],
        "type": "object",
        "properties": {
          "ApplicationStatus": {
            "description": "Sets the status of the application.",
            "enum": [
              "Undecided",
              "Approved",
              "Rejected",
              "Cancelled",
              "Deferred"
            ],
            "type": "string"
          }
        }
      },
      "ApplicationResponseFieldMessage": {
        "type": "object",
        "properties": {
          "FieldCategoryType": {
            "description": "Indicates the field category type the field is assigned. The `FieldCategoryType` can be used to identify specific data points within the application. For example, to identify the fields that contain the applicants full name you would filter the fields within the application where the `FieldCategoryType` is equal to `ApplicantName`.",
            "enum": [
              "ApplicantName",
              "ApplicantEmail",
              "ApplicantSocialSecurityNumber",
              "ApplicantAlternateEmail",
              "ApplicantHomePhone",
              "ApplicantCellPhone",
              "ApplicantWorkPhone",
              "ApplicantFax",
              "ApplicantBirthDate",
              "ApplicantDriversLicense",
              "ApplicantCurrentAddress",
              "ApplicantAlternateAddress",
              "EmergencyContactName",
              "EmergencyContactRelationship",
              "EmergencyContactEmail",
              "EmergencyContactPhone",
              "OccupantName",
              "OccupantRelationship",
              "OccupantBirthDate",
              "OccupantEmail",
              "OccupantPhoneNumber",
              "CosignerName",
              "CosignerRelationship",
              "CosignerSocialSecurityNumber",
              "CosignerPhoneNumber",
              "CosignerEmail",
              "EmployerName",
              "EmployerAddress",
              "EmployerPhoneNumber",
              "EmployerEmail",
              "PositionHeld",
              "EmploymentDates",
              "MonthlyGrossSalary",
              "SupervisorName",
              "SupervisorTitle",
              "PetType",
              "PetName",
              "PetAge",
              "PetSpayedOrNeutered",
              "PetLicenseNumber",
              "PetWeight",
              "DesiredMoveInDate",
              "DesiredLeaseDuration",
              "DesiredRent",
              "DesiredNumberOfBedrooms",
              "DesiredNumberOfBathrooms",
              "ReferenceName",
              "ReferenceRelationship",
              "ReferencePhoneNumber",
              "ReferenceEmail",
              "RentalAddress",
              "RentalDates",
              "MonthlyRent",
              "ReasonForLeaving",
              "LandlordName",
              "LandlordPhoneNumber",
              "LandlordEmail",
              "VehicleMake",
              "VehicleModel",
              "VehicleColor",
              "VehicleYear",
              "VehicleLicensePlate",
              "AgreedTo",
              "AgreedBy",
              "CosignerAddress",
              "ApplicantAddress",
              "OtherComments",
              "EmailApplication"
            ],
            "type": "string"
          },
          "FieldType": {
            "description": "Indicates the fields expected input value format and/or data type. For example, a field can be assigned a `FieldType` of `DateDayMonthYear` which indicates the input value must be a date containing a day, month and year.",
            "enum": [
              "TextSingleLine",
              "Email",
              "DateDayMonthYear",
              "Number",
              "DateMonthYear",
              "DateYear",
              "GroupHeading",
              "NumberOfBathrooms",
              "NumberOfBedrooms",
              "PhoneNumber",
              "SocialSecurityNumber",
              "TextMultipleLines",
              "TrueFalse",
              "YesNo",
              "Currency",
              "FirstName",
              "LastName",
              "DateRangeFromDate",
              "DateRangeToDate",
              "AddressCountry",
              "AddressStreet",
              "AddressCity",
              "AddressState",
              "AddressZip",
              "DriversLicenseNumber",
              "DriversLicenseState",
              "Attachment"
            ],
            "type": "string"
          },
          "FieldLabel": {
            "description": "A user defined description of the field. This value is typically displayed as the form field label on the application.",
            "type": "string"
          },
          "Value": {
            "description": "The field input value from the applicant.",
            "type": "string"
          }
        }
      },
      "ApplicationResponseMessage": {
        "type": "object",
        "properties": {
          "SectionLabel": {
            "description": "A user defined description of the application section.",
            "type": "string"
          },
          "SectionType": {
            "description": "Indicates the application section type. The `SectionType` can be used to identify specific sections within the application.",
            "enum": [
              "ApplicantInformation",
              "PropertyInformation",
              "RentalHistory",
              "Employment",
              "References",
              "Cosigners",
              "AdditionalOccupants",
              "Pets",
              "Vehicles",
              "TermsAndConditions",
              "Other"
            ],
            "type": "string"
          },
          "SectionResponses": {
            "description": "A collection of form fields within the section.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationSectionResponseMessage"
            }
          }
        }
      },
      "ApplicationSectionResponseMessage": {
        "type": "object",
        "properties": {
          "SectionFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationResponseFieldMessage"
            }
          }
        }
      },
      "AssociationMessage": {
        "description": "This is an object that represents home owner associations.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Association unique identifier.",
            "type": "integer"
          },
          "Name": {
            "description": "Association name.",
            "type": "string"
          },
          "IsActive": {
            "description": "Indicates whether the association is active within the Buildium platform.",
            "type": "boolean"
          },
          "Reserve": {
            "format": "double",
            "description": "A property reserve is cash that a property manager keeps on hand in case of unexpected expenses. It is available cash that simply isn't disbursed in an owner draw.",
            "type": "number"
          },
          "Description": {
            "description": "Description of the association.",
            "type": "string"
          },
          "YearBuilt": {
            "format": "int32",
            "description": "Indicates the year the association was built. Null if no value is set.",
            "type": "integer"
          },
          "OperatingBankAccount": {
            "description": "Primary bank account that an association uses for its income and expenses.",
            "type": "string"
          },
          "OperatingBankAccountId": {
            "format": "int32",
            "description": "Primary bank account unique identifier that an association uses for its income and expenses.",
            "type": "integer"
          },
          "Address": {
            "$ref": "#/components/schemas/AddressMessage"
          },
          "AssociationManager": {
            "$ref": "#/components/schemas/PropertyManagerMessage"
          }
        }
      },
      "AssociationOwnerBoardTermMessage": {
        "description": "This object represents the Association Board Terms for an Association Owner",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Association Owner Board Term unique identifier",
            "type": "integer"
          },
          "AssociationId": {
            "format": "int32",
            "description": "Association unique identifier",
            "type": "integer"
          },
          "BoardPositionType": {
            "description": "Indicates the board position held by the association owner",
            "enum": [
              "President",
              "VicePresident",
              "Treasurer",
              "Secretary",
              "BoardMember"
            ],
            "type": "string"
          },
          "StartDate": {
            "format": "date",
            "description": "Start date of the Association Owners term as Board Member",
            "type": "string"
          },
          "EndDate": {
            "format": "date",
            "description": "End date of the Association Owners term as Board Member",
            "type": "string"
          },
          "CreatedDateTime": {
            "format": "date-time",
            "description": "Date and time when the Board Member position was added for the Association Owner",
            "type": "string"
          }
        }
      },
      "AssociationOwnerBoardTermPostMessage": {
        "required": ["BoardPositionType"],
        "type": "object",
        "properties": {
          "BoardPositionType": {
            "description": "Indicates the board position held by the association owner.",
            "enum": [
              "President",
              "VicePresident",
              "Treasurer",
              "Secretary",
              "BoardMember"
            ],
            "type": "string"
          },
          "StartDate": {
            "format": "date",
            "description": "Start date of the association owners term as a board member. Must be formatted as `YYYY-MM-DD`.",
            "type": "string"
          },
          "EndDate": {
            "format": "date",
            "description": "End date of the association owners term as a board member. Must be formatted as `YYYY-MM-DD`.",
            "type": "string"
          }
        }
      },
      "AssociationOwnerMessage": {
        "description": "This object represents an owner of a unit(s) that exists within a home owner association.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Unique identifier.",
            "type": "integer"
          },
          "FirstName": {
            "description": "First name.",
            "type": "string"
          },
          "LastName": {
            "description": "Last name.",
            "type": "string"
          },
          "Email": {
            "description": "Email.",
            "type": "string"
          },
          "AlternateEmail": {
            "description": "Alternate email.",
            "type": "string"
          },
          "PhoneNumbers": {
            "description": "List of phone numbers of the association user.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberMessage"
            }
          },
          "PrimaryAddress": {
            "$ref": "#/components/schemas/AddressMessage"
          },
          "AlternateAddress": {
            "$ref": "#/components/schemas/AddressMessage"
          },
          "Comment": {
            "description": "General comments.",
            "type": "string"
          },
          "EmergencyContact": {
            "$ref": "#/components/schemas/EmergencyContactMessage"
          },
          "OwnershipAccounts": {
            "description": "List of associated ownership accounts.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssociationOwnershipAccountMessage"
            }
          },
          "MailingPreference": {
            "description": "Indicates the association owner's mailing preference.",
            "enum": ["PrimaryAddress", "AlternateAddress"],
            "type": "string"
          },
          "Vehicles": {
            "description": "List of vehicles associated with the association owner.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VehicleMessage"
            }
          },
          "OccupiesUnit": {
            "description": "Indicates if the association owner occupies a unit(s) within the association.",
            "type": "boolean"
          },
          "BoardMemberTerms": {
            "description": "List of Board Member Terms for the given Association Owner(s)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssociationOwnerBoardTermMessage"
            }
          }
        }
      },
      "AssociationOwnerPostMessage": {
        "description": "This object represents the Association Owner to add when Creating a new OwnershipAccount",
        "required": [
          "FirstName",
          "LastName",
          "PrimaryAddress",
          "IsOwnerOccupied"
        ],
        "type": "object",
        "properties": {
          "FirstName": {
            "description": "First name of the owner. The value cannot exceed 127 characters.",
            "type": "string"
          },
          "LastName": {
            "description": "Last name of the owner. The value cannot exceed 127 characters.",
            "type": "string"
          },
          "PrimaryAddress": {
            "$ref": "#/components/schemas/SaveAddressMessage"
          },
          "AlternateAddress": {
            "$ref": "#/components/schemas/SaveAddressMessage"
          },
          "BoardMemberTerm": {
            "$ref": "#/components/schemas/AssociationOwnerBoardTermPostMessage"
          },
          "IsOwnerOccupied": {
            "description": "Indicates if the association owner occupies a unit(s) within the association.",
            "type": "boolean"
          },
          "Email": {
            "description": "Email of owner.",
            "type": "string"
          },
          "AlternateEmail": {
            "description": "Alternate email of owner.",
            "type": "string"
          },
          "PhoneNumbers": {
            "$ref": "#/components/schemas/PhoneNumbersMessage"
          },
          "DateOfBirth": {
            "format": "date",
            "description": "Date Of Birth for the owner. Must be formatted as `YYYY-MM-DD`.",
            "type": "string"
          },
          "EmergencyContact": {
            "$ref": "#/components/schemas/SaveEmergencyContactMessage"
          },
          "Comment": {
            "description": "Comments about the owner. The value cannot exceed 65,535 characters.",
            "type": "string"
          },
          "MailingPreference": {
            "description": "Mailing preferences for the owner. If an alternate address exists and this value is not provided then the primary address will be set as the preferred address.",
            "enum": ["PrimaryAddress", "AlternateAddress"],
            "type": "string"
          }
        }
      },
      "AssociationOwnerPutMessage": {
        "required": ["FirstName", "LastName", "PrimaryAddress"],
        "type": "object",
        "properties": {
          "FirstName": {
            "description": "First name of the owner. The value cannot exceed 127 characters.",
            "type": "string"
          },
          "LastName": {
            "description": "Last name of the owner. The value cannot exceed 127 characters.",
            "type": "string"
          },
          "PrimaryAddress": {
            "$ref": "#/components/schemas/SaveAddressMessage"
          },
          "AlternateAddress": {
            "$ref": "#/components/schemas/SaveAddressMessage"
          },
          "Email": {
            "description": "Email of the owner.",
            "type": "string"
          },
          "AlternateEmail": {
            "description": "Alternate email of the owner.",
            "type": "string"
          },
          "PhoneNumbers": {
            "$ref": "#/components/schemas/PhoneNumbersMessage"
          },
          "EmergencyContact": {
            "$ref": "#/components/schemas/SaveEmergencyContactMessage"
          },
          "Comment": {
            "description": "Comments about the owner. The value cannot exceed 65,535 characters.",
            "type": "string"
          },
          "MailingPreference": {
            "description": "Mailing preferences for the owner. If an alternate address exists and this value is not provided then the primary address will be set as the preferred address.",
            "enum": ["PrimaryAddress", "AlternateAddress"],
            "type": "string"
          }
        }
      },
      "AssociationOwnershipAccountMessage": {
        "description": "This object represents a home owner association ownership account.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Association ownership account unique identifier.",
            "type": "integer"
          },
          "AssociationId": {
            "format": "int32",
            "description": "Association unique identifier that the ownership account belongs to.",
            "type": "integer"
          },
          "UnitId": {
            "format": "int32",
            "description": "Association unit unique identifier that the ownership account is related to.",
            "type": "integer"
          },
          "Status": {
            "description": "Indicates the status of the ownership account.",
            "enum": ["Active", "Past", "Future"],
            "type": "string"
          },
          "DateOfPurchase": {
            "format": "date",
            "description": "Date the unit(s) where purchased by the owner.",
            "type": "string"
          },
          "DateOfSale": {
            "format": "date",
            "description": "Date the unit(s) where sold by the owner.",
            "type": "string"
          },
          "Comments": {
            "description": "Comments about the ownership account.",
            "type": "string"
          },
          "AssociationOwnerIds": {
            "description": "Association owners associated with the ownership account",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      },
      "AssociationOwnershipAccountPostMessage": {
        "required": [
          "UnitId",
          "DateOfPurchase",
          "SendWelcomeEmail",
          "ReplaceExistingOwnershipAccount"
        ],
        "type": "object",
        "properties": {
          "UnitId": {
            "format": "int32",
            "description": "Association unit unique identifier that the ownership account is related to.",
            "type": "integer"
          },
          "DateOfPurchase": {
            "format": "date",
            "description": "Date the unit was purchased by the owner. Must be formatted as YYYY-MM-DD. \r\nIf an existing association ownership account is being replaced then this date must be after the existing ownership accounts date of sale.",
            "type": "string"
          },
          "AssociationFee": {
            "format": "double",
            "description": "Recurring association fee charge. If provided, a recurring transaction will be created that adds a charge in the amount specified to the ownership account ledger with the frequency indicated in RecurringFrequency.",
            "type": "number"
          },
          "RecurringFrequency": {
            "description": "Indicates the frequency of the recurring association fee. This field is required if `AssociationFee` has a value.",
            "enum": [
              "Monthly",
              "Weekly",
              "Every2Weeks",
              "Quarterly",
              "Yearly",
              "Every2Months",
              "Daily",
              "Every6Months",
              "OneTime"
            ],
            "type": "string"
          },
          "AssociationOwnerIds": {
            "description": "Current or former association owners to assign to this ownership account. Values must be an active association owner identifiers. The request must include at least one owner in this property OR the `AssociationOwners` property.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "AssociationOwners": {
            "description": "Create new association owner(s) and assigns them to this new ownership account. The request must include at least one owner in this property OR the `AssociationOwnerIds` property.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssociationOwnerPostMessage"
            }
          },
          "SendWelcomeEmail": {
            "description": "Indicates whether to send an owner portal welcome email to all of the association owners assigned to this ownership account. Once the owners sign into the portal, they can make online payments, view important documents, submit requests, and more.",
            "type": "boolean"
          },
          "ReplaceExistingOwnershipAccount": {
            "description": "Indicates whether to replace an ownership account if one already exists for this unit. \r\nIf this value is false and an ownership account exists the request will fail.This protects against inadvertently overwriting of an existing ownership account. \r\nIf the value is true and an ownership account exists then the existing ownership account will be marked as with a status of Past and the newly created ownership account will be Active for the unit.",
            "type": "boolean"
          }
        }
      },
      "AssociationOwnershipAccountSearchMessage": {
        "type": "object",
        "properties": {
          "AssociationIds": {
            "description": "Filters results to any ownership accounts who belong to the specified set of association ids.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "UnitOrOwner": {
            "description": "Filters results to any association whose unit or owner *contains* the specified value.",
            "type": "string"
          },
          "DateFrom": {
            "format": "date",
            "description": "Filters results to any ownership account whose start date is greater than or equal to the specified value.",
            "type": "string"
          },
          "DateTo": {
            "format": "date",
            "description": "Filters results to any ownership account whose start date is less than or equal to the specified value.",
            "type": "string"
          },
          "Status": {
            "description": "Filters results by the status of the association. If no status is specified, `active`, `past` and `future` associations will be returned.",
            "type": "array",
            "items": {
              "enum": ["Active", "Past", "Future"],
              "type": "string"
            }
          }
        }
      },
      "AssociationOwnerToExistingOwnershipAccountPostMessage": {
        "description": "This object represents the Association Owner to add to an existing Ownership Account",
        "required": [
          "OwnershipAccountId",
          "SendWelcomeEmail",
          "PrimaryAddress",
          "FirstName",
          "LastName",
          "IsOwnerOccupied"
        ],
        "type": "object",
        "properties": {
          "OwnershipAccountId": {
            "format": "int32",
            "description": "Ownership account Id for the owner.",
            "type": "integer"
          },
          "SendWelcomeEmail": {
            "description": "Send a welcome email to any homeowner at the association",
            "type": "boolean"
          },
          "PrimaryAddress": {
            "$ref": "#/components/schemas/SaveAddressMessage"
          },
          "AlternateAddress": {
            "$ref": "#/components/schemas/SaveAddressMessage"
          },
          "FirstName": {
            "description": "First name of the owner. The value can not exceed 127 characters.",
            "type": "string"
          },
          "LastName": {
            "description": "Last name of the owner. The value can not exceed 127 characters.",
            "type": "string"
          },
          "BoardMemberTerm": {
            "$ref": "#/components/schemas/AssociationOwnerBoardTermPostMessage"
          },
          "IsOwnerOccupied": {
            "description": "Indicates if the association owner occupies a unit(s) within the association.",
            "type": "boolean"
          },
          "Email": {
            "description": "Email of owner.",
            "type": "string"
          },
          "AlternateEmail": {
            "description": "Alternate email of owner.",
            "type": "string"
          },
          "PhoneNumbers": {
            "$ref": "#/components/schemas/PhoneNumbersMessage"
          },
          "DateOfBirth": {
            "format": "date",
            "description": "Date Of Birth for the owner. Must be formatted as `YYYY-MM-DD`.",
            "type": "string"
          },
          "EmergencyContact": {
            "$ref": "#/components/schemas/SaveEmergencyContactMessage"
          },
          "Comment": {
            "description": "Comments about the owner. The value can not exceed 65,535 characters.",
            "type": "string"
          },
          "MailingPreference": {
            "description": "Mailing preferences for the owner. If an alternate address exists and this value is not provided then the primary address will be set as the preferred address.",
            "enum": ["PrimaryAddress", "AlternateAddress"],
            "type": "string"
          }
        }
      },
      "AssociationPostMessage": {
        "required": ["Name", "OperatingBankAccountId", "Address"],
        "type": "object",
        "properties": {
          "Name": {
            "description": "Association name. The value cannot exceed 127 characters.",
            "type": "string"
          },
          "OperatingBankAccountId": {
            "format": "int32",
            "description": "The primary bank account that an association uses for its income and expenses.",
            "type": "integer"
          },
          "Address": {
            "$ref": "#/components/schemas/SaveAddressMessage"
          },
          "IsActive": {
            "description": "Indicates whether the association is active within the Buildium platform. If no value is passed in the default is `true`.",
            "type": "boolean"
          },
          "Reserve": {
            "format": "double",
            "description": "A property reserve is cash that a property manager keeps on hand in case of unexpected expenses. It is available cash that isn't disbursed in an owner draw.",
            "type": "number"
          },
          "Description": {
            "description": "Description of the association. The description cannot exceed 65,535 characters.",
            "type": "string"
          },
          "YearBuilt": {
            "format": "int32",
            "description": "Indicates the year the association was established. If provided this value must be a four digit integer between 1000 and the current year.",
            "type": "integer"
          }
        }
      },
      "AssociationPutMessage": {
        "required": [
          "Name",
          "OperatingBankAccountId",
          "Address",
          "FiscalYearEndDay",
          "FiscalYearEndMonth"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "description": "Association name. The value cannot exceed 127 characters.",
            "type": "string"
          },
          "Description": {
            "description": "Description of the association. The value cannot exceed 65,535 characters.",
            "type": "string"
          },
          "YearBuilt": {
            "format": "int32",
            "description": "Indicates the year the association was established. If provided this value must be a four digit integer between 1000 and the current year.",
            "type": "integer"
          },
          "OperatingBankAccountId": {
            "format": "int32",
            "description": "The primary bank account that an association uses for its income and expenses.",
            "type": "integer"
          },
          "Reserve": {
            "format": "double",
            "description": "A property reserve is cash that a property manager keeps on hand in case of unexpected expenses. It is available cash that isn't disbursed in an owner draw.",
            "type": "number"
          },
          "Address": {
            "$ref": "#/components/schemas/SaveAddressMessage"
          }
        }
      },
      "AssociationSearchMessage": {
        "description": "This object represents a filter for a home owner association search.",
        "type": "object",
        "properties": {
          "Location": {
            "description": "Filters results to any association whose address *contains* the specified value.",
            "type": "string"
          },
          "Status": {
            "description": "Filters results by the status of the association. If no status is specified both `active` and `inactive` associations will be returned.",
            "enum": ["Active", "InActive"],
            "type": "string"
          }
        }
      },
      "AssociationTenantMessage": {
        "description": "This object represents a home owner association tenant.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Unique identifier.",
            "type": "integer"
          },
          "FirstName": {
            "description": "First name.",
            "type": "string"
          },
          "LastName": {
            "description": "Last name.",
            "type": "string"
          },
          "Email": {
            "description": "Email.",
            "type": "string"
          },
          "AlternateEmail": {
            "description": "Alternate email.",
            "type": "string"
          },
          "PhoneNumbers": {
            "description": "List of phone numbers of the association user.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberMessage"
            }
          },
          "PrimaryAddress": {
            "$ref": "#/components/schemas/AddressMessage"
          },
          "AlternateAddress": {
            "$ref": "#/components/schemas/AddressMessage"
          },
          "Comment": {
            "description": "General comments.",
            "type": "string"
          },
          "EmergencyContact": {
            "$ref": "#/components/schemas/EmergencyContactMessage"
          },
          "OwnershipAccounts": {
            "description": "List of associated ownership accounts.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssociationOwnershipAccountMessage"
            }
          },
          "MoveInDate": {
            "format": "date",
            "description": "Move in date for the tenant.",
            "type": "string"
          },
          "MoveOutDate": {
            "format": "date",
            "description": "Move out date for the tenant.",
            "type": "string"
          }
        }
      },
      "AssociationTenantPostMessage": {
        "required": [
          "FirstName",
          "LastName",
          "PrimaryAddress",
          "OwnershipAccountId"
        ],
        "type": "object",
        "properties": {
          "FirstName": {
            "description": "First name of tenant. The value cannot exceed 127 characters.",
            "type": "string"
          },
          "LastName": {
            "description": "Last name of tenant. The value cannot exceed 127 characters.",
            "type": "string"
          },
          "Email": {
            "description": "Email of tenant.",
            "type": "string"
          },
          "AlternateEmail": {
            "description": "Alternate email of tenant.",
            "type": "string"
          },
          "PhoneNumbers": {
            "$ref": "#/components/schemas/PhoneNumbersMessage"
          },
          "DateOfBirth": {
            "format": "date",
            "description": "Date of birth for the tenant. Must be formatted as `YYYY-MM-DD`.",
            "type": "string"
          },
          "Comment": {
            "description": "Comments about the tenant. The value cannot exceed 65,535 characters.",
            "type": "string"
          },
          "EmergencyContact": {
            "$ref": "#/components/schemas/SaveEmergencyContactMessage"
          },
          "PrimaryAddress": {
            "$ref": "#/components/schemas/SaveAddressMessage"
          },
          "AlternateAddress": {
            "$ref": "#/components/schemas/SaveAddressMessage"
          },
          "MoveInDate": {
            "format": "date",
            "description": "Move in date for the tenant. This date is not editable and can only be set when creating the tenant. Must be formatted as `YYYY-MM-DD`.",
            "type": "string"
          },
          "MoveOutDate": {
            "format": "date",
            "description": "Move out date for the tenant. Must be formatted as `YYYY-MM-DD`.",
            "type": "string"
          },
          "OwnershipAccountId": {
            "format": "int32",
            "description": "Ownership account id for the tenant.",
            "type": "integer"
          }
        }
      },
      "AssociationTenantPutMessage": {
        "required": ["FirstName", "LastName", "PrimaryAddress"],
        "type": "object",
        "properties": {
          "FirstName": {
            "description": "First name of tenant. The value cannot exceed 127 characters.",
            "type": "string"
          },
          "LastName": {
            "description": "Last name of tenant. The value cannot exceed 127 characters.",
            "type": "string"
          },
          "Email": {
            "description": "Email of tenant.",
            "type": "string"
          },
          "AlternateEmail": {
            "description": "Alternate email of tenant.",
            "type": "string"
          },
          "PhoneNumbers": {
            "$ref": "#/components/schemas/PhoneNumbersMessage"
          },
          "DateOfBirth": {
            "format": "date",
            "description": "Date of birth for the tenant. Must be formatted as `YYYY-MM-DD`.",
            "type": "string"
          },
          "Comment": {
            "description": "Comments about the tenant. The value cannot exceed 65,535 characters.",
            "type": "string"
          },
          "EmergencyContact": {
            "$ref": "#/components/schemas/SaveEmergencyContactMessage"
          },
          "PrimaryAddress": {
            "$ref": "#/components/schemas/SaveAddressMessage"
          },
          "AlternateAddress": {
            "$ref": "#/components/schemas/SaveAddressMessage"
          }
        }
      },
      "AssociationUnitMessage": {
        "description": "This object represents a home owners association unit.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Association unit unique identifier.",
            "type": "integer"
          },
          "AssociationId": {
            "format": "int32",
            "description": "Association unique identifier that the unit belongs to.",
            "type": "integer"
          },
          "AssociationName": {
            "description": "Association name that the unit belongs to.",
            "type": "string"
          },
          "UnitNumber": {
            "description": "Unit number.",
            "type": "string"
          },
          "Address": {
            "$ref": "#/components/schemas/AddressMessage"
          },
          "UnitBedrooms": {
            "description": "Number of bedrooms in the unit.",
            "enum": [
              "NotSet",
              "Studio",
              "OneBed",
              "TwoBed",
              "ThreeBed",
              "FourBed",
              "FiveBed",
              "SixBed",
              "SevenBed",
              "EightBed",
              "NineBedPlus"
            ],
            "type": "string"
          },
          "UnitBathrooms": {
            "description": "Number of bathrooms in the unit.",
            "enum": [
              "NotSet",
              "OneBath",
              "OnePointFiveBath",
              "TwoBath",
              "TwoPointFiveBath",
              "ThreeBath",
              "FourBath",
              "FiveBath",
              "FivePlusBath",
              "ThreePointFiveBath",
              "FourPointFiveBath"
            ],
            "type": "string"
          },
          "UnitSize": {
            "format": "int32",
            "description": "Size of the unit.",
            "type": "integer"
          }
        }
      },
      "AssociationUnitPutMessage": {
        "required": ["UnitNumber", "Address"],
        "type": "object",
        "properties": {
          "UnitNumber": {
            "description": "Unit Number. Must be unique within the association and cannot exceed 30 characters.",
            "type": "string"
          },
          "UnitSize": {
            "format": "int32",
            "description": "Size of the unit.",
            "type": "integer"
          },
          "Address": {
            "$ref": "#/components/schemas/SaveAddressMessage"
          },
          "UnitBedrooms": {
            "description": "Number of bedrooms in the unit.",
            "enum": [
              "NotSet",
              "Studio",
              "OneBed",
              "TwoBed",
              "ThreeBed",
              "FourBed",
              "FiveBed",
              "SixBed",
              "SevenBed",
              "EightBed",
              "NineBedPlus"
            ],
            "type": "string"
          },
          "UnitBathrooms": {
            "description": "Number of bathrooms in the unit.",
            "enum": [
              "NotSet",
              "OneBath",
              "OnePointFiveBath",
              "TwoBath",
              "TwoPointFiveBath",
              "ThreeBath",
              "FourBath",
              "FiveBath",
              "FivePlusBath",
              "ThreePointFiveBath",
              "FourPointFiveBath"
            ],
            "type": "string"
          }
        }
      },
      "AssociationUnitSearchMessage": {
        "description": "This object represents a filter for a home owner association unit search",
        "type": "object",
        "properties": {
          "AssociationIds": {
            "description": "Filters results to only include Associations with matching IDs",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      },
      "AssociationUnitsPostMessage": {
        "required": ["UnitNumber", "AssociationId", "Address"],
        "type": "object",
        "properties": {
          "UnitNumber": {
            "description": "Unit number. Must be unique within the association and cannot exceed 30 characters.",
            "type": "string"
          },
          "AssociationId": {
            "format": "int32",
            "description": "Association unique identifier that the unit belongs to.",
            "type": "integer"
          },
          "UnitSize": {
            "format": "int32",
            "description": "Size of the unit.",
            "type": "integer"
          },
          "Address": {
            "$ref": "#/components/schemas/SaveAddressMessage"
          },
          "UnitBedrooms": {
            "description": "Number of bedrooms in the unit.",
            "enum": [
              "NotSet",
              "Studio",
              "OneBed",
              "TwoBed",
              "ThreeBed",
              "FourBed",
              "FiveBed",
              "SixBed",
              "SevenBed",
              "EightBed",
              "NineBedPlus"
            ],
            "type": "string"
          },
          "UnitBathrooms": {
            "description": "Number of bathrooms in the unit.",
            "enum": [
              "NotSet",
              "OneBath",
              "OnePointFiveBath",
              "TwoBath",
              "TwoPointFiveBath",
              "ThreeBath",
              "FourBath",
              "FiveBath",
              "FivePlusBath",
              "ThreePointFiveBath",
              "FourPointFiveBath"
            ],
            "type": "string"
          }
        }
      },
      "AssociationUserSearchMessage": {
        "type": "object",
        "properties": {
          "Name": {
            "description": "Filters results to only records whose name *contains* the specified value.",
            "type": "string"
          },
          "Phone": {
            "description": "Filters results to only records whose phone number *contains* the specified value.",
            "type": "string"
          },
          "Email": {
            "description": "Filters results to only records whose email *contains* the specified value.",
            "type": "string"
          },
          "AssociationIds": {
            "description": "Filters results to only records that belong to the specified set of association ids.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "Statuses": {
            "description": "Filters results to only records whose status is equal to the specified value.",
            "type": "array",
            "items": {
              "enum": ["Active", "Past", "Future"],
              "type": "string"
            }
          }
        }
      },
      "BankAccountCheckAccountingEntitySaveMessage": {
        "required": ["Id", "AccountingEntityType"],
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The accounting entity unique identifier.",
            "type": "integer"
          },
          "AccountingEntityType": {
            "description": "The type of accounting entity.",
            "enum": ["Association", "Rental", "Company"],
            "type": "string"
          }
        }
      },
      "BankAccountCheckLineMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The unique identifier of the line item.",
            "type": "integer"
          },
          "GLAccountId": {
            "format": "int32",
            "description": "General ledger account unique identifier the line item is related to.",
            "type": "integer"
          },
          "AccountingEntity": {
            "$ref": "#/components/schemas/AccountingEntityMessage"
          },
          "Memo": {
            "description": "Memo for the line item.",
            "type": "string"
          },
          "ReferenceNumber": {
            "description": "Reference number for the line item.",
            "type": "string"
          },
          "Amount": {
            "format": "double",
            "description": "Amount of the line item.",
            "type": "number"
          }
        }
      },
      "BankAccountCheckLineSaveMessage": {
        "required": ["GLAccountId", "AccountingEntity", "Amount"],
        "type": "object",
        "properties": {
          "GLAccountId": {
            "format": "int32",
            "description": "The general ledger account identifier under which the line item amount will be recorded.",
            "type": "integer"
          },
          "AccountingEntity": {
            "$ref": "#/components/schemas/BankAccountCheckAccountingEntitySaveMessage"
          },
          "Memo": {
            "description": "Memo for the line item.",
            "type": "string"
          },
          "ReferenceNumber": {
            "description": "Reference number for the line item.",
            "type": "string"
          },
          "Amount": {
            "format": "double",
            "description": "Amount of the line item.",
            "type": "number"
          }
        }
      },
      "BankAccountCheckMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Check unique identifier.",
            "type": "integer"
          },
          "Payee": {
            "$ref": "#/components/schemas/BankAccountCheckPayeeMessage"
          },
          "CheckNumber": {
            "description": "Check number.",
            "type": "string"
          },
          "EntryDate": {
            "format": "date",
            "description": "Date the check was recorded.",
            "type": "string"
          },
          "Memo": {
            "description": "Memo associated with the check, if applicable.",
            "type": "string"
          },
          "TotalAmount": {
            "format": "double",
            "description": "Sum of all `Journal.Lines.Amount` entries in the check.",
            "type": "number"
          },
          "Lines": {
            "description": "A collection of line items associated with the check.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankAccountCheckLineMessage"
            }
          }
        }
      },
      "BankAccountCheckPayeeMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The payee user identifier.",
            "type": "integer"
          },
          "Type": {
            "description": "The entity type for the payee.",
            "enum": ["Vendor", "RentalOwner"],
            "type": "string"
          },
          "Href": {
            "description": "A link to the resource endpoint associated with the payee.",
            "type": "string"
          }
        }
      },
      "BankAccountCheckPayeeSaveMessage": {
        "required": ["Id", "Type"],
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The payee user identifier.",
            "type": "integer"
          },
          "Type": {
            "description": "The payee entity type.",
            "enum": ["Vendor", "RentalOwner"],
            "type": "string"
          }
        }
      },
      "BankAccountCheckPostMessage": {
        "required": ["Payee", "EntryDate", "Lines"],
        "type": "object",
        "properties": {
          "Payee": {
            "$ref": "#/components/schemas/BankAccountCheckPayeeSaveMessage"
          },
          "CheckNumber": {
            "description": "Check number.",
            "type": "string"
          },
          "EntryDate": {
            "format": "date",
            "description": "Date the check was recorded.",
            "type": "string"
          },
          "Memo": {
            "description": "Memo associated with the check, if applicable.",
            "type": "string"
          },
          "Lines": {
            "description": "A collection of line items to associate with the check.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankAccountCheckLineSaveMessage"
            }
          }
        }
      },
      "BankAccountCheckPutMessage": {
        "required": ["Payee", "EntryDate", "Lines"],
        "type": "object",
        "properties": {
          "Payee": {
            "$ref": "#/components/schemas/BankAccountCheckPayeeSaveMessage"
          },
          "CheckNumber": {
            "description": "Check number.",
            "type": "string"
          },
          "EntryDate": {
            "format": "date",
            "description": "Date the check was recorded.",
            "type": "string"
          },
          "Memo": {
            "description": "Memo associated with the check, if applicable.",
            "type": "string"
          },
          "Lines": {
            "description": "A collection of line items to associate with the check.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankAccountCheckLineSaveMessage"
            }
          }
        }
      },
      "BankAccountCheckSearchMessage": {
        "required": ["StartDate", "EndDate"],
        "type": "object",
        "properties": {
          "StartDate": {
            "format": "date",
            "description": "Filters results to any transactions that were recorded on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "EndDate": {
            "format": "date",
            "description": "Filters results to any transactions that were recorded on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          }
        }
      },
      "BankAccountDepositLineMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The unique identifier of the line item.",
            "type": "integer"
          },
          "AccountingEntity": {
            "$ref": "#/components/schemas/AccountingEntityMessage"
          },
          "GLAccountId": {
            "format": "int32",
            "description": "The general ledger account identifier under which the line item amount is recorded.",
            "type": "integer"
          },
          "Memo": {
            "description": "Memo for the line item.",
            "type": "string"
          },
          "ReferenceNumber": {
            "description": "Reference number for the line item.",
            "type": "string"
          },
          "Amount": {
            "format": "double",
            "description": "Amount of the line item.",
            "type": "number"
          }
        }
      },
      "BankAccountDepositLineSaveMessage": {
        "type": "object",
        "properties": {
          "GLAccountId": {
            "format": "int32",
            "description": "The general ledger account identifier under which the line item amount will be recorded.",
            "type": "integer"
          },
          "AccountingEntity": {
            "$ref": "#/components/schemas/AccountingEntitySaveMessage"
          },
          "Memo": {
            "description": "Memo for the line item.",
            "type": "string"
          },
          "ReferenceNumber": {
            "description": "Reference number for the line item.",
            "type": "string"
          },
          "Amount": {
            "format": "double",
            "description": "Amount of the line item.",
            "type": "number"
          }
        }
      },
      "BankAccountDepositMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Deposit unique identifier.",
            "type": "integer"
          },
          "EntryDate": {
            "format": "date",
            "description": "Date the deposit was recorded.",
            "type": "string"
          },
          "Memo": {
            "description": "Memo associated with the deposit, if applicable.",
            "type": "string"
          },
          "TotalAmount": {
            "format": "double",
            "description": "Sum of all `Journal.Lines.Amount` entries in the deposit.",
            "type": "number"
          },
          "Lines": {
            "description": "A collection of line items associated with the deposit.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankAccountDepositLineMessage"
            }
          },
          "PaymentTransactionIds": {
            "description": "A collection of payment transaction identifiers that were included in this deposit transaction.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      },
      "BankAccountDepositPostMessage": {
        "required": ["EntryDate"],
        "type": "object",
        "properties": {
          "EntryDate": {
            "format": "date",
            "description": "Date the deposit was recorded.",
            "type": "string"
          },
          "Memo": {
            "description": "Memo associated with the deposit, if applicable.",
            "type": "string"
          },
          "Lines": {
            "description": "A collection of line items to associate with the deposit.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankAccountDepositLineSaveMessage"
            }
          },
          "PaymentTransactionIds": {
            "description": "",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      },
      "BankAccountDepositPutMessage": {
        "required": ["EntryDate", "Lines"],
        "type": "object",
        "properties": {
          "EntryDate": {
            "format": "date",
            "description": "Date the deposit was recorded.",
            "type": "string"
          },
          "Memo": {
            "description": "Memo associated with the deposit, if applicable.",
            "type": "string"
          },
          "Lines": {
            "description": "",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankAccountDepositLineSaveMessage"
            }
          }
        }
      },
      "BankAccountDepositSearchMessage": {
        "required": ["StartDate", "EndDate"],
        "type": "object",
        "properties": {
          "StartDate": {
            "format": "date",
            "description": "Filters results to any deposits that were recorded on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "EndDate": {
            "format": "date",
            "description": "Filters results to any deposits that were recorded on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          }
        }
      },
      "BankAccountMessage": {
        "description": "This is an object that represents a bank account.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Bank account unique identifier.",
            "type": "integer"
          },
          "GLAccount": {
            "$ref": "#/components/schemas/GLAccountMessage"
          },
          "CheckPrintingInfo": {
            "$ref": "#/components/schemas/CheckPrintingInfoMessage"
          },
          "ElectronicPayments": {
            "$ref": "#/components/schemas/ElectronicPaymentsMessage"
          },
          "Name": {
            "description": "Bank Account name.",
            "type": "string"
          },
          "Description": {
            "description": "Bank account description.",
            "type": "string"
          },
          "BankAccountType": {
            "description": "Type of bank account. Values are `Checking` or `Savings`.",
            "type": "string"
          },
          "Country": {
            "description": "The country the bank account is in.",
            "enum": [
              "UnitedStates",
              "Afghanistan",
              "Akrotiri",
              "Albania",
              "Algeria",
              "AmericanSamoa",
              "Andorra",
              "Angola",
              "Anguilla",
              "Antarctica",
              "AntiguaandBarbuda",
              "Argentina",
              "Armenia",
              "Aruba",
              "AshmoreandCartierIslands",
              "Australia",
              "Austria",
              "Azerbaijan",
              "Bahamas",
              "Bahrain",
              "Bangladesh",
              "Barbados",
              "BassasdaIndia",
              "Belarus",
              "Belgium",
              "Belize",
              "Benin",
              "Bermuda",
              "Bhutan",
              "Bolivia",
              "BosniaandHerzegovina",
              "Botswana",
              "BouvetIsland",
              "Brazil",
              "BritishIndianOceanTerritory",
              "BritishVirginIslands",
              "Brunei",
              "Bulgaria",
              "BurkinaFaso",
              "Burma",
              "Burundi",
              "Cambodia",
              "Cameroon",
              "Canada",
              "CapeVerde",
              "CaymanIslands",
              "CentralAfricanRepublic",
              "Chad",
              "Chile",
              "China",
              "ChristmasIsland",
              "ClippertonIsland",
              "CocosIslands",
              "Colombia",
              "Comoros",
              "DemocraticRepublicOfTheCongo",
              "RepublicOfTheCongo",
              "CookIslands",
              "CoralSeaIslands",
              "CostaRica",
              "CotedIvoire",
              "Croatia",
              "Cuba",
              "Cyprus",
              "CzechRepublic",
              "Denmark",
              "Dhekelia",
              "Djibouti",
              "Dominica",
              "DominicanRepublic",
              "Ecuador",
              "Egypt",
              "ElSalvador",
              "EquatorialGuinea",
              "Eritrea",
              "Estonia",
              "Ethiopia",
              "EuropaIsland",
              "FalklandIslands",
              "FaroeIslands",
              "Fiji",
              "Finland",
              "France",
              "FrenchGuiana",
              "FrenchPolynesia",
              "FrenchSouthernandAntarcticLands",
              "Gabon",
              "Gambia",
              "GazaStrip",
              "Georgia",
              "Germany",
              "Ghana",
              "Gibraltar",
              "GloriosoIslands",
              "Greece",
              "Greenland",
              "Grenada",
              "Guadeloupe",
              "Guam",
              "Guatemala",
              "Guernsey",
              "Guinea",
              "GuineaBissau",
              "Guyana",
              "Haiti",
              "HeardIslandandMcDonaldIslands",
              "VaticanCity",
              "Honduras",
              "HongKong",
              "Hungary",
              "Iceland",
              "India",
              "Indonesia",
              "Iran",
              "Iraq",
              "Ireland",
              "IsleofMan",
              "Israel",
              "Italy",
              "Jamaica",
              "JanMayen",
              "Japan",
              "Jersey",
              "Jordan",
              "JuandeNovaIsland",
              "Kazakhstan",
              "Kenya",
              "Kiribati",
              "NorthKorea",
              "SouthKorea",
              "Kuwait",
              "Kyrgyzstan",
              "Laos",
              "Latvia",
              "Lebanon",
              "Lesotho",
              "Liberia",
              "Libya",
              "Liechtenstein",
              "Lithuania",
              "Luxembourg",
              "Macau",
              "Macedonia",
              "Madagascar",
              "Malawi",
              "Malaysia",
              "Maldives",
              "Mali",
              "Malta",
              "MarshallIslands",
              "Martinique",
              "Mauritania",
              "Mauritius",
              "Mayotte",
              "Mexico",
              "Micronesia",
              "Moldova",
              "Monaco",
              "Mongolia",
              "Montserrat",
              "Morocco",
              "Mozambique",
              "Namibia",
              "Nauru",
              "NavassaIsland",
              "Nepal",
              "Netherlands",
              "NetherlandsAntilles",
              "NewCaledonia",
              "NewZealand",
              "Nicaragua",
              "Niger",
              "Nigeria",
              "Niue",
              "NorfolkIsland",
              "NorthernMarianaIslands",
              "Norway",
              "Oman",
              "Pakistan",
              "Palau",
              "Panama",
              "PapuaNewGuinea",
              "ParacelIslands",
              "Paraguay",
              "Peru",
              "Philippines",
              "PitcairnIslands",
              "Poland",
              "Portugal",
              "PuertoRico",
              "Qatar",
              "Reunion",
              "Romania",
              "Russia",
              "Rwanda",
              "SaintHelena",
              "SaintKittsandNevis",
              "SaintLucia",
              "SaintPierreandMiquelon",
              "SaintVincentandtheGrenadines",
              "Samoa",
              "SanMarino",
              "SaoTomeandPrincipe",
              "SaudiArabia",
              "Senegal",
              "SerbiaandMontenegro",
              "Seychelles",
              "SierraLeone",
              "Singapore",
              "Slovakia",
              "Slovenia",
              "SolomonIslands",
              "Somalia",
              "SouthAfrica",
              "SouthGeorgiaandtheSouthSandwichIslands",
              "Spain",
              "SpratlyIslands",
              "SriLanka",
              "Sudan",
              "Suriname",
              "Svalbard",
              "Swaziland",
              "Sweden",
              "Switzerland",
              "Syria",
              "Taiwan",
              "Tajikistan",
              "Tanzania",
              "Thailand",
              "TimorLeste",
              "Togo",
              "Tokelau",
              "Tonga",
              "TrinidadandTobago",
              "TromelinIsland",
              "Tunisia",
              "Turkey",
              "Turkmenistan",
              "TurksandCaicosIslands",
              "Tuvalu",
              "Uganda",
              "Ukraine",
              "UnitedArabEmirates",
              "UnitedKingdom",
              "Uruguay",
              "Uzbekistan",
              "Vanuatu",
              "Venezuela",
              "Vietnam",
              "VirginIslands",
              "WakeIsland",
              "WallisandFutuna",
              "WestBank",
              "WesternSahara",
              "Yemen",
              "Zambia",
              "Zimbabwe"
            ],
            "type": "string"
          },
          "AccountNumber": {
            "description": "Bank account number.",
            "type": "string"
          },
          "RoutingNumber": {
            "description": "Bank routing number.",
            "type": "string"
          },
          "IsActive": {
            "description": "Bank Account Status",
            "type": "boolean"
          },
          "Balance": {
            "format": "double",
            "description": "Bank Account balance",
            "type": "number"
          }
        }
      },
      "BankAccountPostMessage": {
        "required": ["Name", "BankAccountType", "Country"],
        "type": "object",
        "properties": {
          "CheckPrintingInfo": {
            "$ref": "#/components/schemas/CheckPrintingInfoPostMessage"
          },
          "Name": {
            "description": "Bank account name.",
            "type": "string"
          },
          "Description": {
            "description": "Bank account description.",
            "type": "string"
          },
          "BankAccountType": {
            "description": "Type of bank account.",
            "enum": ["Checking", "Savings"],
            "type": "string"
          },
          "Country": {
            "description": "The country the bank account exists in.",
            "enum": [
              "UnitedStates",
              "Afghanistan",
              "Akrotiri",
              "Albania",
              "Algeria",
              "AmericanSamoa",
              "Andorra",
              "Angola",
              "Anguilla",
              "Antarctica",
              "AntiguaandBarbuda",
              "Argentina",
              "Armenia",
              "Aruba",
              "AshmoreandCartierIslands",
              "Australia",
              "Austria",
              "Azerbaijan",
              "Bahamas",
              "Bahrain",
              "Bangladesh",
              "Barbados",
              "BassasdaIndia",
              "Belarus",
              "Belgium",
              "Belize",
              "Benin",
              "Bermuda",
              "Bhutan",
              "Bolivia",
              "BosniaandHerzegovina",
              "Botswana",
              "BouvetIsland",
              "Brazil",
              "BritishIndianOceanTerritory",
              "BritishVirginIslands",
              "Brunei",
              "Bulgaria",
              "BurkinaFaso",
              "Burma",
              "Burundi",
              "Cambodia",
              "Cameroon",
              "Canada",
              "CapeVerde",
              "CaymanIslands",
              "CentralAfricanRepublic",
              "Chad",
              "Chile",
              "China",
              "ChristmasIsland",
              "ClippertonIsland",
              "CocosIslands",
              "Colombia",
              "Comoros",
              "DemocraticRepublicOfTheCongo",
              "RepublicOfTheCongo",
              "CookIslands",
              "CoralSeaIslands",
              "CostaRica",
              "CotedIvoire",
              "Croatia",
              "Cuba",
              "Cyprus",
              "CzechRepublic",
              "Denmark",
              "Dhekelia",
              "Djibouti",
              "Dominica",
              "DominicanRepublic",
              "Ecuador",
              "Egypt",
              "ElSalvador",
              "EquatorialGuinea",
              "Eritrea",
              "Estonia",
              "Ethiopia",
              "EuropaIsland",
              "FalklandIslands",
              "FaroeIslands",
              "Fiji",
              "Finland",
              "France",
              "FrenchGuiana",
              "FrenchPolynesia",
              "FrenchSouthernandAntarcticLands",
              "Gabon",
              "Gambia",
              "GazaStrip",
              "Georgia",
              "Germany",
              "Ghana",
              "Gibraltar",
              "GloriosoIslands",
              "Greece",
              "Greenland",
              "Grenada",
              "Guadeloupe",
              "Guam",
              "Guatemala",
              "Guernsey",
              "Guinea",
              "GuineaBissau",
              "Guyana",
              "Haiti",
              "HeardIslandandMcDonaldIslands",
              "VaticanCity",
              "Honduras",
              "HongKong",
              "Hungary",
              "Iceland",
              "India",
              "Indonesia",
              "Iran",
              "Iraq",
              "Ireland",
              "IsleofMan",
              "Israel",
              "Italy",
              "Jamaica",
              "JanMayen",
              "Japan",
              "Jersey",
              "Jordan",
              "JuandeNovaIsland",
              "Kazakhstan",
              "Kenya",
              "Kiribati",
              "NorthKorea",
              "SouthKorea",
              "Kuwait",
              "Kyrgyzstan",
              "Laos",
              "Latvia",
              "Lebanon",
              "Lesotho",
              "Liberia",
              "Libya",
              "Liechtenstein",
              "Lithuania",
              "Luxembourg",
              "Macau",
              "Macedonia",
              "Madagascar",
              "Malawi",
              "Malaysia",
              "Maldives",
              "Mali",
              "Malta",
              "MarshallIslands",
              "Martinique",
              "Mauritania",
              "Mauritius",
              "Mayotte",
              "Mexico",
              "Micronesia",
              "Moldova",
              "Monaco",
              "Mongolia",
              "Montserrat",
              "Morocco",
              "Mozambique",
              "Namibia",
              "Nauru",
              "NavassaIsland",
              "Nepal",
              "Netherlands",
              "NetherlandsAntilles",
              "NewCaledonia",
              "NewZealand",
              "Nicaragua",
              "Niger",
              "Nigeria",
              "Niue",
              "NorfolkIsland",
              "NorthernMarianaIslands",
              "Norway",
              "Oman",
              "Pakistan",
              "Palau",
              "Panama",
              "PapuaNewGuinea",
              "ParacelIslands",
              "Paraguay",
              "Peru",
              "Philippines",
              "PitcairnIslands",
              "Poland",
              "Portugal",
              "PuertoRico",
              "Qatar",
              "Reunion",
              "Romania",
              "Russia",
              "Rwanda",
              "SaintHelena",
              "SaintKittsandNevis",
              "SaintLucia",
              "SaintPierreandMiquelon",
              "SaintVincentandtheGrenadines",
              "Samoa",
              "SanMarino",
              "SaoTomeandPrincipe",
              "SaudiArabia",
              "Senegal",
              "SerbiaandMontenegro",
              "Seychelles",
              "SierraLeone",
              "Singapore",
              "Slovakia",
              "Slovenia",
              "SolomonIslands",
              "Somalia",
              "SouthAfrica",
              "SouthGeorgiaandtheSouthSandwichIslands",
              "Spain",
              "SpratlyIslands",
              "SriLanka",
              "Sudan",
              "Suriname",
              "Svalbard",
              "Swaziland",
              "Sweden",
              "Switzerland",
              "Syria",
              "Taiwan",
              "Tajikistan",
              "Tanzania",
              "Thailand",
              "TimorLeste",
              "Togo",
              "Tokelau",
              "Tonga",
              "TrinidadandTobago",
              "TromelinIsland",
              "Tunisia",
              "Turkey",
              "Turkmenistan",
              "TurksandCaicosIslands",
              "Tuvalu",
              "Uganda",
              "Ukraine",
              "UnitedArabEmirates",
              "UnitedKingdom",
              "Uruguay",
              "Uzbekistan",
              "Vanuatu",
              "Venezuela",
              "Vietnam",
              "VirginIslands",
              "WakeIsland",
              "WallisandFutuna",
              "WestBank",
              "WesternSahara",
              "Yemen",
              "Zambia",
              "Zimbabwe"
            ],
            "type": "string"
          },
          "AccountNumber": {
            "description": "Bank account number.",
            "type": "string"
          },
          "RoutingNumber": {
            "description": "Bank routing number. If the bank is in Canada, the routing number should be provided as a zero followed by the three digit institution number, followed by the five digit transit number.",
            "type": "string"
          }
        }
      },
      "BankAccountPutMessage": {
        "required": ["CheckPrintingInfo", "Name", "BankAccountType", "Country"],
        "type": "object",
        "properties": {
          "CheckPrintingInfo": {
            "$ref": "#/components/schemas/CheckPrintingInfoPutMessage"
          },
          "Name": {
            "description": "Bank account name.",
            "type": "string"
          },
          "Description": {
            "description": "Bank account description.",
            "type": "string"
          },
          "BankAccountType": {
            "description": "Type of bank account.",
            "enum": ["Checking", "Savings"],
            "type": "string"
          },
          "Country": {
            "description": "The country the bank account exists in.",
            "enum": [
              "UnitedStates",
              "Afghanistan",
              "Akrotiri",
              "Albania",
              "Algeria",
              "AmericanSamoa",
              "Andorra",
              "Angola",
              "Anguilla",
              "Antarctica",
              "AntiguaandBarbuda",
              "Argentina",
              "Armenia",
              "Aruba",
              "AshmoreandCartierIslands",
              "Australia",
              "Austria",
              "Azerbaijan",
              "Bahamas",
              "Bahrain",
              "Bangladesh",
              "Barbados",
              "BassasdaIndia",
              "Belarus",
              "Belgium",
              "Belize",
              "Benin",
              "Bermuda",
              "Bhutan",
              "Bolivia",
              "BosniaandHerzegovina",
              "Botswana",
              "BouvetIsland",
              "Brazil",
              "BritishIndianOceanTerritory",
              "BritishVirginIslands",
              "Brunei",
              "Bulgaria",
              "BurkinaFaso",
              "Burma",
              "Burundi",
              "Cambodia",
              "Cameroon",
              "Canada",
              "CapeVerde",
              "CaymanIslands",
              "CentralAfricanRepublic",
              "Chad",
              "Chile",
              "China",
              "ChristmasIsland",
              "ClippertonIsland",
              "CocosIslands",
              "Colombia",
              "Comoros",
              "DemocraticRepublicOfTheCongo",
              "RepublicOfTheCongo",
              "CookIslands",
              "CoralSeaIslands",
              "CostaRica",
              "CotedIvoire",
              "Croatia",
              "Cuba",
              "Cyprus",
              "CzechRepublic",
              "Denmark",
              "Dhekelia",
              "Djibouti",
              "Dominica",
              "DominicanRepublic",
              "Ecuador",
              "Egypt",
              "ElSalvador",
              "EquatorialGuinea",
              "Eritrea",
              "Estonia",
              "Ethiopia",
              "EuropaIsland",
              "FalklandIslands",
              "FaroeIslands",
              "Fiji",
              "Finland",
              "France",
              "FrenchGuiana",
              "FrenchPolynesia",
              "FrenchSouthernandAntarcticLands",
              "Gabon",
              "Gambia",
              "GazaStrip",
              "Georgia",
              "Germany",
              "Ghana",
              "Gibraltar",
              "GloriosoIslands",
              "Greece",
              "Greenland",
              "Grenada",
              "Guadeloupe",
              "Guam",
              "Guatemala",
              "Guernsey",
              "Guinea",
              "GuineaBissau",
              "Guyana",
              "Haiti",
              "HeardIslandandMcDonaldIslands",
              "VaticanCity",
              "Honduras",
              "HongKong",
              "Hungary",
              "Iceland",
              "India",
              "Indonesia",
              "Iran",
              "Iraq",
              "Ireland",
              "IsleofMan",
              "Israel",
              "Italy",
              "Jamaica",
              "JanMayen",
              "Japan",
              "Jersey",
              "Jordan",
              "JuandeNovaIsland",
              "Kazakhstan",
              "Kenya",
              "Kiribati",
              "NorthKorea",
              "SouthKorea",
              "Kuwait",
              "Kyrgyzstan",
              "Laos",
              "Latvia",
              "Lebanon",
              "Lesotho",
              "Liberia",
              "Libya",
              "Liechtenstein",
              "Lithuania",
              "Luxembourg",
              "Macau",
              "Macedonia",
              "Madagascar",
              "Malawi",
              "Malaysia",
              "Maldives",
              "Mali",
              "Malta",
              "MarshallIslands",
              "Martinique",
              "Mauritania",
              "Mauritius",
              "Mayotte",
              "Mexico",
              "Micronesia",
              "Moldova",
              "Monaco",
              "Mongolia",
              "Montserrat",
              "Morocco",
              "Mozambique",
              "Namibia",
              "Nauru",
              "NavassaIsland",
              "Nepal",
              "Netherlands",
              "NetherlandsAntilles",
              "NewCaledonia",
              "NewZealand",
              "Nicaragua",
              "Niger",
              "Nigeria",
              "Niue",
              "NorfolkIsland",
              "NorthernMarianaIslands",
              "Norway",
              "Oman",
              "Pakistan",
              "Palau",
              "Panama",
              "PapuaNewGuinea",
              "ParacelIslands",
              "Paraguay",
              "Peru",
              "Philippines",
              "PitcairnIslands",
              "Poland",
              "Portugal",
              "PuertoRico",
              "Qatar",
              "Reunion",
              "Romania",
              "Russia",
              "Rwanda",
              "SaintHelena",
              "SaintKittsandNevis",
              "SaintLucia",
              "SaintPierreandMiquelon",
              "SaintVincentandtheGrenadines",
              "Samoa",
              "SanMarino",
              "SaoTomeandPrincipe",
              "SaudiArabia",
              "Senegal",
              "SerbiaandMontenegro",
              "Seychelles",
              "SierraLeone",
              "Singapore",
              "Slovakia",
              "Slovenia",
              "SolomonIslands",
              "Somalia",
              "SouthAfrica",
              "SouthGeorgiaandtheSouthSandwichIslands",
              "Spain",
              "SpratlyIslands",
              "SriLanka",
              "Sudan",
              "Suriname",
              "Svalbard",
              "Swaziland",
              "Sweden",
              "Switzerland",
              "Syria",
              "Taiwan",
              "Tajikistan",
              "Tanzania",
              "Thailand",
              "TimorLeste",
              "Togo",
              "Tokelau",
              "Tonga",
              "TrinidadandTobago",
              "TromelinIsland",
              "Tunisia",
              "Turkey",
              "Turkmenistan",
              "TurksandCaicosIslands",
              "Tuvalu",
              "Uganda",
              "Ukraine",
              "UnitedArabEmirates",
              "UnitedKingdom",
              "Uruguay",
              "Uzbekistan",
              "Vanuatu",
              "Venezuela",
              "Vietnam",
              "VirginIslands",
              "WakeIsland",
              "WallisandFutuna",
              "WestBank",
              "WesternSahara",
              "Yemen",
              "Zambia",
              "Zimbabwe"
            ],
            "type": "string"
          },
          "AccountNumber": {
            "description": "Bank account number.",
            "type": "string"
          },
          "RoutingNumber": {
            "description": "Bank routing number. If the bank is in Canada, the routing number should be provided as a zero followed by the three digit institution number, followed by the five digit transit number.",
            "type": "string"
          }
        }
      },
      "BankAccountQuickDepositMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Quick deposit unique identifier.",
            "type": "integer"
          },
          "EntryDate": {
            "format": "date",
            "description": "Date the quick deposit was recorded.",
            "type": "string"
          },
          "Memo": {
            "description": "Memo associated with the quick deposit, if applicable.",
            "type": "string"
          },
          "TotalAmount": {
            "format": "double",
            "description": "Amount included in the quick deposit.",
            "type": "number"
          },
          "AccountingEntity": {
            "$ref": "#/components/schemas/AccountingEntityMessage"
          },
          "OffsetGLAccountId": {
            "format": "int32",
            "description": "Offsetting general ledger account identifier. The offsetting general ledger account acts as a label for this deposit.",
            "type": "integer"
          }
        }
      },
      "BankAccountQuickDepositSaveMessage": {
        "required": [
          "EntryDate",
          "OffsetGLAccountId",
          "Amount",
          "AccountingEntity"
        ],
        "type": "object",
        "properties": {
          "EntryDate": {
            "format": "date",
            "description": "Date the quick deposit was recorded.",
            "type": "string"
          },
          "OffsetGLAccountId": {
            "format": "int32",
            "description": "Offsetting general ledger account identifier. The offsetting general ledger account acts as a label for this deposit. For instance, if you're depositing money collected from a washing machine, you might select the \"Laundry income\" account.",
            "type": "integer"
          },
          "Amount": {
            "format": "double",
            "description": "Amount to be deposited.",
            "type": "number"
          },
          "Memo": {
            "description": "Memo associated with the quick deposit.",
            "type": "string"
          },
          "AccountingEntity": {
            "$ref": "#/components/schemas/AccountingEntitySaveMessage"
          }
        }
      },
      "BankAccountQuickDepositSearchMessage": {
        "required": ["StartDate", "EndDate"],
        "type": "object",
        "properties": {
          "StartDate": {
            "format": "date",
            "description": "Filters results to any transactions that were recorded on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "EndDate": {
            "format": "date",
            "description": "Filters results to any transactions that were recorded on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          }
        }
      },
      "BankAccountSearchMessage": {
        "description": "This object represents a filter for a bank account search.",
        "type": "object",
        "properties": {
          "BankAccountStatus": {
            "description": "Filters results by the status of the bank account. If no status is specified, bank accounts with any status will be returned.",
            "enum": ["Active", "InActive"],
            "type": "string"
          },
          "BankName": {
            "description": "Filters results to any bank account whose name *contains* the specified value.",
            "type": "string"
          }
        }
      },
      "BankAccountTransactionMessage": {
        "description": "Bank account transaction.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Transaction unique identifier.",
            "type": "integer"
          },
          "EntryDate": {
            "format": "date",
            "description": "Date of the transaction.",
            "type": "string"
          },
          "TransactionType": {
            "description": "Type of transaction.",
            "enum": [
              "Bill",
              "Check",
              "Charge",
              "Payment",
              "Credit",
              "Refund",
              "ApplyDeposit",
              "ElectronicFundsTransfer",
              "Other",
              "Deposit",
              "GeneralJournalEntry",
              "OwnerContribution",
              "ReversePayment",
              "ReverseElectronicFundsTransfer",
              "VendorCredit",
              "RentalApplicationFeePayment",
              "ReverseRentalApplicationFeePayment",
              "ReverseOwnerContribution",
              "VendorRefund",
              "UnreversedPayment",
              "UnreversedElectronicFundsTransfer",
              "UnreversedOwnerContribution",
              "UnreversedRentalApplicationFeePayment"
            ],
            "type": "string"
          },
          "CheckNumber": {
            "description": "Check number associated with the transaction, if applicable.",
            "type": "string"
          },
          "Memo": {
            "description": "Memo associated with the transaction, if applicable.",
            "type": "string"
          },
          "Amount": {
            "format": "double",
            "description": "The total amount of the transaction.",
            "type": "number"
          },
          "ReconciliationStatus": {
            "description": "Indicates the reconciliation status of the transaction.",
            "enum": ["UnReconciled", "Cleared", "Reconciled"],
            "type": "string"
          },
          "PaidBy": {
            "description": "The entity that made the payment.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaidByMessage"
            }
          },
          "PaidTo": {
            "description": "The entity that received the payment.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayeeMessage"
            }
          },
          "Balance": {
            "format": "double",
            "description": "The bank account balance after this transaction was applied.",
            "type": "number"
          }
        }
      },
      "BankAccountTransactionSearchMessage": {
        "required": ["StartDate", "EndDate"],
        "type": "object",
        "properties": {
          "SelectionEntityId": {
            "format": "int32",
            "description": "Filters results to any transaction containing journal lines for an entity associated with the specified entity id value. The id must be of the type specified in SelectionEntityType.",
            "type": "integer"
          },
          "SelectionEntityType": {
            "description": "Specifies the type of entity that SelectionEntityId refers to.",
            "enum": ["Company", "Rental", "RentalOwner", "Association"],
            "type": "string"
          },
          "StartDate": {
            "format": "date",
            "description": "Filters results to any transactions that were recorded on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "EndDate": {
            "format": "date",
            "description": "Filters results to any transactions that were recorded on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          }
        }
      },
      "BankAccountTransferAccountingEntitySaveMessage": {
        "required": ["Id", "AccountingEntityType"],
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The accounting entity unique identifier.",
            "type": "integer"
          },
          "AccountingEntityType": {
            "description": "The type of accounting entity.",
            "enum": ["Association", "Rental", "Company"],
            "type": "string"
          }
        }
      },
      "BankAccountTransferMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Transfer unique identifier.",
            "type": "integer"
          },
          "EntryDate": {
            "format": "date",
            "description": "Date the transfer was recorded.",
            "type": "string"
          },
          "Memo": {
            "description": "Memo associated with the transfer, if applicable.",
            "type": "string"
          },
          "AccountingEntity": {
            "$ref": "#/components/schemas/AccountingEntityMessage"
          },
          "TotalAmount": {
            "format": "double",
            "description": "Total amount of the transfer.",
            "type": "number"
          },
          "TransferToBankAccountId": {
            "format": "int32",
            "description": "Bank account identifier the money was transferred to.",
            "type": "integer"
          }
        }
      },
      "BankAccountTransferSaveMessage": {
        "required": [
          "EntryDate",
          "TransferToBankAccountId",
          "TotalAmount",
          "AccountingEntity"
        ],
        "type": "object",
        "properties": {
          "EntryDate": {
            "format": "date",
            "description": "The date the transfer was recorded.",
            "type": "string"
          },
          "TransferToBankAccountId": {
            "format": "int32",
            "description": "Bank account identifier the money will be transferred to.",
            "type": "integer"
          },
          "TotalAmount": {
            "format": "double",
            "description": "Total amount to transfer.",
            "type": "number"
          },
          "Memo": {
            "description": "Memo associated with the transfer, if applicable.",
            "type": "string"
          },
          "AccountingEntity": {
            "$ref": "#/components/schemas/BankAccountTransferAccountingEntitySaveMessage"
          }
        }
      },
      "BankAccountTransferSearchMessage": {
        "required": ["StartDate", "EndDate"],
        "type": "object",
        "properties": {
          "StartDate": {
            "format": "date",
            "description": "Filters results to any transfers that were recorded on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "EndDate": {
            "format": "date",
            "description": "Filters results to any transfers that were recorded on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          }
        }
      },
      "BankAccountWithdrawalMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Withdrawal unique identifier.",
            "type": "integer"
          },
          "EntryDate": {
            "format": "date",
            "description": "Date the withdrawal was recorded.",
            "type": "string"
          },
          "Memo": {
            "description": "Memo associated with the withdrawal, if applicable.",
            "type": "string"
          },
          "TotalAmount": {
            "format": "double",
            "description": "Total amount of the withdrawal.",
            "type": "number"
          },
          "AccountingEntity": {
            "$ref": "#/components/schemas/AccountingEntityMessage"
          },
          "OffsetGLAccountId": {
            "format": "int32",
            "description": "Offsetting general ledger account identifier. The offsetting GL account acts as a label for this withdrawal. For instance, if you're withdrawing money due to a bank fee, you might select the \"Bank fees\" expense account.",
            "type": "integer"
          }
        }
      },
      "BankAccountWithdrawalSaveMessage": {
        "required": [
          "EntryDate",
          "OffsetGLAccountId",
          "Amount",
          "AccountingEntity"
        ],
        "type": "object",
        "properties": {
          "EntryDate": {
            "format": "date",
            "description": "Date the withdrawal was recorded.",
            "type": "string"
          },
          "OffsetGLAccountId": {
            "format": "int32",
            "description": "Offsetting general ledger account identifier. The offsetting general ledger account acts as a label for this withdrawal. For instance, if you're withdrawing money due to a bank fee, you might select the \"Bank fees\" expense account.",
            "type": "integer"
          },
          "Amount": {
            "format": "double",
            "description": "Withdrawal amount.",
            "type": "number"
          },
          "Memo": {
            "description": "Memo associated with the withdrawal, if applicable.",
            "type": "string"
          },
          "AccountingEntity": {
            "$ref": "#/components/schemas/AccountingEntitySaveMessage"
          }
        }
      },
      "BankAccountWithdrawalSearchMessage": {
        "required": ["StartDate", "EndDate"],
        "type": "object",
        "properties": {
          "StartDate": {
            "format": "date",
            "description": "Filters results to any transactions that were recorded on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "EndDate": {
            "format": "date",
            "description": "Filters results to any transactions that were recorded on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          }
        }
      },
      "BillAccountingEntitySaveMessage": {
        "description": "Accounting entity associated with the line item.",
        "required": ["Id", "AccountingEntityType"],
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The unique identifier for an accounting entity.",
            "type": "integer"
          },
          "AccountingEntityType": {
            "description": "The accounting entity type.",
            "enum": ["Association", "Rental"],
            "type": "string"
          }
        }
      },
      "BillLineMessage": {
        "description": "Bill line items.",
        "type": "object",
        "properties": {
          "AccountingEntity": {
            "$ref": "#/components/schemas/AccountingEntityMessage"
          },
          "GLAccount": {
            "$ref": "#/components/schemas/GLAccountMessage"
          },
          "Amount": {
            "format": "double",
            "description": "Line item amount.",
            "type": "number"
          },
          "Markup": {
            "$ref": "#/components/schemas/BillMarkupMessage"
          },
          "Memo": {
            "description": "Description of the line item.",
            "type": "string"
          }
        }
      },
      "BillLineSaveMessage": {
        "description": "Bill line item.",
        "required": ["AccountingEntity", "GlAccountId", "Amount"],
        "type": "object",
        "properties": {
          "AccountingEntity": {
            "$ref": "#/components/schemas/BillAccountingEntitySaveMessage"
          },
          "GlAccountId": {
            "format": "int32",
            "description": "The general ledger account identifier under which the line item amount will be recorded. The following general ledger accounts are not valid: Accounts Payable, Accounts Receivable, Undeposited Funds or any general leger account referencing a bank account.",
            "type": "integer"
          },
          "Amount": {
            "format": "double",
            "description": "Line item amount.",
            "type": "number"
          },
          "Markup": {
            "$ref": "#/components/schemas/BillMarkupSaveMessage"
          },
          "Memo": {
            "description": "Memo for the line item. The value cannot exceed 240 characters.",
            "type": "string"
          }
        }
      },
      "BillMarkupMessage": {
        "description": "Bill mark up.",
        "type": "object",
        "properties": {
          "Amount": {
            "format": "double",
            "description": "The mark up amount.",
            "type": "number"
          },
          "Type": {
            "description": "The markup type.",
            "enum": ["Percent", "Amount"],
            "type": "string"
          }
        }
      },
      "BillMarkupSaveMessage": {
        "description": "Bill mark up.",
        "required": ["Amount", "Type"],
        "type": "object",
        "properties": {
          "Amount": {
            "format": "double",
            "description": "The mark up amount. The value should be relative to the markup `Type`. If the mark up `Type` is `Percent` the value cannot exceed 100.",
            "type": "number"
          },
          "Type": {
            "description": "The markup type.",
            "enum": ["Percent", "Amount"],
            "type": "string"
          }
        }
      },
      "BillMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Bill unique identifier.",
            "type": "integer"
          },
          "Date": {
            "format": "date",
            "description": "Date of the bill.",
            "type": "string"
          },
          "DueDate": {
            "format": "date",
            "description": "The date that payment is due to the vendor.",
            "type": "string"
          },
          "PaidDate": {
            "format": "date",
            "description": "The date that payment was made to the vendor.",
            "type": "string"
          },
          "Memo": {
            "description": "A description of what the invoice was for.",
            "type": "string"
          },
          "VendorId": {
            "format": "int32",
            "description": "Unique identifier of the vendor who submitted the bill.",
            "type": "integer"
          },
          "WorkOrderId": {
            "format": "int32",
            "description": "Unique identifier of the work order associated with this bill.",
            "type": "integer"
          },
          "ReferenceNumber": {
            "description": "The invoice or reference number that the vendor assigned to the invoice.",
            "type": "string"
          },
          "Lines": {
            "description": "A collection of line items associated with the bill.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BillLineMessage"
            }
          }
        }
      },
      "BillPaymentAccountingEntityMessage": {
        "description": "The accounting entity associated with the payment line item.",
        "type": "object",
        "properties": {
          "AccountingEntityType": {
            "description": "Indicates the type of the accounting entity.",
            "enum": ["Association", "Rental", "Company"],
            "type": "string"
          },
          "Id": {
            "format": "int32",
            "description": "The accounting entity unique identifier.",
            "type": "integer"
          }
        }
      },
      "BillPaymentLineMessage": {
        "description": "Payment line items.",
        "type": "object",
        "properties": {
          "AccountingEntity": {
            "$ref": "#/components/schemas/BillPaymentAccountingEntityMessage"
          },
          "GLAccountId": {
            "format": "int32",
            "description": "The general ledger account the line item is allocated to.",
            "type": "integer"
          },
          "Amount": {
            "format": "double",
            "description": "Line item amount.",
            "type": "number"
          }
        }
      },
      "BillPaymentMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Bill payment unique identifier.",
            "type": "integer"
          },
          "BankAccountId": {
            "format": "int32",
            "description": "Unique identifier of the bank account that the payment was made from.",
            "type": "integer"
          },
          "EntryDate": {
            "format": "date",
            "description": "Date the payment was made.",
            "type": "string"
          },
          "Memo": {
            "description": "A high-level description of the payment.",
            "type": "string"
          },
          "CheckNumber": {
            "description": "Number of the check used to make the payment.",
            "type": "string"
          },
          "Lines": {
            "description": "A collection of payment line items.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BillPaymentLineMessage"
            }
          }
        }
      },
      "BillPostMessage": {
        "description": "This object represents a bill.",
        "required": ["Date", "DueDate", "VendorId", "Lines"],
        "type": "object",
        "properties": {
          "Date": {
            "format": "date",
            "description": "The date that an bill was received. This date typically corresponds with a Bill Received Date, Invoice Date, or Invoice Received Date from an invoice. The date must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "DueDate": {
            "format": "date",
            "description": "The date that payment is due to the vendor. The due date must be after the value in the `Date` field. The date must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "Memo": {
            "description": "A description of what the invoice was for. The value cannot exceed 245 characters.",
            "type": "string"
          },
          "VendorId": {
            "format": "int32",
            "description": "The unique identifier of the vendor or supplier who sent you an invoice.",
            "type": "integer"
          },
          "WorkOrderId": {
            "format": "int32",
            "description": "Unique identifier of the work order associated with this bill.",
            "type": "integer"
          },
          "ReferenceNumber": {
            "description": "The reference or invoice number that the vendor assigned to the invoice. The value cannot exceed 40 characters.",
            "type": "string"
          },
          "Lines": {
            "description": "A collection of line items associated with the bill.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BillLineSaveMessage"
            }
          }
        }
      },
      "BillPutMessage": {
        "description": "This object represents a bill.",
        "required": ["Date", "DueDate", "VendorId"],
        "type": "object",
        "properties": {
          "Date": {
            "format": "date",
            "description": "The date that an invoice was received. This date typically corresponds with a Bill Received Date, Invoice Date, or Invoice Received Date from an invoice. The date must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "DueDate": {
            "format": "date",
            "description": "The date that payment for a bill is due to the vendor. The date must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "Memo": {
            "description": "A description of what the invoice was for. The value cannot exceed 245 characters.",
            "type": "string"
          },
          "VendorId": {
            "format": "int32",
            "description": "The unique identifier of the vendor or supplier who sent you an invoice.",
            "type": "integer"
          },
          "ReferenceNumber": {
            "description": "The reference or invoice number that the vendor assigned to the invoice. The value cannot exceed 40 characters.",
            "type": "string"
          }
        }
      },
      "BillSearchMessage": {
        "type": "object",
        "properties": {
          "EntityId": {
            "format": "int32",
            "description": "Filters results to any bill containing line items associated with the specified entity identifier. This filter is used in conjunction with the `EntityType` field which must be set to the type of entity this identifier references.",
            "type": "integer"
          },
          "EntityType": {
            "description": "Specifies the type of entity that `EntityId` refers to. This field is required if `EntityId` is specified.",
            "enum": ["Rental", "RentalOwner", "Association"],
            "type": "string"
          },
          "VendorId": {
            "format": "int32",
            "description": "Filters results to bills associated with a specific vendor.",
            "type": "integer"
          },
          "ReferenceNumber": {
            "description": "Filters results to bills whose reference number contains the specified value.",
            "type": "string"
          },
          "PaidStatus": {
            "description": "Filters results by the bill's paid status. If no status is specified, bills with any status will be returned.",
            "enum": ["Paid", "Unpaid", "UncollectedMarkups"],
            "type": "string"
          },
          "FromPaidDate": {
            "format": "date",
            "description": "Filters results to any bill whose paid date is greater than or equal to the specified value.",
            "type": "string"
          },
          "ToPaidDate": {
            "format": "date",
            "description": "Filters results to any bill whose paid date is less than or equal to the specified value.",
            "type": "string"
          }
        }
      },
      "CheckPrintingInfoMessage": {
        "type": "object",
        "properties": {
          "EnableRemoteCheckPrinting": {
            "description": "Indicates whether remote check printing is enabled.",
            "type": "boolean"
          },
          "EnableLocalCheckPrinting": {
            "description": "Indicates whether local check printing is enabled.",
            "type": "boolean"
          },
          "CheckLayoutType": {
            "description": "The check layout type.",
            "enum": [
              "Voucher1StubBottomMemo1Signature",
              "Voucher2StubBottomMemo1Signature",
              "Voucher2StubBottomMemo2Signatures",
              "Voucher2StubTopMemo",
              "Voucher2StubsPrePrintedLayout"
            ],
            "type": "string"
          },
          "SignatureHeading": {
            "description": "The check signature heading.",
            "type": "string"
          },
          "FractionalNumber": {
            "description": "The fractional form of the routing number. Typically is used to identify the bank of the check in cases where the MICR is unreadable.",
            "type": "string"
          },
          "BankInformationLine1": {
            "description": "Bank information line 1.",
            "type": "string"
          },
          "BankInformationLine2": {
            "description": "Bank information line 2.",
            "type": "string"
          },
          "BankInformationLine3": {
            "description": "Bank information line 3.",
            "type": "string"
          },
          "BankInformationLine4": {
            "description": "Bank information line 4.",
            "type": "string"
          },
          "BankInformationLine5": {
            "description": "Bank information line 5.",
            "type": "string"
          },
          "CompanyInformationLine1": {
            "description": "Company information 1.",
            "type": "string"
          },
          "CompanyInformationLine2": {
            "description": "Company information 2.",
            "type": "string"
          },
          "CompanyInformationLine3": {
            "description": "Company information 3.",
            "type": "string"
          },
          "CompanyInformationLine4": {
            "description": "Company information 4.",
            "type": "string"
          },
          "CompanyInformationLine5": {
            "description": "Company information 5.",
            "type": "string"
          }
        }
      },
      "CheckPrintingInfoPostMessage": {
        "type": "object",
        "properties": {
          "EnableRemoteCheckPrinting": {
            "description": "Indicates whether remote check printing is enabled.",
            "type": "boolean"
          },
          "EnableLocalCheckPrinting": {
            "description": "Indicates whether local check printing is enabled.",
            "type": "boolean"
          },
          "CheckLayoutType": {
            "description": "The check layout type. Defaults to `Voucher2StubsPrePrintedLayout` if not specified.",
            "enum": [
              "Voucher1StubBottomMemo1Signature",
              "Voucher2StubBottomMemo1Signature",
              "Voucher2StubBottomMemo2Signatures",
              "Voucher2StubTopMemo",
              "Voucher2StubsPrePrintedLayout"
            ],
            "type": "string"
          },
          "SignatureHeading": {
            "description": "The signature heading. Defaults to \"VOID AFTER 90 DAYS\" if not specified.",
            "type": "string"
          },
          "FractionalNumber": {
            "description": "The fractional form of the routing number. Typically is used to identify the bank of the check in cases where the MICR is unreadable.",
            "type": "string"
          },
          "BankInformationLine1": {
            "description": "Bank information line 1.",
            "type": "string"
          },
          "BankInformationLine2": {
            "description": "Bank information line 2.",
            "type": "string"
          },
          "BankInformationLine3": {
            "description": "Bank information line 3.",
            "type": "string"
          },
          "BankInformationLine4": {
            "description": "Bank information line 4.",
            "type": "string"
          },
          "BankInformationLine5": {
            "description": "Bank information line 5.",
            "type": "string"
          },
          "CompanyInformationLine1": {
            "description": "Company information 1. Defaults to the company name from the account if not specified.",
            "type": "string"
          },
          "CompanyInformationLine2": {
            "description": "Company information 2. Defaults to the company address if not specified.",
            "type": "string"
          },
          "CompanyInformationLine3": {
            "description": "Company information 3. Defaults to the company address if not specified.",
            "type": "string"
          },
          "CompanyInformationLine4": {
            "description": "Company information 4. Defaults to the company address if not specified.",
            "type": "string"
          },
          "CompanyInformationLine5": {
            "description": "Company information 5. Defaults to the company address if not specified.",
            "type": "string"
          }
        }
      },
      "CheckPrintingInfoPutMessage": {
        "required": [
          "EnableRemoteCheckPrinting",
          "EnableLocalCheckPrinting",
          "CheckLayoutType"
        ],
        "type": "object",
        "properties": {
          "EnableRemoteCheckPrinting": {
            "description": "Indicates whether remote check printing is enabled.",
            "type": "boolean"
          },
          "EnableLocalCheckPrinting": {
            "description": "Indicates whether local check printing is enabled.",
            "type": "boolean"
          },
          "CheckLayoutType": {
            "description": "The check layout type.",
            "enum": [
              "Voucher1StubBottomMemo1Signature",
              "Voucher2StubBottomMemo1Signature",
              "Voucher2StubBottomMemo2Signatures",
              "Voucher2StubTopMemo",
              "Voucher2StubsPrePrintedLayout"
            ],
            "type": "string"
          },
          "SignatureHeading": {
            "description": "The signature heading.",
            "type": "string"
          },
          "FractionalNumber": {
            "description": "The fractional form of the routing number. Typically is used to identify the bank of the check in cases where the MICR is unreadable.",
            "type": "string"
          },
          "BankInformationLine1": {
            "description": "Bank information line 1.",
            "type": "string"
          },
          "BankInformationLine2": {
            "description": "Bank information line 2.",
            "type": "string"
          },
          "BankInformationLine3": {
            "description": "Bank information line 3.",
            "type": "string"
          },
          "BankInformationLine4": {
            "description": "Bank information line 4.",
            "type": "string"
          },
          "BankInformationLine5": {
            "description": "Bank information line 5.",
            "type": "string"
          },
          "CompanyInformationLine1": {
            "description": "Company information 1.",
            "type": "string"
          },
          "CompanyInformationLine2": {
            "description": "Company information 2.",
            "type": "string"
          },
          "CompanyInformationLine3": {
            "description": "Company information 3.",
            "type": "string"
          },
          "CompanyInformationLine4": {
            "description": "Company information 4.",
            "type": "string"
          },
          "CompanyInformationLine5": {
            "description": "Company information 5.",
            "type": "string"
          }
        }
      },
      "ContactDetailMessage": {
        "description": "Contact information.",
        "type": "object",
        "properties": {
          "FirstName": {
            "description": "Contact first name.",
            "type": "string"
          },
          "LastName": {
            "description": "Contact last name.",
            "type": "string"
          },
          "Email": {
            "description": "Contact email.",
            "type": "string"
          },
          "PhoneNumbers": {
            "$ref": "#/components/schemas/ContactDetailPhoneMessage"
          }
        }
      },
      "ContactDetailPhoneMessage": {
        "description": "Contact phone numbers.",
        "type": "object",
        "properties": {
          "Home": {
            "description": "Home phone number.",
            "type": "string"
          },
          "Work": {
            "description": "Work phone number.",
            "type": "string"
          },
          "Mobile": {
            "description": "Mobile phone number.",
            "type": "string"
          }
        }
      },
      "ContactDetailSaveMessage": {
        "description": "The contact details of the person who made the request.",
        "required": ["FirstName"],
        "type": "object",
        "properties": {
          "FirstName": {
            "description": "First name of the contact.",
            "type": "string"
          },
          "LastName": {
            "description": "Last name of the contact.",
            "type": "string"
          },
          "Email": {
            "description": "Email of the contact.",
            "type": "string"
          },
          "PhoneNumbers": {
            "$ref": "#/components/schemas/ContactDetailSavePhoneMessage"
          }
        }
      },
      "ContactDetailSavePhoneMessage": {
        "description": "Contact phone numbers.",
        "type": "object",
        "properties": {
          "Home": {
            "description": "Home phone number. If provided, the value must be between 10 and 20 characters, ideally formatted as `(123) 123-1234`.",
            "type": "string"
          },
          "Work": {
            "description": "Work phone number. If provided, the value must be between 10 and 20 characters, ideally formatted as `(123) 123-1234`.",
            "type": "string"
          },
          "Mobile": {
            "description": "Mobile phone number. If provided, the value must be between 10 and 20 characters, ideally formatted as `(123) 123-1234`.",
            "type": "string"
          }
        }
      },
      "ContactInfoMessage": {
        "description": "This is an object that represents contact info.",
        "type": "object",
        "properties": {
          "FirstName": {
            "description": "Contact first name.",
            "type": "string"
          },
          "LastName": {
            "description": "Contact last name.",
            "type": "string"
          },
          "Address": {
            "$ref": "#/components/schemas/AddressMessage"
          },
          "PhoneNumber": {
            "description": "Contact phone number.",
            "type": "string"
          }
        }
      },
      "ContactRequestTaskMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Request unique identifier.",
            "type": "integer"
          },
          "Category": {
            "$ref": "#/components/schemas/TaskCategoryResponseMessage"
          },
          "Title": {
            "description": "Request title.",
            "type": "string"
          },
          "Description": {
            "description": "Request description.",
            "type": "string"
          },
          "Property": {
            "$ref": "#/components/schemas/PropertyMessage"
          },
          "UnitId": {
            "format": "int32",
            "description": "The unit unique identifier associated with the request.",
            "type": "integer"
          },
          "ContactDetail": {
            "$ref": "#/components/schemas/ContactDetailMessage"
          },
          "AssignedToUserId": {
            "format": "int32",
            "description": "The unique identifier of the staff user assigned to the request.",
            "type": "integer"
          },
          "TaskStatus": {
            "description": "Request status.",
            "enum": ["New", "InProgress", "Completed", "Deferred", "Closed"],
            "type": "string"
          },
          "Priority": {
            "description": "Request priority.",
            "enum": ["Low", "Normal", "High"],
            "type": "string"
          },
          "DueDate": {
            "format": "date",
            "description": "Request due date.",
            "type": "string"
          },
          "CreatedDateTime": {
            "format": "date-time",
            "description": "The date and time the request was created.",
            "type": "string"
          },
          "LastUpdatedDateTime": {
            "format": "date-time",
            "description": "The date and time the request was last updated.",
            "type": "string"
          }
        }
      },
      "ContactRequestTaskPostMessage": {
        "required": [
          "Title",
          "AssignedToUserId",
          "TaskStatus",
          "Priority",
          "ContactDetail"
        ],
        "type": "object",
        "properties": {
          "Title": {
            "description": "Request title. The title can not exceed 127 characters.",
            "type": "string"
          },
          "Description": {
            "description": "Request description. The description can not exceed 65500 characters.",
            "type": "string"
          },
          "CategoryId": {
            "format": "int32",
            "description": "The category identifier to assign the request.",
            "type": "integer"
          },
          "SubCategoryId": {
            "format": "int32",
            "description": "The subcategory identifier to assign the request.",
            "type": "integer"
          },
          "PropertyId": {
            "format": "int32",
            "description": "The unique identifier of property associated with the request. The assigned property must be active.",
            "type": "integer"
          },
          "UnitId": {
            "format": "int32",
            "description": "The unique identifier of the unit associated with the request. The unit must be associated with the `PropertyId` specified.",
            "type": "integer"
          },
          "AssignedToUserId": {
            "format": "int32",
            "description": "The unique identifier of the staff user assigned to the request. The user must be a `Staff` user type.",
            "type": "integer"
          },
          "TaskStatus": {
            "description": "Request status.",
            "enum": ["New", "InProgress", "Completed", "Deferred", "Closed"],
            "type": "string"
          },
          "Priority": {
            "description": "Request priority.",
            "enum": ["Low", "Normal", "High"],
            "type": "string"
          },
          "DueDate": {
            "format": "date",
            "description": "Request due date. The date must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "ContactDetail": {
            "$ref": "#/components/schemas/ContactDetailSaveMessage"
          }
        }
      },
      "ContactRequestTaskPutMessage": {
        "required": [
          "Title",
          "AssignedToUserId",
          "TaskStatus",
          "Priority",
          "ContactDetail"
        ],
        "type": "object",
        "properties": {
          "Title": {
            "description": "Request title. The title can not exceed 127 characters.",
            "type": "string"
          },
          "Message": {
            "description": "Description of the request update. The message can not exceed 65500 characters.",
            "type": "string"
          },
          "CategoryId": {
            "format": "int32",
            "description": "The category identifier to assign the request.",
            "type": "integer"
          },
          "SubCategoryId": {
            "format": "int32",
            "description": "The subcategory identifier to assign the request.",
            "type": "integer"
          },
          "PropertyId": {
            "format": "int32",
            "description": "The unique identifier of property associated with the request. The assigned property must be active.",
            "type": "integer"
          },
          "UnitId": {
            "format": "int32",
            "description": "The unique identifier of the unit associated with the request. The unit must be associated with the `PropertyId` specified.",
            "type": "integer"
          },
          "AssignedToUserId": {
            "format": "int32",
            "description": "The unique identifier of the staff user assigned to the request. The user must be a `Staff` user type.",
            "type": "integer"
          },
          "TaskStatus": {
            "description": "Request status.",
            "enum": ["New", "InProgress", "Completed", "Deferred", "Closed"],
            "type": "string"
          },
          "Priority": {
            "description": "Request priority.",
            "enum": ["Low", "Normal", "High"],
            "type": "string"
          },
          "DueDate": {
            "format": "date",
            "description": "Request due date. The date must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "ContactDetail": {
            "$ref": "#/components/schemas/ContactDetailSaveMessage"
          }
        }
      },
      "ContactRequestTaskSearchMessage": {
        "type": "object",
        "properties": {
          "EntityType": {
            "description": "Specifies the type of entity that the `EntityId` field refers to. This field is required if the `EntityId` field is populated.",
            "enum": ["Rental", "RentalOwner", "Association"],
            "type": "string"
          },
          "EntityId": {
            "format": "int32",
            "description": "Filters results to any task associated with the specified entity id value. The value must be of the type specified in the `EntityType` field.",
            "type": "integer"
          },
          "Statuses": {
            "description": "Filters results by the status of the task. If no status is specified, tasks with any status will be returned.",
            "type": "array",
            "items": {
              "enum": ["New", "InProgress", "Completed", "Deferred", "Closed"],
              "type": "string"
            }
          },
          "UnitId": {
            "format": "int32",
            "description": "Filters results to any task associated with the unit identifier.",
            "type": "integer"
          },
          "LastUpdatedFrom": {
            "format": "date",
            "description": "Filters results to any tasks were updated on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "LastUpdatedTo": {
            "format": "date",
            "description": "Filters results to any tasks were updated on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "DueDateFrom": {
            "format": "date",
            "description": "Filters results to any tasks with a due date on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "DueDateTo": {
            "format": "date",
            "description": "Filters results to any tasks with a due date on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "TaskCategoryId": {
            "format": "int32",
            "description": "Filters results to any tasks with the specified category identifier.",
            "type": "integer"
          },
          "Priorities": {
            "description": "Filters results to any tasks whose priority matches the specified values. If no priority is specified, tasks with any priority will be returned.",
            "type": "array",
            "items": {
              "enum": ["Low", "Normal", "High"],
              "type": "string"
            }
          },
          "AssignedToId": {
            "format": "int32",
            "description": "Filters results to any tasks that have been assigned to the specified staff user identifier.",
            "type": "integer"
          },
          "TaskTitle": {
            "description": "Filters results to any task whose title *contains* the specified value.",
            "type": "string"
          }
        }
      },
      "CosignerMessage": {
        "description": "This object represents a rental property cosigner.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Cosigner unique identifier.",
            "type": "integer"
          },
          "FirstName": {
            "description": "First name of the cosigner.",
            "type": "string"
          },
          "LastName": {
            "description": "Last name of the cosigner.",
            "type": "string"
          },
          "Email": {
            "description": "Email for the cosigner.",
            "type": "string"
          },
          "AlternateEmail": {
            "description": "Alternate Email for the cosigner.",
            "type": "string"
          },
          "PhoneNumbers": {
            "description": "List of phone numbers for the cosigner.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberMessage"
            }
          },
          "CreatedDateTime": {
            "format": "date-time",
            "description": "Created date of this cosigner record.",
            "type": "string"
          },
          "Address": {
            "$ref": "#/components/schemas/AddressMessage"
          },
          "AlternateAddress": {
            "$ref": "#/components/schemas/AddressMessage"
          },
          "MailingPreference": {
            "description": "Mailing preference for the cosigner.",
            "enum": ["PrimaryAddress", "AlternateAddress"],
            "type": "string"
          }
        }
      },
      "ElectronicPaymentsMessage": {
        "type": "object",
        "properties": {
          "DebitTransactionLimit": {
            "format": "double",
            "description": "Debit transaction limit",
            "type": "number"
          },
          "CreditTransactionLimit": {
            "format": "double",
            "description": "Credit transaction limit",
            "type": "number"
          },
          "DebitMonthlyLimit": {
            "format": "double",
            "description": "Monthly debt limit",
            "type": "number"
          },
          "CreditMonthlyLimit": {
            "format": "double",
            "description": "Monthly credit limit",
            "type": "number"
          },
          "ResidentEFTConvienceFeeAmount": {
            "format": "double",
            "description": "Fee charged per transaction by EFT",
            "type": "number"
          },
          "ResidentCreditCardConvenienceFeeAmount": {
            "format": "double",
            "description": "Fee charged per transaction by Credit Card",
            "type": "number"
          },
          "CreditCardServiceFeePercentage": {
            "format": "double",
            "description": "Fee charged for using a Credit Card in transactions",
            "type": "number"
          },
          "IsCreditCardServiceFeePaidByResident": {
            "description": "Whether the credit card service fee is paid by residents",
            "type": "boolean"
          }
        }
      },
      "EmergencyContactMessage": {
        "description": "This is an object that represents an emergency contact.",
        "type": "object",
        "properties": {
          "Name": {
            "description": "Emergency contact name",
            "type": "string"
          },
          "RelationshipDescription": {
            "description": "Emergency contact relationship to the person.",
            "type": "string"
          },
          "Phone": {
            "description": "Emergency contact phone number",
            "type": "string"
          },
          "Email": {
            "description": "Emergency contact email address.",
            "type": "string"
          }
        }
      },
      "GeneralLedgerJournalLineMessage": {
        "description": "This is an object that represents a line item for a journal entry.",
        "type": "object",
        "properties": {
          "GLAccount": {
            "$ref": "#/components/schemas/GLAccountMessage"
          },
          "Amount": {
            "format": "double",
            "description": "Amount of the line item.",
            "type": "number"
          },
          "IsCashPosting": {
            "description": "Indicates whether the line item is a cash posting.",
            "type": "boolean"
          },
          "ReferenceNumber": {
            "description": "Reference number for the line item.",
            "type": "string"
          },
          "Memo": {
            "description": "Memo for the line item.",
            "type": "string"
          },
          "AccountingEntity": {
            "$ref": "#/components/schemas/AccountingEntityMessage"
          }
        }
      },
      "GeneralLedgerJournalMessage": {
        "type": "object",
        "properties": {
          "Memo": {
            "description": "Memo associated with the journal.",
            "type": "string"
          },
          "Lines": {
            "description": "A collection of line items associated with the journal.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GeneralLedgerJournalLineMessage"
            }
          }
        }
      },
      "GeneralLedgerTransactionMessage": {
        "description": "This is an object that represents a financial transaction",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Transaction unique identifier.",
            "type": "integer"
          },
          "Date": {
            "format": "date",
            "description": "Date of the transaction.",
            "type": "string"
          },
          "TransactionType": {
            "description": "Type of transaction that occurred",
            "enum": [
              "Bill",
              "Check",
              "Charge",
              "Payment",
              "Credit",
              "Refund",
              "ApplyDeposit",
              "ElectronicFundsTransfer",
              "Other",
              "Deposit",
              "GeneralJournalEntry",
              "OwnerContribution",
              "ReversePayment",
              "ReverseElectronicFundsTransfer",
              "VendorCredit",
              "RentalApplicationFeePayment",
              "ReverseRentalApplicationFeePayment",
              "ReverseOwnerContribution",
              "VendorRefund",
              "UnreversedPayment",
              "UnreversedElectronicFundsTransfer",
              "UnreversedOwnerContribution",
              "UnreversedRentalApplicationFeePayment"
            ],
            "type": "string"
          },
          "TotalAmount": {
            "format": "double",
            "description": "Sum of all `Journal.Lines.Amount` entries in the transaction.",
            "type": "number"
          },
          "CheckNumber": {
            "description": "Check number associated with the transaction, if applicable.",
            "type": "string"
          },
          "UnitAgreement": {
            "$ref": "#/components/schemas/UnitAgreementMessage"
          },
          "UnitId": {
            "format": "int32",
            "description": "Unit unique identifier associated with the transaction, if applicable. Null if value is not set.",
            "type": "integer"
          },
          "UnitNumber": {
            "description": "Unit number associated with the transaction, if applicable. Null if value is not set.",
            "type": "string"
          },
          "PaymentDetail": {
            "$ref": "#/components/schemas/PaymentDetailMessage"
          },
          "Journal": {
            "$ref": "#/components/schemas/GeneralLedgerJournalMessage"
          }
        }
      },
      "GeneralLedgerTransactionSearchMessage": {
        "description": "An object that contains search criteria for retrieving general ledger transactions.",
        "required": ["StartDate", "EndDate", "GlAccountIds"],
        "type": "object",
        "properties": {
          "SelectionEntityId": {
            "format": "int32",
            "description": "Filters results to any transaction containing journal lines for an entity associated with the specified entity id value. The id must be of the type specified in SelectionEntityType.",
            "type": "integer"
          },
          "SelectionEntityType": {
            "description": "Specifies the type of entity that SelectionEntityId refers to.",
            "enum": ["Rental", "RentalOwner", "Association"],
            "type": "string"
          },
          "StartDate": {
            "format": "date",
            "description": "Filters results to any transaction whose date is greater than or equal to the specified value.",
            "type": "string"
          },
          "EndDate": {
            "format": "date",
            "description": "Filters results to any transaction whose date is less than or equal to the specified value.",
            "type": "string"
          },
          "GlAccountIds": {
            "description": "Filters results to transactions whose general ledger account belongs to the specified set of general ledger account ids.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      },
      "GLAccountBalanceItemMessage": {
        "description": "An object that represents an accounting entity's contribution to the general ledger account total balance.",
        "type": "object",
        "properties": {
          "Balance": {
            "format": "double",
            "description": "The sum of transactions associated with the general ledger account for the given accounting entity.",
            "type": "number"
          },
          "AccountingEntity": {
            "$ref": "#/components/schemas/AccountingEntityMessage"
          }
        }
      },
      "GLAccountBalanceMessage": {
        "description": "Represents the balance amount of a general ledger account.",
        "type": "object",
        "properties": {
          "TotalBalance": {
            "format": "double",
            "description": "The sum of transactions across all accounting entities (rental properties, association properties and your company) that are associated with the given general ledger account.",
            "type": "number"
          },
          "GLAccount": {
            "$ref": "#/components/schemas/GLAccountMessage"
          },
          "AccountingEntityBalances": {
            "description": "A collection of accounting entity balances that make up the `TotalBalance`.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GLAccountBalanceItemMessage"
            }
          }
        }
      },
      "GLAccountBalanceSearchMessage": {
        "description": "An object that contains search criteria for retrieving general ledger account balances.",
        "required": ["AccountingBasis", "AsOfDate"],
        "type": "object",
        "properties": {
          "EntityType": {
            "description": "Specifies the type of entity that `EntityId` field refers to.",
            "enum": ["Association", "Rental", "RentalOwner"],
            "type": "string"
          },
          "EntityId": {
            "format": "int32",
            "description": "Filters transactions used in calculating the general ledger account balances to only those containing journal lines for with the specified entity id value. The entity id specified must be of the type specified in `EntityType`.",
            "type": "integer"
          },
          "GLAccountIds": {
            "description": "Filters results to the specified set of general ledger account identifiers.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "AccountingBasis": {
            "description": "The methodology in which revenues and expenses are recognized when calculating the balances. Specifying `Cash` calculates balances based on when money changes hands. Specifying `Accrual` calculates balances based on the period in which the transaction originally happened.",
            "enum": ["Accrual", "Cash"],
            "type": "string"
          },
          "AsOfDate": {
            "format": "date",
            "type": "string"
          }
        }
      },
      "GLAccountMessage": {
        "description": "A message that represents a general ledger account.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "General ledger account unique identifier.",
            "type": "integer"
          },
          "Name": {
            "description": "Name of the general ledger account.",
            "type": "string"
          },
          "Description": {
            "description": "Description of the general ledger account.",
            "type": "string"
          },
          "Type": {
            "description": "Describes the type of general ledger account.",
            "enum": ["Asset", "Liability", "Equity", "Income", "Expense"],
            "type": "string"
          },
          "SubType": {
            "description": "Describes the subtype of the general ledger account.",
            "enum": [
              "CurrentAsset",
              "FixedAsset",
              "CurrentLiability",
              "LongTermLiability",
              "Equity",
              "Income",
              "NonOperatingIncome",
              "OperatingExpenses",
              "NonOperatingExpenses"
            ],
            "type": "string"
          },
          "IsDefaultGLAccount": {
            "description": "Indicates if the general ledger account is a default for auto populating fields.",
            "type": "boolean"
          },
          "IsContraAccount": {
            "description": "Indicates whether the account is a contra account.",
            "type": "boolean"
          },
          "IsBankAccount": {
            "description": "Indicates whether the account is a bank account.",
            "type": "boolean"
          },
          "CashFlowClassification": {
            "description": "Describes the cash flow classification for the general ledger account.",
            "enum": [
              "OperatingActivities",
              "InvestingActivities",
              "FinancingActivities"
            ],
            "type": "string"
          },
          "ExcludeFromCashBalances": {
            "description": "Indicates whether transactions associated with the account should be excluded from cash balances.",
            "type": "boolean"
          },
          "SubAccounts": {
            "description": "Children general ledger accounts. The relationship only goes one level deep.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GLAccountMessage"
            }
          }
        }
      },
      "GLAccountsSearchMessage": {
        "description": "Search Message for GLAccount queries",
        "type": "object",
        "properties": {
          "AccountTypes": {
            "description": "Filters results by the specified general ledger account types.",
            "type": "array",
            "items": {
              "enum": ["Asset", "Liability", "Equity", "Income", "Expense"],
              "type": "string"
            }
          }
        }
      },
      "GLTransactionMessageV1": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "General ledger transaction unique identifier.",
            "type": "integer"
          },
          "Amount": {
            "format": "double",
            "description": "General ledger transaction amount.",
            "type": "number"
          },
          "CheckNumber": {
            "description": "General ledger transaction check number.",
            "type": "string"
          },
          "EntryDate": {
            "format": "date",
            "description": "Date the transaction was made.",
            "type": "string"
          },
          "Memo": {
            "description": "General ledger transaction memo.",
            "type": "string"
          }
        }
      },
      "InternalTransactionStatusMessage": {
        "description": "This object represents the status for internal transactions",
        "type": "object",
        "properties": {
          "IsPending": {
            "description": "Indicates whether the transaction is pending processing.",
            "type": "boolean"
          },
          "ResultDate": {
            "format": "date",
            "description": "The date the transaction was processed.",
            "type": "string"
          },
          "ResultCode": {
            "description": "The result code of the transaction.",
            "type": "string"
          }
        }
      },
      "JournalLineMessage": {
        "description": "This is an object that represents a line item for a journal entry.",
        "type": "object",
        "properties": {
          "GLAccount": {
            "$ref": "#/components/schemas/GLAccountMessage"
          },
          "Amount": {
            "format": "double",
            "description": "Amount of the line item.",
            "type": "number"
          },
          "IsCashPosting": {
            "description": "Indicates whether the line item is a cash posting.",
            "type": "boolean"
          },
          "ReferenceNumber": {
            "description": "Reference number for the line item.",
            "type": "string"
          },
          "Memo": {
            "description": "Memo for the line item.",
            "type": "string"
          },
          "PropertyId": {
            "format": "int32",
            "description": "PropertyId associated with the line item.",
            "type": "integer"
          }
        }
      },
      "JournalMessage": {
        "type": "object",
        "properties": {
          "Memo": {
            "description": "Memo associated with the journal.",
            "type": "string"
          },
          "Lines": {
            "description": "A collection of line items associated with the journal.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JournalLineMessage"
            }
          }
        }
      },
      "LastUpdatedByUserMessage": {
        "description": "Last updated details.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "User unique identifier.",
            "type": "integer"
          },
          "FirstName": {
            "description": "User first name.",
            "type": "string"
          },
          "LastName": {
            "description": "User last name.",
            "type": "string"
          },
          "Href": {
            "description": "A link to the user resource.",
            "type": "string"
          },
          "UpdatedDateTime": {
            "format": "date-time",
            "description": "The date and time the note was last updated.",
            "type": "string"
          }
        }
      },
      "LeaseAccountDetailMessage": {
        "description": "This is an object that represents lease financial details.",
        "type": "object",
        "properties": {
          "SecurityDeposit": {
            "format": "double",
            "description": "Security deposit for the lease. Null if no security deposit exists.",
            "type": "number"
          },
          "Rent": {
            "format": "double",
            "description": "Rent for the lease. Null if no rent exists.",
            "type": "number"
          }
        }
      },
      "LeaseChargeLineMessage": {
        "description": "This is an object that represents a line item on a lease charge",
        "required": ["Amount", "GLAccountId"],
        "type": "object",
        "properties": {
          "Amount": {
            "format": "double",
            "description": "Line item amount.",
            "type": "number"
          },
          "GLAccountId": {
            "format": "int32",
            "description": "The general ledger account identifier under which the line item amount will be recorded.",
            "type": "integer"
          },
          "ReferenceNumber": {
            "description": "Reference number for the line item. The value cannot exceed 30 characters.",
            "type": "string"
          }
        }
      },
      "LeaseChargeMessage": {
        "description": "This is an object that represents a charge related to a lease",
        "type": "object",
        "properties": {
          "Date": {
            "format": "date",
            "description": "Date of the charge. The date must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "Memo": {
            "description": "Memo associated with the charge. The value cannot exceed 65 characters.",
            "type": "string"
          },
          "Lines": {
            "description": "A collection of line items included in the charge. At least one line item is required.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeaseChargeLineMessage"
            }
          }
        }
      },
      "LeaseCosignerPostMessage": {
        "description": "This object represents a rental lease cosigner.",
        "required": ["FirstName", "LastName"],
        "type": "object",
        "properties": {
          "FirstName": {
            "description": "First name of the cosigner.",
            "type": "string"
          },
          "LastName": {
            "description": "Last name of the cosigner.",
            "type": "string"
          },
          "Email": {
            "description": "Email for the cosigner.",
            "type": "string"
          },
          "AlternateEmail": {
            "description": "Alternate Email for the cosigner.",
            "type": "string"
          },
          "PhoneNumbers": {
            "$ref": "#/components/schemas/PhoneNumbersMessage"
          },
          "Address": {
            "$ref": "#/components/schemas/SaveAddressMessage"
          },
          "AlternateAddress": {
            "$ref": "#/components/schemas/SaveAddressMessage"
          },
          "MailingPreference": {
            "description": "Mailing preferences for the cosigner. If an alternate address exists and this value is not provided then the primary address will be set as the preferred address.",
            "enum": ["PrimaryAddress", "AlternateAddress"],
            "type": "string"
          }
        }
      },
      "LeaseLedgerCreditLinePostMessage": {
        "description": "Credit line item.",
        "required": ["Amount", "GlAccountId"],
        "type": "object",
        "properties": {
          "Amount": {
            "format": "double",
            "description": "Line item amount.",
            "type": "number"
          },
          "GlAccountId": {
            "format": "int32",
            "description": "The general ledger account identifier under which the line item amount will be recorded. The account must be a liability or income type.",
            "type": "integer"
          }
        }
      },
      "LeaseLedgerCreditPostMessage": {
        "required": ["Date", "CreditType", "Lines"],
        "type": "object",
        "properties": {
          "Date": {
            "format": "date",
            "description": "Date of the transaction. The date must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "Memo": {
            "description": "Description of the transaction. The value cannot exceed 65 characters.",
            "type": "string"
          },
          "CreditType": {
            "description": "Indicates how the credit should be applied.\r\n<ul><li>WaiveUnpaid - This credit type allows for reversing one or more charges without losing record of what has changed.</li><li>Exchange - This credit type allows for one of the following: 1) Reimburse a resident for a out-of-pocket expense, 2) Compensate for a service, 3) Write-off a resident balance considered uncollectable.</li><li>PreviouslyDeposited - This credit type allows for issuing a credit against payments that have already been deposited.</li></ul>",
            "enum": ["WaiveUnpaid", "Exchange", "PreviouslyDeposited"],
            "type": "string"
          },
          "OffsettingGLAccountId": {
            "format": "int32",
            "description": "Sets the offsetting general ledger account identifier for the credit.\r\n<br />This value must be provided when the `CreditType` field is set to `Exchange` or `PreviouslyDeposited`.\r\n<br />When the `CreditType` is `Exchange` this must be an *expense* general ledger account type.\r\n<br />When the `CreditType` is `PreviouslyDeposited` this must be an *equity* general ledger account type.",
            "type": "integer"
          },
          "Lines": {
            "description": "A collection of line items included in the credit. At least one line item is required.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeaseLedgerCreditLinePostMessage"
            }
          }
        }
      },
      "LeaseLedgerPaymentLineSaveMessage": {
        "description": "This is an object that represents a line item on a lease ledger payment",
        "required": ["Amount", "GLAccountId"],
        "type": "object",
        "properties": {
          "Amount": {
            "format": "double",
            "description": "Amount of the line item.",
            "type": "number"
          },
          "GLAccountId": {
            "format": "int32",
            "description": "The general ledger account identifier under which the line item amount will be recorded.",
            "type": "integer"
          }
        }
      },
      "LeaseLedgerPaymentPostMessage": {
        "description": "This is an object that represents a Payment made in a particular lease ledger.",
        "required": ["Date", "PaymentMethod", "SendEmailReceipt", "Lines"],
        "type": "object",
        "properties": {
          "Date": {
            "format": "date",
            "description": "The date of the transaction. The date must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "PaymentMethod": {
            "description": "The payment method used for the transaction.",
            "enum": [
              "Check",
              "Cash",
              "MoneyOrder",
              "CashierCheck",
              "DirectDeposit",
              "CreditCard",
              "ElectronicPayment"
            ],
            "type": "string"
          },
          "PayeeUserId": {
            "format": "int32",
            "description": "The payee's user unique identifier.",
            "type": "integer"
          },
          "Memo": {
            "description": "A brief note describing the reason for the payment. The value cannot exceed 65 characters.",
            "type": "string"
          },
          "ReferenceNumber": {
            "description": "The reference Number of the transaction. The value cannot exceed 30 characters.",
            "type": "string"
          },
          "SendEmailReceipt": {
            "description": "An indicator for whether or not to send an email receipt to the payee. If the payee does not have an email address set, no email will be sent.",
            "type": "boolean"
          },
          "Lines": {
            "description": "A collection of line items included in the payment. At least one line item is required.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeaseLedgerPaymentLineSaveMessage"
            }
          }
        }
      },
      "LeaseMessage": {
        "description": "This object represents a rental property lease.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Lease unique identifier.",
            "type": "integer"
          },
          "PropertyId": {
            "format": "int32",
            "description": "Rental property unique identifier.",
            "type": "integer"
          },
          "UnitId": {
            "format": "int32",
            "description": "Unit unique identifier.",
            "type": "integer"
          },
          "UnitNumber": {
            "description": "Unit number specified in the lease.",
            "type": "string"
          },
          "LeaseFromDate": {
            "format": "date",
            "description": "Start date of the lease.",
            "type": "string"
          },
          "LeaseToDate": {
            "format": "date",
            "description": "End date of the lease.",
            "type": "string"
          },
          "LeaseType": {
            "description": "Describes the type of lease.",
            "enum": ["None", "Fixed", "FixedWithRollover", "AtWill"],
            "type": "string"
          },
          "LeaseStatus": {
            "description": "Indicates the status of the lease.",
            "enum": ["Active", "Past", "Future"],
            "type": "string"
          },
          "IsEvictionPending": {
            "description": "Indicates whether the lease has an eviction pending.",
            "type": "boolean"
          },
          "TermType": {
            "description": "Describes the term type of the lease.",
            "enum": ["MonthToMonth", "Standard", "Owner"],
            "type": "string"
          },
          "RenewalOfferStatus": {
            "description": "Describes the status of the renewal offer. Null if no renewal offer exists.",
            "enum": [
              "NotSet",
              "NotStarted",
              "Generated",
              "Declined",
              "Renewed",
              "Draft",
              "Unsigned",
              "PartiallySigned",
              "Countersign",
              "Activated",
              "Sent",
              "Accepted"
            ],
            "type": "string"
          },
          "CurrentTenants": {
            "description": "List of the current tenants on the lease.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TenantMessage"
            }
          },
          "CurrentNumberOfOccupants": {
            "format": "int32",
            "description": "Count of current tenants.",
            "type": "integer"
          },
          "AccountDetails": {
            "$ref": "#/components/schemas/LeaseAccountDetailMessage"
          },
          "Cosigners": {
            "description": "List of the cosigners on the lease.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CosignerMessage"
            }
          },
          "AutomaticallyMoveOutTenants": {
            "description": "Indicates whether to automatically move out all tenants assigned to the lease and set the lease status to past when the lease ends.",
            "type": "boolean"
          },
          "CreatedDateTime": {
            "format": "date-time",
            "description": "Date and time the lease was created.",
            "type": "string"
          },
          "MoveOutData": {
            "description": "Move out data of lease",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeaseMoveOutDataMessage"
            }
          },
          "PaymentDueDay": {
            "format": "int32",
            "description": "Day of the month payment is due.",
            "type": "integer"
          }
        }
      },
      "LeaseMoveOutDataMessage": {
        "type": "object",
        "properties": {
          "TenantId": {
            "format": "int32",
            "description": "Tenant unique identifier.",
            "type": "integer"
          },
          "MoveOutDate": {
            "format": "date",
            "description": "Date the tenant(s) will move out of the leased unit.",
            "type": "string"
          },
          "NoticeGivenDate": {
            "format": "date",
            "description": "Date the tenant(s) gave their move out notice.",
            "type": "string"
          }
        }
      },
      "LeaseOutstandingBalanceMessage": {
        "type": "object",
        "properties": {
          "LeaseId": {
            "format": "int32",
            "description": "Lease unique identifier.",
            "type": "integer"
          },
          "PropertyId": {
            "format": "int32",
            "description": "Property unique identifier.",
            "type": "integer"
          },
          "UnitId": {
            "format": "int32",
            "description": "Property unit unique identifier.",
            "type": "integer"
          },
          "Balance0To30Days": {
            "format": "double",
            "description": "Outstanding balance due from within the last 30 days.",
            "type": "number"
          },
          "Balance31To60Days": {
            "format": "double",
            "description": "Outstanding balance due from within 31 to 60 days ago.",
            "type": "number"
          },
          "Balance61To90Days": {
            "format": "double",
            "description": "Outstanding balance due from within 61 to 90 days ago.",
            "type": "number"
          },
          "BalanceOver90Days": {
            "format": "double",
            "description": "Outstanding balance due from over 90 days ago.",
            "type": "number"
          },
          "TotalBalance": {
            "format": "double",
            "description": "Total outstanding balance due.",
            "type": "number"
          },
          "Balances": {
            "description": "Breakdown of outstanding balance due by general ledger account.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OutstandingBalancesLineMessage"
            }
          },
          "PastDueEmailSentDate": {
            "format": "date-time",
            "description": "Date of notification for outstanding balance.",
            "type": "string"
          },
          "EvictionPendingDate": {
            "format": "date",
            "description": "Date of notification for pending eviction.",
            "type": "string"
          },
          "IsNoticeGiven": {
            "description": "Indicates if notice was sent.",
            "type": "boolean"
          }
        }
      },
      "LeaseOutstandingBalanceSearchMessage": {
        "type": "object",
        "properties": {
          "EntityType": {
            "enum": ["Rental", "RentalOwner"],
            "type": "string"
          },
          "EntityId": {
            "format": "int32",
            "type": "integer"
          },
          "LeaseStatuses": {
            "type": "array",
            "items": {
              "enum": ["Active", "Past", "Future"],
              "type": "string"
            }
          },
          "LeaseIds": {
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "PastDueEmail": {
            "enum": ["NoEmailAddress", "Sent"],
            "type": "string"
          },
          "BalanceDuration": {
            "enum": [
              "TotalBalance",
              "Balance0to30Days",
              "Balance31to60Days",
              "Balance61to90Days",
              "BalanceOver90Days"
            ],
            "type": "string"
          },
          "EvictionStatus": {
            "enum": ["NotEvictionPending", "EvictionPending"],
            "type": "string"
          }
        }
      },
      "LeasePostMessage": {
        "required": [
          "LeaseType",
          "UnitId",
          "LeaseFromDate",
          "SendWelcomeEmail",
          "Tenants"
        ],
        "type": "object",
        "properties": {
          "LeaseType": {
            "description": "Describes the type of lease.<br /><br />\r\n`AtWill` leases are month-to-month leases. Setting a lease as at will tells Buildium when the tenant's lease initially started, but since there is no lease end date, Buildium will never move the lease to expired, and it will continue to post any automatic transactions (like recurring monthly rent charges or late fees) until you manually end the lease.\r\n<br /><br />\r\n`Fixed` leases are leases that have specific start and end dates.When the end date occurs, the lease will move from active to expired, and any transactions set to post automatically(like recurring monthly rent charges or late fees) will stop posting.\r\n<br /><br />\r\n`FixedWithRollover` leases are similar to fixed leases, but instead of Buildium moving this lease to expired as of the end date, it will move the lease to an at will status, which tells Buildium to continue posting monthly rent charges, late fees for you until you manually end the lease.",
            "enum": ["Fixed", "FixedWithRollover", "AtWill"],
            "type": "string"
          },
          "UnitId": {
            "format": "int32",
            "description": "Unit unique identifier associated with the lease.",
            "type": "integer"
          },
          "LeaseFromDate": {
            "format": "date",
            "description": "Start date of the lease.",
            "type": "string"
          },
          "LeaseToDate": {
            "format": "date",
            "description": "End date of the lease.",
            "type": "string"
          },
          "SendWelcomeEmail": {
            "description": "Indicates whether to send a welcome email to all tenants on the lease inviting them to the resident center website.",
            "type": "boolean"
          },
          "Tenants": {
            "description": "List of the tenants on the lease.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RentalTenantPutMessage"
            }
          },
          "Cosigners": {
            "description": "List of the cosigners on the lease.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeaseCosignerPostMessage"
            }
          },
          "Rent": {
            "$ref": "#/components/schemas/LeaseRentPostMessage"
          },
          "SecurityDeposit": {
            "$ref": "#/components/schemas/LeaseSecurityDepositPostMessage"
          }
        }
      },
      "LeasePutMessage": {
        "required": [
          "LeaseType",
          "UnitId",
          "LeaseFromDate",
          "IsEvictionPending"
        ],
        "type": "object",
        "properties": {
          "LeaseType": {
            "description": "Describes the type of lease.",
            "enum": ["Fixed", "FixedWithRollover", "AtWill"],
            "type": "string"
          },
          "UnitId": {
            "format": "int32",
            "description": "Unit unique identifier associated with the lease.",
            "type": "integer"
          },
          "LeaseFromDate": {
            "format": "date",
            "description": "Start date of the lease.",
            "type": "string"
          },
          "LeaseToDate": {
            "format": "date",
            "description": "End date of the lease.",
            "type": "string"
          },
          "IsEvictionPending": {
            "description": "Indicates whether the lease has an eviction pending.",
            "type": "boolean"
          },
          "AutomaticallyMoveOutTenants": {
            "description": "Indicates whether to automatically move out all tenants assigned to the lease and set the lease status to past when the lease ends.",
            "type": "boolean"
          }
        }
      },
      "LeaseRentChargePostMessage": {
        "required": ["Amount", "GlAccountId", "NextDueDate"],
        "type": "object",
        "properties": {
          "Amount": {
            "format": "double",
            "description": "The amount of the charge.",
            "type": "number"
          },
          "GlAccountId": {
            "format": "int32",
            "description": "The general ledger account identifier under which to record the charge.",
            "type": "integer"
          },
          "NextDueDate": {
            "format": "date",
            "description": "Indicates the next date the charge will be applied to the lease ledger. This date will also be used as the start date for the calculating the `Cycle` of when to apply the next charge. The date must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "Memo": {
            "description": "Memo for the charge.",
            "type": "string"
          }
        }
      },
      "LeaseRentPostMessage": {
        "description": "The rent for the lease. When provided in the request the charges for the specified amount will be automatically applied to the lease ledger on the cadence specified in the `Cycle`.",
        "required": ["Cycle", "Charges"],
        "type": "object",
        "properties": {
          "Cycle": {
            "description": "Indicates the cadence of when rent `Charges` will be applied automatically to the lease ledger.",
            "enum": [
              "Monthly",
              "Weekly",
              "Every2Weeks",
              "Quarterly",
              "Yearly",
              "Every2Months",
              "Daily",
              "Every6Months",
              "OneTime"
            ],
            "type": "string"
          },
          "Charges": {
            "description": "List of charges to apply to the lease.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeaseRentChargePostMessage"
            }
          }
        }
      },
      "LeaseSearchMessage": {
        "description": "This object represents a filter for a lease search.",
        "type": "object",
        "properties": {
          "PropertyIds": {
            "description": "Filters results to any lease whose unit belongs to the specified set of property ids.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "RentalOwnerIds": {
            "description": "Filters results to any lease whose unit belongs to a property with a rental owner in the specified set of rental owner ids.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "UnitNumber": {
            "description": "Filters results to any lease whose unit number *contains* the specified value.",
            "type": "string"
          },
          "TenantName": {
            "description": "Filters results to any lease whose current tenants' names *contain* the specified value.",
            "type": "string"
          },
          "LeaseDateFrom": {
            "format": "date",
            "description": "Filters results to any lease whose start date is greater than or equal to the specified value.",
            "type": "string"
          },
          "LeaseDateTo": {
            "format": "date",
            "description": "Filters results to any lease whose end date is less than or equal to the specified value.",
            "type": "string"
          },
          "LeaseTypes": {
            "description": "Filters results to any lease whose lease type matches the specified status. If no type is specified, leases with any type will be returned.",
            "type": "array",
            "items": {
              "enum": ["None", "Fixed", "FixedWithRollover", "AtWill"],
              "type": "string"
            }
          },
          "LeaseStatuses": {
            "description": "Filters results to any lease whose lease term matches the specified status. If no status is specified, leases with any lease term status will be returned.",
            "type": "array",
            "items": {
              "enum": ["Active", "Past", "Future"],
              "type": "string"
            }
          },
          "CreatedDateTimeFrom": {
            "format": "date-time",
            "description": "Filters results to any lease whose created date and time are greater than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "type": "string"
          },
          "CreatedDateTimeTo": {
            "format": "date-time",
            "description": "Filters results to any lease whose created date and time are less than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "type": "string"
          }
        }
      },
      "LeaseSecurityDepositPostMessage": {
        "description": "The security deposit on the lease. When provided in the request a one-time charge for the specified amount will be applied to the lease ledger.",
        "required": ["DueDate", "Amount"],
        "type": "object",
        "properties": {
          "DueDate": {
            "format": "date",
            "description": "The date the security deposit is due. This date will be used as the transaction date when applying the charge to the lease ledger.",
            "type": "string"
          },
          "Amount": {
            "format": "double",
            "description": "Security deposit amount.",
            "type": "number"
          }
        }
      },
      "LeaseTransactionMessage": {
        "description": "This is an object that represents a financial transaction",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Transaction unique identifier.",
            "type": "integer"
          },
          "Date": {
            "format": "date",
            "description": "Date of the transaction.",
            "type": "string"
          },
          "TransactionType": {
            "description": "Type of transaction that occurred",
            "type": "string"
          },
          "TotalAmount": {
            "format": "double",
            "description": "Sum of all `Journal.Lines.Amount` entries in the transaction.",
            "type": "number"
          },
          "CheckNumber": {
            "description": "Check number associated with the transaction, if applicable.",
            "type": "string"
          },
          "LeaseId": {
            "format": "int32",
            "description": "Lease unique identifier associated with the transaction, if applicable. Null if value is not set.",
            "type": "integer"
          },
          "PayeeTenantId": {
            "format": "int32",
            "description": "The payee's tenant unique identifier associated with the transaction, where applicable.",
            "type": "integer"
          },
          "PaymentMethod": {
            "description": "The payment method used for the transaction.",
            "type": "string"
          },
          "Journal": {
            "$ref": "#/components/schemas/JournalMessage"
          }
        }
      },
      "LeaseTransactionSearchMessage": {
        "description": "This object represents a filter for a lease transaction search.",
        "type": "object",
        "properties": {
          "TransactionDateFrom": {
            "format": "date",
            "description": "Filters results to any lease transaction whose start date is greater than or equal to the specified value.",
            "type": "string"
          },
          "TransactionDateTo": {
            "format": "date",
            "description": "Filters results to any lease transaction whose end date is less than or equal to the specified value.",
            "type": "string"
          },
          "TransactionTypes": {
            "description": "Filters results to any lease transaction whose lease transaction type matches the specified status. If no type is specified, lease transactions with any type will be returned.",
            "type": "array",
            "items": {
              "enum": [
                "Bill",
                "Check",
                "Charge",
                "Payment",
                "Credit",
                "Refund",
                "ApplyDeposit",
                "ElectronicFundsTransfer",
                "Other",
                "Deposit",
                "GeneralJournalEntry",
                "OwnerContribution",
                "ReversePayment",
                "ReverseElectronicFundsTransfer",
                "VendorCredit",
                "RentalApplicationFeePayment",
                "ReverseRentalApplicationFeePayment",
                "ReverseOwnerContribution",
                "VendorRefund",
                "UnreversedPayment",
                "UnreversedElectronicFundsTransfer",
                "UnreversedOwnerContribution",
                "UnreversedRentalApplicationFeePayment"
              ],
              "type": "string"
            }
          }
        }
      },
      "ListingContactMessage": {
        "description": "The contact information for the listing.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Listing contact unique identifier.",
            "type": "integer"
          },
          "Name": {
            "description": "Name of listing contact.",
            "type": "string"
          },
          "Email": {
            "description": "Email of the listing contact.",
            "type": "string"
          },
          "PhoneNumber": {
            "description": "Phone number of the listing contact.",
            "type": "string"
          },
          "Website": {
            "description": "Website of the listing contact.",
            "type": "string"
          }
        }
      },
      "ListingContactSaveMessage": {
        "required": ["Name"],
        "type": "object",
        "properties": {
          "Name": {
            "description": "Name of the listing contact. This name must be unique across all listing contacts.",
            "type": "string"
          },
          "Email": {
            "description": "Email address for the listing contact.",
            "type": "string"
          },
          "PhoneNumber": {
            "description": "Phone number of the listing contact. The value must be between 10 and 20 characters, ideally formatted as (123) 123-1234.",
            "type": "string"
          },
          "Website": {
            "description": "Website associated with the listing contact. The value must be a valid URL including the HTTP protocol. For example http://www.example.com.",
            "type": "string"
          }
        }
      },
      "ListingFileMessage": {
        "type": "object",
        "properties": {
          "Type": {
            "description": "Indicates the media type of file.",
            "enum": ["Image", "Video"],
            "type": "string"
          },
          "Name": {
            "description": "The name of the file.",
            "type": "string"
          },
          "Url": {
            "description": "The the full URL to access the file.",
            "type": "string"
          }
        }
      },
      "ListingMessage": {
        "type": "object",
        "properties": {
          "ListingDate": {
            "format": "date",
            "description": "The date the listing was created in Buildium. It does not reflect when the listing was syndicated and listed in external systems. It can take 24-48 hours for a listing to be syndicated once it is created in Buildium.",
            "type": "string"
          },
          "Rent": {
            "format": "double",
            "description": "The asking rent amount for this unit.",
            "type": "number"
          },
          "Deposit": {
            "format": "double",
            "description": "The deposit amount for the unit.",
            "type": "number"
          },
          "LeaseTerms": {
            "description": "A summary of the lease terms.",
            "type": "string"
          },
          "AvailableDate": {
            "format": "date",
            "description": "The date the unit will be available to move in.",
            "type": "string"
          },
          "IsManagedExternally": {
            "description": "Indicates if the listing is managed by an external vendor. Note, the `Contact` property will be `null` if the this property is `true` as the contact information is managed by a vendor outside of Buildium.",
            "type": "boolean"
          },
          "RentalApplicationUrl": {
            "description": "The URL to the online rental application hosted by Buildium.",
            "type": "string"
          },
          "Contact": {
            "$ref": "#/components/schemas/ListingContactMessage"
          },
          "Property": {
            "$ref": "#/components/schemas/ListingPropertyMessage"
          },
          "Unit": {
            "$ref": "#/components/schemas/ListingUnitMessage"
          }
        }
      },
      "ListingPropertyMessage": {
        "description": "Details of the unit property.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Rental property unique identifier.",
            "type": "integer"
          },
          "Name": {
            "description": "Name of the rental property.",
            "type": "string"
          },
          "Address": {
            "$ref": "#/components/schemas/AddressMessage"
          },
          "NumberUnits": {
            "format": "int32",
            "description": "Number of units in the rental property.",
            "type": "integer"
          },
          "StructureDescription": {
            "description": "Description of the rental property structure.",
            "type": "string"
          },
          "YearBuilt": {
            "format": "int32",
            "description": "Year the rental property was built.",
            "type": "integer"
          },
          "Features": {
            "description": "List of features for the property.",
            "type": "array",
            "items": {
              "enum": [
                "LaundryRoom",
                "WheelchairAccess",
                "DoorAttendant",
                "Elevator",
                "Parking",
                "StorageUnits",
                "Pool",
                "FitnessCenter",
                "TennisCourt",
                "ClubHouse",
                "Power",
                "ParkingCommercial",
                "SprinklerSystem",
                "DockHighDoorsOrLoadingAvailable",
                "Availability24Hours",
                "AccentWalls",
                "BasketballCourt",
                "Bilingual",
                "BoatDocks",
                "BusinessCenter",
                "CarWashArea",
                "ChildCare",
                "ClubDiscount",
                "ConferenceRoom",
                "Concierge",
                "FreeWeights",
                "FurnishedAvailable",
                "GamingStations",
                "Garage",
                "Gate",
                "GroceryService",
                "GroupExercise",
                "GuestRoom",
                "Housekeeping",
                "HouseSitting",
                "JoggingWalkingTrails",
                "LakeFront",
                "LakeAccess",
                "Library",
                "MealService",
                "MediaRoom",
                "MultiUseRoom",
                "NightPatrol",
                "OnSiteMaintenance",
                "OnSiteManagement",
                "PackageReceiving",
                "PerDiemAccepted",
                "PlayGround",
                "Racquetball",
                "RecRoom",
                "Recycling",
                "Sauna",
                "ShortTermLease",
                "SmokeFree",
                "Spa",
                "Sundeck",
                "Transportation",
                "TVLounge",
                "ValetTrash",
                "Vintage",
                "VolleyballCourt",
                "WirelessInternet",
                "HighSpeedInternet"
              ],
              "type": "string"
            }
          },
          "Files": {
            "description": "List of media files associated with the property.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListingFileMessage"
            }
          }
        }
      },
      "ListingPutMessage": {
        "description": "This is an object that represents a rental unit's Listing Contact.",
        "required": ["Rent", "AvailableDate", "IsManagedExternally"],
        "type": "object",
        "properties": {
          "Rent": {
            "format": "double",
            "description": "Rent for the listing.",
            "type": "number"
          },
          "Deposit": {
            "format": "double",
            "description": "Deposit for the listing.",
            "type": "number"
          },
          "LeaseTerms": {
            "description": "The lease term for the listing.",
            "type": "string"
          },
          "AvailableDate": {
            "format": "date",
            "description": "The date the listing is available.",
            "type": "string"
          },
          "ContactId": {
            "format": "int32",
            "description": "The contact Id for the listing.",
            "type": "integer"
          },
          "IsManagedExternally": {
            "type": "boolean"
          }
        }
      },
      "ListingSearchMessage": {
        "type": "object",
        "properties": {
          "EntityType": {
            "description": "Specifies the type of entity that `EntityId` refers to.",
            "enum": ["Property", "RentalOwner"],
            "type": "string"
          },
          "EntityId": {
            "format": "int32",
            "description": "Filters results to only listings that are associated with the specified entity id value. The id must be of the type specified in `EntityType` property.",
            "type": "integer"
          }
        }
      },
      "ListingUnitMessage": {
        "description": "Details of the unit.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Rental unit unique identifier.",
            "type": "integer"
          },
          "UnitNumber": {
            "description": "Unit number.",
            "type": "string"
          },
          "Address": {
            "$ref": "#/components/schemas/AddressMessage"
          },
          "UnitBedrooms": {
            "description": "Number of bedrooms in the unit. Null if no value is set.",
            "enum": [
              "NotSet",
              "Studio",
              "OneBed",
              "TwoBed",
              "ThreeBed",
              "FourBed",
              "FiveBed",
              "SixBed",
              "SevenBed",
              "EightBed",
              "NineBedPlus"
            ],
            "type": "string"
          },
          "UnitBathrooms": {
            "description": "Number of bathrooms in the unit. Null if no value is set.",
            "enum": [
              "NotSet",
              "OneBath",
              "OnePointFiveBath",
              "TwoBath",
              "TwoPointFiveBath",
              "ThreeBath",
              "FourBath",
              "FiveBath",
              "FivePlusBath",
              "ThreePointFiveBath",
              "FourPointFiveBath"
            ],
            "type": "string"
          },
          "UnitSize": {
            "format": "int32",
            "description": "Size of the unit. Null if no value is set.",
            "type": "integer"
          },
          "Description": {
            "description": "Description of the unit.",
            "type": "string"
          },
          "MarketRent": {
            "format": "double",
            "description": "Market rent of the unit. This value is separate from the lease rent and is typically used for rental listings. Null if no value is set.",
            "type": "number"
          },
          "Features": {
            "description": "List of features for the unit.",
            "type": "array",
            "items": {
              "enum": [
                "CableReady",
                "Microwave",
                "HardwoodFloors",
                "HighSpeedInternet",
                "AirConditioning",
                "Refrigerator",
                "Dishwasher",
                "WalkinClosets",
                "BalconyOrDeckOrPatio",
                "GarageParking",
                "Carport",
                "FencedYard",
                "LaundryRoomOrHookups",
                "Fireplace",
                "CableReadyCommercial",
                "HighSpeedInternetCommercial",
                "AirConditioningCommercial",
                "Heating",
                "OvenOrRange",
                "HeatElectric",
                "HeatGas",
                "HeatOil",
                "PetsAllowed",
                "Balcony",
                "PrivateBalcony",
                "PrivatePatio",
                "Dryer",
                "Heat",
                "WD_Hookup",
                "Washer",
                "AdditionalStorage",
                "Alarm",
                "Carpet",
                "CeilingFan",
                "ControlledAccess",
                "Courtyard",
                "Disposal",
                "DoubleSinkVanity",
                "FramedMirrors",
                "Furnished",
                "Handrails",
                "IndividualClimateControl",
                "IslandKitchen",
                "LinenCloset",
                "Pantry",
                "Satellite",
                "Skylight",
                "TileFlooring",
                "VaultedCeiling",
                "View",
                "VinylFlooring",
                "WheelChair",
                "WindowCoverings"
              ],
              "type": "string"
            }
          },
          "Files": {
            "description": "List of media files associated with the unit.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListingFileMessage"
            }
          }
        }
      },
      "LoggedByStaffUserMessage": {
        "description": "The staff member that logged the call.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The staff user unique identifier.",
            "type": "integer"
          },
          "FirstName": {
            "description": "First name of the staff user.",
            "type": "string"
          },
          "LastName": {
            "description": "Last name of the staff user.",
            "type": "string"
          },
          "Href": {
            "description": "A link to the staff user resource.",
            "type": "string"
          }
        }
      },
      "LookupMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "NoteMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Note unique identifier.",
            "type": "integer"
          },
          "Note": {
            "description": "Note contents.",
            "type": "string"
          },
          "LastUpdatedByUser": {
            "$ref": "#/components/schemas/LastUpdatedByUserMessage"
          }
        }
      },
      "NotePostMessage": {
        "required": ["Note"],
        "type": "object",
        "properties": {
          "Note": {
            "description": "Note contents.",
            "type": "string"
          }
        }
      },
      "NotePutMessage": {
        "required": ["Note"],
        "type": "object",
        "properties": {
          "Note": {
            "description": "Note contents.",
            "type": "string"
          }
        }
      },
      "NoteSearchMessage": {
        "type": "object",
        "properties": {
          "UpdatedDateTimeFrom": {
            "format": "date-time",
            "description": "Filters results to any note whose updated date and time are greater than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "type": "string"
          },
          "UpdatedDateTimeTo": {
            "format": "date-time",
            "description": "Filters results to any note whose updated date and time are less than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "type": "string"
          },
          "LastUpdatedByUserId": {
            "format": "int32",
            "description": "Filters results to only notes that were last updated by the specified user identifier.",
            "type": "integer"
          }
        }
      },
      "OutstandingBalancesLineMessage": {
        "type": "object",
        "properties": {
          "GlAccountId": {
            "format": "int32",
            "description": "General ledger account unique identifier.",
            "type": "integer"
          },
          "TotalBalance": {
            "format": "double",
            "description": "Total balance of the account on the line item.",
            "type": "number"
          }
        }
      },
      "OwnershipAccountCreditLinePostMessage": {
        "required": ["Amount", "GlAccountId"],
        "type": "object",
        "properties": {
          "Amount": {
            "format": "double",
            "description": "Line item amount.",
            "type": "number"
          },
          "GlAccountId": {
            "format": "int32",
            "description": "The general ledger account identifier under which the line item amount will be recorded. The account must be a liability or income type.",
            "type": "integer"
          }
        }
      },
      "OwnershipAccountCreditPostMessage": {
        "required": ["Date", "CreditType", "Lines"],
        "type": "object",
        "properties": {
          "Date": {
            "format": "date",
            "description": "Date of the transaction. The date must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "Memo": {
            "description": "Description of the transaction. The value cannot exceed 65 characters.",
            "type": "string"
          },
          "CreditType": {
            "description": "Indicates how the credit should be applied.\r\n<ul><li>WaiveUnpaid - This credit type allows for reversing one or more charges without losing record of what has changed.</li><li>Exchange - This credit type allows for one of the following: 1) Reimburse a resident for a out-of-pocket expense, 2) Compensate for a service, 3) Write-off a resident balance considered uncollectable.</li><li>PreviouslyDeposited - This credit type allows for issuing a credit against payments that have already been deposited.</li></ul>",
            "enum": ["WaiveUnpaid", "Exchange", "PreviouslyDeposited"],
            "type": "string"
          },
          "OffsettingGLAccountId": {
            "format": "int32",
            "description": "Sets the offsetting general ledger account identifier for the credit.\r\n<br />This value must be provided when the `CreditType` field is set to `Exchange` or `PreviouslyDeposited`.\r\n<br />When the `CreditType` is `Exchange` this must be an *expense* general ledger account type.\r\n<br />When the `CreditType` is `PreviouslyDeposited` this must be an *equity* general ledger account type.",
            "type": "integer"
          },
          "Lines": {
            "description": "A collection of line items included in the credit. At least one line item is required.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OwnershipAccountCreditLinePostMessage"
            }
          }
        }
      },
      "OwnershipAccountLedgerChargeLinesSaveMessage": {
        "required": ["Amount", "GlAccountId"],
        "type": "object",
        "properties": {
          "Amount": {
            "format": "double",
            "description": "Line item amount.",
            "type": "number"
          },
          "GlAccountId": {
            "format": "int32",
            "description": "The general ledger account identifier under which the line item amount will be recorded. The account must be a liability or income type.",
            "type": "integer"
          }
        }
      },
      "OwnershipAccountLedgerChargePostMessage": {
        "required": ["Date", "Lines"],
        "type": "object",
        "properties": {
          "Date": {
            "format": "date",
            "description": "Date of the charge. The date must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "Memo": {
            "description": "Memo associated with the charge. The value cannot exceed 65 characters.",
            "type": "string"
          },
          "Lines": {
            "description": "A collection of line items included in the charge. At least one line item is required.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OwnershipAccountLedgerChargeLinesSaveMessage"
            }
          }
        }
      },
      "OwnershipAccountLedgerPaymentLineSaveMessage": {
        "description": "This is an object that represents a line item on an Ownership Account Ledger Payment",
        "required": ["Amount", "GLAccountId"],
        "type": "object",
        "properties": {
          "Amount": {
            "format": "double",
            "description": "Amount of the line item.",
            "type": "number"
          },
          "GLAccountId": {
            "format": "int32",
            "description": "The general ledger account identifier under which the line item amount will be recorded.",
            "type": "integer"
          }
        }
      },
      "OwnershipAccountLedgerPaymentPostMessage": {
        "description": "This is an object that represents a Payment made in a particular Ownership Account Ledger",
        "required": ["Date", "PaymentMethod", "SendEmailReceipt", "Lines"],
        "type": "object",
        "properties": {
          "Date": {
            "format": "date",
            "description": "The date of the transaction. The date must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "PaymentMethod": {
            "description": "The payment method used for the transaction.",
            "enum": [
              "Check",
              "Cash",
              "MoneyOrder",
              "CashierCheck",
              "DirectDeposit",
              "CreditCard",
              "ElectronicPayment"
            ],
            "type": "string"
          },
          "PayeeUserId": {
            "format": "int32",
            "description": "The payee's user unique identifier.",
            "type": "integer"
          },
          "Memo": {
            "description": "A brief note describing the reason for the payment. The value cannot exceed 65 characters.",
            "type": "string"
          },
          "ReferenceNumber": {
            "description": "The reference Number of the transaction. The value cannot exceed 30 characters.",
            "type": "string"
          },
          "SendEmailReceipt": {
            "description": "An indicator for whether or not to send an email receipt to the payee. If the payee does not have an email address set, no email will be sent.",
            "type": "boolean"
          },
          "Lines": {
            "description": "A collection of line items included in the payment. At least one line item is required.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OwnershipAccountLedgerPaymentLineSaveMessage"
            }
          }
        }
      },
      "OwnershipAccountOutstandingBalanceMessage": {
        "type": "object",
        "properties": {
          "OwnershipAccountId": {
            "format": "int32",
            "description": "Ownership account unique identifier.",
            "type": "integer"
          },
          "AssociationId": {
            "format": "int32",
            "description": "Association unique identifier .",
            "type": "integer"
          },
          "UnitId": {
            "format": "int32",
            "description": "Association unit unique identifier.",
            "type": "integer"
          },
          "Balance0To30Days": {
            "format": "double",
            "description": "Outstanding balance due from within the last 30 days.",
            "type": "number"
          },
          "Balance31To60Days": {
            "format": "double",
            "description": "Outstanding balance due from within 31 to 60 days ago.",
            "type": "number"
          },
          "Balance61To90Days": {
            "format": "double",
            "description": "Outstanding balance due from within 61 to 90 days ago.",
            "type": "number"
          },
          "BalanceOver90Days": {
            "format": "double",
            "description": "Outstanding balance due from over 90 days ago.",
            "type": "number"
          },
          "TotalBalance": {
            "format": "double",
            "description": "Total outstanding balance due.",
            "type": "number"
          },
          "Balances": {
            "description": "Breakdown of outstanding balance due by general ledger account.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OutstandingBalancesLineMessage"
            }
          },
          "PastDueEmailSentDate": {
            "format": "date-time",
            "description": "Date of notification for outstanding balance.",
            "type": "string"
          }
        }
      },
      "OwnershipAccountOutstandingBalanceSearchMessage": {
        "type": "object",
        "properties": {
          "AssociationId": {
            "format": "int32",
            "description": "Association unique identifier",
            "type": "integer"
          },
          "OwnershipAccountStatuses": {
            "description": "List of ownership account statuses",
            "type": "array",
            "items": {
              "enum": ["Active", "Past", "Future"],
              "type": "string"
            }
          },
          "OwnershipAccountIds": {
            "description": "List of ownership account ids",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "PastDueEmail": {
            "description": "Status of notification of outstanding balances",
            "enum": ["NoEmailAddress", "Sent"],
            "type": "string"
          },
          "BalanceDuration": {
            "description": "Duration of outstanding balances",
            "enum": [
              "TotalBalance",
              "Balance0to30Days",
              "Balance31to60Days",
              "Balance61to90Days",
              "BalanceOver90Days"
            ],
            "type": "string"
          }
        }
      },
      "OwnershipAccountTransactionMessage": {
        "description": "This is an object that represents a financial transaction",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Transaction unique identifier.",
            "type": "integer"
          },
          "Date": {
            "format": "date",
            "description": "Date of the transaction.",
            "type": "string"
          },
          "TransactionType": {
            "description": "Type of transaction that occurred.",
            "type": "string"
          },
          "TotalAmount": {
            "format": "double",
            "description": "Sum of all `Journal.Lines.Amount` entries in the transaction.",
            "type": "number"
          },
          "CheckNumber": {
            "description": "Check number associated with the transaction, if applicable.",
            "type": "string"
          },
          "OwnershipAccountId": {
            "format": "int32",
            "description": "Ownership account unique identifier associated with the transaction, if applicable. Null if value is not set.",
            "type": "integer"
          },
          "PayeeAssociationOwnerId": {
            "format": "int32",
            "description": "The payee's association owner unique identifier associated with the transaction, where applicable.",
            "type": "integer"
          },
          "PaymentMethod": {
            "description": "The payment method used for the transaction.",
            "type": "string"
          },
          "Journal": {
            "$ref": "#/components/schemas/JournalMessage"
          }
        }
      },
      "PaidByMessage": {
        "description": "Transaction line item.",
        "type": "object",
        "properties": {
          "AccountingEntity": {
            "$ref": "#/components/schemas/AccountingEntityMessage"
          },
          "Amount": {
            "format": "double",
            "description": "Amount of the line item.",
            "type": "number"
          }
        }
      },
      "ParticipantMessage": {
        "description": "The participant in the phone call.",
        "type": "object",
        "properties": {
          "EntityId": {
            "format": "int32",
            "description": "The unique identifier for the participant entity.",
            "type": "integer"
          },
          "EntityResources": {
            "description": "A list of the participants entity types and links to the entity resource. Note, that a participant can have more than one type assigned to them. For example, they could be both a vendor and a rental owner.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParticipantResourceMessage"
            }
          },
          "UnitAgreement": {
            "$ref": "#/components/schemas/UnitAgreementMessage"
          }
        }
      },
      "ParticipantResourceMessage": {
        "description": "The participant in the phone call.",
        "type": "object",
        "properties": {
          "Type": {
            "description": "Indicates the participant type.",
            "enum": [
              "Vendor",
              "RentalOwner",
              "RentalTenant",
              "AssociationOwner"
            ],
            "type": "string"
          },
          "Href": {
            "description": "A link to the participant resource.",
            "type": "string"
          }
        }
      },
      "PayeeMessage": {
        "description": "This object represents a payee.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The payee user unique identifier.",
            "type": "integer"
          },
          "Name": {
            "description": "The name of the payee.",
            "type": "string"
          },
          "Type": {
            "description": "The payee entity type.",
            "enum": [
              "Tenant",
              "AssociationTenant",
              "AssociationOwner",
              "RentalOwner",
              "Vendor",
              "Staff"
            ],
            "type": "string"
          },
          "Href": {
            "description": "A link to the resource endpoint associated with the payee.",
            "type": "string"
          }
        }
      },
      "PaymentDetailMessage": {
        "description": "This object represents payment details.",
        "type": "object",
        "properties": {
          "PaymentMethod": {
            "description": "The payment method used for the transaction.",
            "enum": [
              "None",
              "Check",
              "Cash",
              "MoneyOrder",
              "CashierCheck",
              "DirectDeposit",
              "CreditCard",
              "ElectronicPayment",
              "RetailCash"
            ],
            "type": "string"
          },
          "Payee": {
            "$ref": "#/components/schemas/PayeeMessage"
          },
          "IsInternalTransaction": {
            "description": "Whether the transaction is processed internally.",
            "type": "boolean"
          },
          "InternalTransactionStatus": {
            "$ref": "#/components/schemas/InternalTransactionStatusMessage"
          }
        }
      },
      "PhoneLogMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Phone log unique identifier.",
            "type": "integer"
          },
          "Participant": {
            "$ref": "#/components/schemas/ParticipantMessage"
          },
          "LoggedByStaffUser": {
            "$ref": "#/components/schemas/LoggedByStaffUserMessage"
          },
          "Subject": {
            "description": "Subject of the phone call.",
            "type": "string"
          },
          "Description": {
            "description": "Description of the phone call.",
            "type": "string"
          },
          "CallDateTime": {
            "format": "date-time",
            "description": "The date and time in UTC of when the call took place.",
            "type": "string"
          }
        }
      },
      "PhoneLogParticipantPostMessage": {
        "description": "The participant in the phone call.",
        "required": ["EntityType", "EntityId"],
        "type": "object",
        "properties": {
          "EntityType": {
            "description": "The type of participant entity.",
            "enum": [
              "Vendor",
              "RentalOwner",
              "RentalTenant",
              "AssociationOwner"
            ],
            "type": "string"
          },
          "EntityId": {
            "format": "int32",
            "description": "The unique identifier for the participant entity.",
            "type": "integer"
          },
          "UnitAgreement": {
            "$ref": "#/components/schemas/PhoneLogParticipantUnitAgreementPostMessage"
          }
        }
      },
      "PhoneLogParticipantUnitAgreementPostMessage": {
        "description": "The unit agreement associated with the participant.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The unit agreement unique identifier. Note, if a value is provided in this field then `Type` must also be provided.",
            "type": "integer"
          },
          "Type": {
            "description": "The type of unit agreement. Note, this field is required if a value is provided for the `Id` field.",
            "enum": ["NotSet", "Lease", "OwnershipAccount"],
            "type": "string"
          }
        }
      },
      "PhoneLogPostMessage": {
        "required": ["Participant", "Subject", "Description", "CallDateTime"],
        "type": "object",
        "properties": {
          "Participant": {
            "$ref": "#/components/schemas/PhoneLogParticipantPostMessage"
          },
          "Subject": {
            "description": "Subject of the phone call. This value is restricted to a maximum of 255 characters.",
            "type": "string"
          },
          "Description": {
            "description": "Description of the phone call. This value is restricted to a maximum of 65,535 characters.",
            "type": "string"
          },
          "CallDateTime": {
            "format": "date-time",
            "description": "The date and time the call took place. Time of the phone call must be UTC. Example format: \"2021-01-26T13:59:15Z\"",
            "type": "string"
          }
        }
      },
      "PhoneLogPutMessage": {
        "required": ["Subject", "Description", "CallDateTime"],
        "type": "object",
        "properties": {
          "Subject": {
            "description": "Subject of the phone call. This value is restricted to a maximum of 255 characters.",
            "type": "string"
          },
          "Description": {
            "description": "Description of the phone call. This value is restricted to a maximum of 65,535 characters.",
            "type": "string"
          },
          "CallDateTime": {
            "format": "date-time",
            "description": "The date and time the call took place. Time of the phone call must be UTC. Example format: \"2021-01-26T13:59:15Z\"",
            "type": "string"
          }
        }
      },
      "PhoneLogSearchMessage": {
        "type": "object",
        "properties": {
          "FromDate": {
            "format": "date",
            "description": "Filters results to any phone log whose call date is greater than or equal to the specified value.",
            "type": "string"
          },
          "ToDate": {
            "format": "date",
            "description": "Filters results to any phone log whose call date is less than or equal to the specified value.",
            "type": "string"
          },
          "LoggedByStaffUserIds": {
            "description": "Filters results to any phone log that was logged by staff user(s).",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "Subject": {
            "description": "Filters results to any phone log whose subject *contains* the specified value.",
            "type": "string"
          },
          "ParticipantEntityId": {
            "format": "int32",
            "description": "Filters results to any phone logs that match the participant identifier. Note, if a value is provided in this field the `ParticipantEntityType` must also be provided.",
            "type": "integer"
          },
          "ParticipantEntityType": {
            "description": "Filters results to any phone log with the specified participant type. This field is required if a value is provided for the `ParticipantEntityId` field.",
            "enum": [
              "Vendor",
              "RentalOwner",
              "RentalTenant",
              "AssociationOwner"
            ],
            "type": "string"
          },
          "UnitAgreementId": {
            "format": "int32",
            "description": "Filters results to any phone log with the specified unit agreement identifier. Note, if a value is provided in this field the `UnitAgreementType` must also be provided.",
            "type": "integer"
          },
          "UnitAgreementType": {
            "description": "Filters results to any phone log with the specified unit agreement type. This field is required if a value is provided for the `UnitAgreementId` field.",
            "enum": ["Lease", "OwnershipAccount"],
            "type": "string"
          }
        }
      },
      "PhoneNumberMessage": {
        "description": "This is an object that represents a phone number.",
        "type": "object",
        "properties": {
          "Number": {
            "description": "Phone number.",
            "type": "string"
          },
          "Type": {
            "description": "Indicates the type of phone number.",
            "enum": [
              "NotSet",
              "Home",
              "Office",
              "Cell",
              "Personal",
              "Fax",
              "Other"
            ],
            "type": "string"
          }
        }
      },
      "PhoneNumbersMessage": {
        "description": "Phone numbers.",
        "type": "object",
        "properties": {
          "Home": {
            "description": "Home phone number. If provided, must be between 10 and 20 characters, ideally formatted as `(123) 123-1234`.",
            "type": "string"
          },
          "Work": {
            "description": "Work phone number. If provided, must be between 10 and 20 characters, ideally formatted as `(123) 123-1234`.",
            "type": "string"
          },
          "Mobile": {
            "description": "Mobile phone number. If provided, must be between 10 and 20 characters, ideally formatted as `(123) 123-1234`.",
            "type": "string"
          },
          "Fax": {
            "description": "Fax number. If provided, must be between 10 and 20 characters, ideally formatted as `(123) 123-1234`.",
            "type": "string"
          }
        }
      },
      "PropertyManagerMessage": {
        "description": "This is an object that represents a property manager.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Property manager unique identifier.",
            "type": "integer"
          },
          "FirstName": {
            "description": "First name of the property manager.",
            "type": "string"
          },
          "LastName": {
            "description": "Last name of the property manager.",
            "type": "string"
          },
          "CompanyName": {
            "description": "Company name of the rental owner. Empty if `IsCompany` is `false`.",
            "type": "string"
          },
          "IsCompany": {
            "description": "Denotes if the property manager is a company.",
            "type": "boolean"
          },
          "ProfilePhotoUrl": {
            "description": "Profile photo URL for the property manager.",
            "type": "string"
          },
          "Email": {
            "description": "Email of the property manager.",
            "type": "string"
          },
          "PhoneNumbers": {
            "description": "List of phone numbers associated with the property manager.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberMessage"
            }
          }
        }
      },
      "PropertyMessage": {
        "description": "Property information.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "The property unique identifier.",
            "type": "integer"
          },
          "Type": {
            "description": "The property type.",
            "enum": ["Association", "Rental"],
            "type": "string"
          },
          "Href": {
            "description": "A link to the property entity resource.",
            "type": "string"
          }
        }
      },
      "RentalMessage": {
        "description": "This is an object that represents a rental property.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Rental property unique identifier.",
            "type": "integer"
          },
          "Name": {
            "description": "Name of the rental property.",
            "type": "string"
          },
          "StructureDescription": {
            "description": "Description of the rental property structure.",
            "type": "string"
          },
          "NumberUnits": {
            "format": "int32",
            "description": "Number of units in the rental property.",
            "type": "integer"
          },
          "IsActive": {
            "description": "Indicates whether the rental property is active within the Buildium platform.",
            "type": "boolean"
          },
          "OperatingBankAccountId": {
            "format": "int32",
            "description": "The primary bank account that a rental property uses for its income and expenses.",
            "type": "integer"
          },
          "Reserve": {
            "format": "double",
            "description": "A property reserve is cash that a property manager keeps on hand in case of unexpected expenses. It is available cash that isn't disbursed in an owner draw.",
            "type": "number"
          },
          "Address": {
            "$ref": "#/components/schemas/AddressMessage"
          },
          "YearBuilt": {
            "format": "int32",
            "description": "Year the rental property was built.",
            "type": "integer"
          },
          "RentalType": {
            "description": "Indicates the type of rental property.",
            "enum": ["None", "Residential", "Commercial"],
            "type": "string"
          },
          "RentalSubType": {
            "description": "Indicates the sub type of the rental property.",
            "enum": [
              "CondoTownhome",
              "MultiFamily",
              "SingleFamily",
              "Industrial",
              "Office",
              "Retail",
              "ShoppingCenter",
              "Storage",
              "ParkingSpace"
            ],
            "type": "string"
          },
          "RentalManager": {
            "$ref": "#/components/schemas/PropertyManagerMessage"
          }
        }
      },
      "RentalOwnerMessage": {
        "description": "This is an object that represents a rental property owner.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Rental property owner unique identifier.",
            "type": "integer"
          },
          "IsCompany": {
            "description": "Indicates whether the rental owner is a company.",
            "type": "boolean"
          },
          "IsActive": {
            "description": "Indicates whether the rental owner is active within the Buildium platform.",
            "type": "boolean"
          },
          "FirstName": {
            "description": "First name of the rental owner. Empty if `IsCompany` is `true`.",
            "type": "string"
          },
          "LastName": {
            "description": "Last name of the rental owner. Empty if `IsCompany` is `true`.",
            "type": "string"
          },
          "PhoneNumbers": {
            "description": "Phone numbers associated with the rental owner.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberMessage"
            }
          },
          "Email": {
            "description": "Email of the rental owner.",
            "type": "string"
          },
          "AlternateEmail": {
            "description": "Alternate email of the rental owner.",
            "type": "string"
          },
          "Comment": {
            "description": "Comments about the rental owner.",
            "type": "string"
          },
          "Address": {
            "$ref": "#/components/schemas/AddressMessage"
          },
          "ManagementAgreementStartDate": {
            "format": "date",
            "description": "Start date of the management agreement with the rental owner. Null if value is not set.",
            "type": "string"
          },
          "ManagementAgreementEndDate": {
            "format": "date",
            "description": "End date of the management agreement with the rental owner. Null if value is not set.",
            "type": "string"
          },
          "CompanyName": {
            "description": "Company name of the rental owner. Empty if `IsCompany` is `false`.",
            "type": "string"
          },
          "PropertyIds": {
            "description": "A list of rental property ID's associated with this rental owner.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      },
      "RentalOwnerPostMessage": {
        "description": "This is an object that represents a rental property owner.",
        "required": ["IsCompany", "Address", "PropertyIds"],
        "type": "object",
        "properties": {
          "FirstName": {
            "description": "First name of the rental owner. Required if `IsCompany` is `false`. The value cannot exceed 127 characters.",
            "type": "string"
          },
          "LastName": {
            "description": "Last name of the rental owner. Required if `IsCompany` is `false`. The value cannot exceed 127 characters.",
            "type": "string"
          },
          "IsCompany": {
            "description": "Indicates whether the rental owner should be considered a company or person.",
            "type": "boolean"
          },
          "CompanyName": {
            "description": "Company name of the rental owner. Required if `IsCompany` is `true`. The value cannot exceed 127 characters.",
            "type": "string"
          },
          "DateOfBirth": {
            "format": "date",
            "description": "Date of birth of the rental owner. Must be formatted as `YYYY-MM-DD`.",
            "type": "string"
          },
          "ManagementAgreementStartDate": {
            "format": "date",
            "description": "Start date of the management agreement with the rental owner. Must be formatted as `YYYY-MM-DD`.",
            "type": "string"
          },
          "ManagementAgreementEndDate": {
            "format": "date",
            "description": "End date of the management agreement with the rental owner. Must be formatted as `YYYY-MM-DD`.",
            "type": "string"
          },
          "Email": {
            "description": "Email of the rental owner.",
            "type": "string"
          },
          "AlternateEmail": {
            "description": "Alternate email of the rental owner.",
            "type": "string"
          },
          "PhoneNumbers": {
            "$ref": "#/components/schemas/PhoneNumbersMessage"
          },
          "Address": {
            "$ref": "#/components/schemas/SaveAddressMessage"
          },
          "Comment": {
            "description": "Comments about the rental owner. The comments cannot exceed 65,535 characters.",
            "type": "string"
          },
          "PropertyIds": {
            "description": "A list of rental property ID's to associate with this rental owner. At least one property ID must be provided.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      },
      "RentalOwnerPutMessage": {
        "description": "This is an object that represents a rental property owner.",
        "required": ["IsCompany", "Address", "PropertyIds"],
        "type": "object",
        "properties": {
          "FirstName": {
            "description": "First name of the rental owner. Required if `IsCompany` is `false`. The value cannot exceed 127 characters.",
            "type": "string"
          },
          "LastName": {
            "description": "Last name of the rental owner. Required if `IsCompany` is `false`. The value cannot exceed 127 characters.",
            "type": "string"
          },
          "IsCompany": {
            "description": "Indicates whether the rental owner should be considered a company or person.",
            "type": "boolean"
          },
          "CompanyName": {
            "description": "Company name of the rental owner. Required if `IsCompany` is `true`. The value cannot exceed 127 characters.",
            "type": "string"
          },
          "DateOfBirth": {
            "format": "date",
            "description": "Date of birth of the rental owner. Must be formatted as `YYYY-MM-DD`.",
            "type": "string"
          },
          "ManagementAgreementStartDate": {
            "format": "date",
            "description": "Start date of the management agreement with the rental owner. Must be formatted as `YYYY-MM-DD`.",
            "type": "string"
          },
          "ManagementAgreementEndDate": {
            "format": "date",
            "description": "End date of the management agreement with the rental owner. Must be formatted as `YYYY-MM-DD`.",
            "type": "string"
          },
          "Email": {
            "description": "Email of the rental owner.",
            "type": "string"
          },
          "AlternateEmail": {
            "description": "Alternate email of the rental owner.",
            "type": "string"
          },
          "PhoneNumbers": {
            "$ref": "#/components/schemas/PhoneNumbersMessage"
          },
          "Address": {
            "$ref": "#/components/schemas/SaveAddressMessage"
          },
          "Comment": {
            "description": "Comments about the rental owner. The comments cannot exceed 65,535 characters.",
            "type": "string"
          },
          "PropertyIds": {
            "description": "A list of rental property ID's to associate with this rental owner. At least one property ID must be provided.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      },
      "RentalOwnerRequestTaskMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Request unique identifier.",
            "type": "integer"
          },
          "Category": {
            "$ref": "#/components/schemas/TaskCategoryResponseMessage"
          },
          "Title": {
            "description": "Request title.",
            "type": "string"
          },
          "Description": {
            "description": "Request description.",
            "type": "string"
          },
          "Property": {
            "$ref": "#/components/schemas/PropertyMessage"
          },
          "UnitId": {
            "format": "int32",
            "description": "The unit unique identifier associated with the request.",
            "type": "integer"
          },
          "RequestedByUserEntity": {
            "$ref": "#/components/schemas/RequestedByUserEntityMessage"
          },
          "AssignedToUserId": {
            "format": "int32",
            "description": "The unique identifier of the staff user assigned to the request.",
            "type": "integer"
          },
          "TaskStatus": {
            "description": "Request status.",
            "enum": ["New", "InProgress", "Completed", "Deferred", "Closed"],
            "type": "string"
          },
          "Priority": {
            "description": "Request priority.",
            "enum": ["Low", "Normal", "High"],
            "type": "string"
          },
          "DueDate": {
            "format": "date",
            "description": "Request due date.",
            "type": "string"
          },
          "CreatedDateTime": {
            "format": "date-time",
            "description": "Date and time the request was created.",
            "type": "string"
          },
          "LastUpdatedDateTime": {
            "format": "date-time",
            "description": "Date and time the request was last updated.",
            "type": "string"
          }
        }
      },
      "RentalOwnerRequestTaskPostMessage": {
        "required": [
          "Title",
          "TaskStatus",
          "Priority",
          "RequestedByRentalOwnerId"
        ],
        "type": "object",
        "properties": {
          "Title": {
            "description": "Request title. The title can not exceed 127 characters.",
            "type": "string"
          },
          "Description": {
            "description": "Request description. The description can not exceed 65500 characters.",
            "type": "string"
          },
          "CategoryId": {
            "format": "int32",
            "description": "The category identifier to assign the request.",
            "type": "integer"
          },
          "SubCategoryId": {
            "format": "int32",
            "description": "The subcategory identifier to assign the request.",
            "type": "integer"
          },
          "PropertyId": {
            "format": "int32",
            "description": "The unique identifier of property associated with the request. The assigned property must be active.",
            "type": "integer"
          },
          "UnitId": {
            "format": "int32",
            "description": "The unique identifier of the unit associated with the request. The unit must be associated with the `PropertyId` specified.",
            "type": "integer"
          },
          "AssignedToUserId": {
            "format": "int32",
            "description": "The unique identifier of the staff user assigned to the request. The user must be a `Staff` user type.",
            "type": "integer"
          },
          "TaskStatus": {
            "description": "Request status.",
            "enum": ["New", "InProgress", "Completed", "Deferred", "Closed"],
            "type": "string"
          },
          "Priority": {
            "description": "Request priority.",
            "enum": ["Low", "Normal", "High"],
            "type": "string"
          },
          "DueDate": {
            "format": "date",
            "description": "Request due date. The date must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "RequestedByRentalOwnerId": {
            "format": "int32",
            "description": "The unique identifier of the rental owner that submitted the request.",
            "type": "integer"
          }
        }
      },
      "RentalOwnerRequestTaskPutMessage": {
        "required": ["Title", "TaskStatus", "Priority"],
        "type": "object",
        "properties": {
          "Title": {
            "description": "Request title. The title can not exceed 127 characters.",
            "type": "string"
          },
          "Message": {
            "description": "Description of the request update. The message can not exceed 65500 characters.",
            "type": "string"
          },
          "CategoryId": {
            "format": "int32",
            "description": "The category identifier to assign the request.",
            "type": "integer"
          },
          "SubCategoryId": {
            "format": "int32",
            "description": "The subcategory identifier to assign the request.",
            "type": "integer"
          },
          "PropertyId": {
            "format": "int32",
            "description": "The unique identifier of property associated with the request. The assigned property must be active.",
            "type": "integer"
          },
          "UnitId": {
            "format": "int32",
            "description": "The unique identifier of the unit associated with the request. The unit must be associated with the `PropertyId` specified.",
            "type": "integer"
          },
          "AssignedToUserId": {
            "format": "int32",
            "description": "The unique identifier of the staff user assigned to the request. The user must be a `Staff` user type.",
            "type": "integer"
          },
          "TaskStatus": {
            "description": "Request status.",
            "enum": ["New", "InProgress", "Completed", "Deferred", "Closed"],
            "type": "string"
          },
          "Priority": {
            "description": "Request priority.",
            "enum": ["Low", "Normal", "High"],
            "type": "string"
          },
          "DueDate": {
            "format": "date",
            "description": "Request due date. The date must be formatted as YYYY-MM-DD.",
            "type": "string"
          }
        }
      },
      "RentalOwnerRequestTaskSearchMessage": {
        "type": "object",
        "properties": {
          "EntityType": {
            "description": "Specifies the type of entity that the `EntityId` field refers to. This field is required if the `EntityId` field is populated.",
            "enum": ["Rental", "RentalOwner", "Association"],
            "type": "string"
          },
          "EntityId": {
            "format": "int32",
            "description": "Filters results to any task associated with the specified entity id value. The value must be of the type specified in the `EntityType` field.",
            "type": "integer"
          },
          "Statuses": {
            "description": "Filters results by the status of the task. If no status is specified, tasks with any status will be returned.",
            "type": "array",
            "items": {
              "enum": ["New", "InProgress", "Completed", "Deferred", "Closed"],
              "type": "string"
            }
          },
          "UnitId": {
            "format": "int32",
            "description": "Filters results to any task associated with the unit identifier.",
            "type": "integer"
          },
          "LastUpdatedFrom": {
            "format": "date",
            "description": "Filters results to any tasks were updated on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "LastUpdatedTo": {
            "format": "date",
            "description": "Filters results to any tasks were updated on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "DueDateFrom": {
            "format": "date",
            "description": "Filters results to any tasks with a due date on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "DueDateTo": {
            "format": "date",
            "description": "Filters results to any tasks with a due date on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "TaskCategoryId": {
            "format": "int32",
            "description": "Filters results to any tasks with the specified category identifier.",
            "type": "integer"
          },
          "Priorities": {
            "description": "Filters results to any tasks whose priority matches the specified values. If no priority is specified, tasks with any priority will be returned.",
            "type": "array",
            "items": {
              "enum": ["Low", "Normal", "High"],
              "type": "string"
            }
          },
          "AssignedToId": {
            "format": "int32",
            "description": "Filters results to any tasks that have been assigned to the specified staff user identifier.",
            "type": "integer"
          },
          "TaskTitle": {
            "description": "Filters results to any task whose title *contains* the specified value.",
            "type": "string"
          }
        }
      },
      "RentalOwnersSearchMessage": {
        "type": "object",
        "properties": {
          "PropertyIds": {
            "description": "Filters results to any lease whose unit belongs to the specified set of property ids.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "Status": {
            "description": "Filters results by the status of the user. If no status is specified both `active` and `inactive` users will be returned.",
            "enum": ["Inactive", "Active"],
            "type": "string"
          },
          "AgreementDaysRemaining": {
            "format": "int32",
            "description": "Filters results by the days remaining on their lease agreement.",
            "type": "integer"
          },
          "OwnerName": {
            "description": "Filters results to any owner whose name *contains* the specified value.",
            "type": "string"
          },
          "Phone": {
            "description": "Filters results to any owner who has a phone number that *contains* the specified value.",
            "type": "string"
          }
        }
      },
      "RentalPropertyPostMessage": {
        "required": [
          "Name",
          "Address",
          "RentalSubType",
          "OperatingBankAccountId"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "description": "Rental property name. The value cannot exceed 127 characters.",
            "type": "string"
          },
          "StructureDescription": {
            "description": "Description of the rental property building. The description cannot exceed 65,535 characters.",
            "type": "string"
          },
          "Address": {
            "$ref": "#/components/schemas/SaveAddressMessage"
          },
          "RentalSubType": {
            "description": "Subtype of the rental property.",
            "enum": [
              "CondoTownhome",
              "MultiFamily",
              "SingleFamily",
              "Industrial",
              "Office",
              "Retail",
              "ShoppingCenter",
              "Storage",
              "ParkingSpace"
            ],
            "type": "string"
          },
          "RentalOwnerIds": {
            "description": "List of existing rental owner ID's that are owners of this property.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "OperatingBankAccountId": {
            "format": "int32",
            "description": "The primary bank account that a rental property uses for its income and expenses.",
            "type": "integer"
          },
          "Reserve": {
            "format": "double",
            "description": "A property reserve is cash that a property manager keeps on hand in case of unexpected expenses. It is available cash that isn't disbursed in an owner draw.",
            "type": "number"
          },
          "YearBuilt": {
            "format": "int32",
            "description": "Indicates the year the rental property was built. If provided this value must be a four digit integer between 1000 and the current year.",
            "type": "integer"
          }
        }
      },
      "RentalPropertyPutMessage": {
        "required": [
          "Name",
          "Address",
          "RentalSubType",
          "OperatingBankAccountId"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "description": "Rental property name. The value cannot exceed 127 characters.",
            "type": "string"
          },
          "StructureDescription": {
            "description": "Description of the rental property building. The description cannot exceed 65,535 characters.",
            "type": "string"
          },
          "Address": {
            "$ref": "#/components/schemas/SaveAddressMessage"
          },
          "RentalSubType": {
            "description": "Subtype of the rental property",
            "enum": [
              "CondoTownhome",
              "MultiFamily",
              "SingleFamily",
              "Industrial",
              "Office",
              "Retail",
              "ShoppingCenter",
              "Storage",
              "ParkingSpace"
            ],
            "type": "string"
          },
          "OperatingBankAccountId": {
            "format": "int32",
            "description": "The primary bank account that an rental property uses for its income and expenses.",
            "type": "integer"
          },
          "Reserve": {
            "format": "double",
            "description": "A property reserve is cash that a property manager keeps on hand in case of unexpected expenses. It is available cash that isn't disbursed in an owner draw.",
            "type": "number"
          },
          "YearBuilt": {
            "format": "int32",
            "description": "Indicates the year the rental property was built. If provided this value must be a four digit integer between 1000 and the current year.",
            "type": "integer"
          }
        }
      },
      "RentalSearchMessage": {
        "type": "object",
        "properties": {
          "Location": {
            "description": "Filters results to only rental properties whose address *contains* the specified value.",
            "type": "string"
          },
          "Types": {
            "description": "Filters results by the rental type. If no type is provided all types will be returned.",
            "type": "array",
            "items": {
              "enum": ["Residential", "Commercial"],
              "type": "string"
            }
          },
          "SubTypes": {
            "description": "Filters results by the sub type of the rental property. If no sub type is specified all sub types will be returned.",
            "type": "array",
            "items": {
              "enum": [
                "CondoTownhome",
                "MultiFamily",
                "SingleFamily",
                "Industrial",
                "Office",
                "Retail",
                "ShoppingCenter",
                "Storage",
                "ParkingSpace"
              ],
              "type": "string"
            }
          },
          "Status": {
            "description": "Filters results by the status of the rental property. If no status is specified both `active` and `inactive` rental properties will be returned.",
            "enum": ["Active", "InActive"],
            "type": "string"
          },
          "RentalOwnerIds": {
            "description": "Filters results to only rental properties whose RentalOwnerId matches the specified Id.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "PropertyIds": {
            "description": "Filters results to only rental properties units whose Rental matches the specified Id.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      },
      "RentalTenantPostMessage": {
        "required": ["LeaseId", "FirstName", "LastName", "Address"],
        "type": "object",
        "properties": {
          "LeaseId": {
            "format": "int32",
            "description": "Lease ID to associate the tenant with.",
            "type": "integer"
          },
          "FirstName": {
            "description": "First name of the tenant. The value cannot exceed 127 characters.",
            "type": "string"
          },
          "LastName": {
            "description": "Last name of the tenant. The value cannot exceed 127 characters.",
            "type": "string"
          },
          "Email": {
            "description": "Email of the tenant.",
            "type": "string"
          },
          "AlternateEmail": {
            "description": "Alternate email of the tenant.",
            "type": "string"
          },
          "PhoneNumbers": {
            "$ref": "#/components/schemas/PhoneNumbersMessage"
          },
          "DateOfBirth": {
            "format": "date",
            "description": "Date of birth for the tenant. Must be formatted as `YYYY-MM-DD`.",
            "type": "string"
          },
          "Comment": {
            "description": "Comments about the tenant. The value cannot exceed 65,535 characters.",
            "type": "string"
          },
          "TaxId": {
            "description": "Tax identifier of the tenant. Valid formats are: `12-1234567`, `123-12-1234`, `123456789`",
            "type": "string"
          },
          "EmergencyContact": {
            "$ref": "#/components/schemas/SaveEmergencyContactMessage"
          },
          "Address": {
            "$ref": "#/components/schemas/SaveAddressMessage"
          },
          "AlternateAddress": {
            "$ref": "#/components/schemas/SaveAddressMessage"
          },
          "MailingPreference": {
            "description": "Mailing preference for the tenant. If an alternate address exists and this value is not provided then the primary address will be set as the preferred address.",
            "enum": ["PrimaryAddress", "AlternateAddress"],
            "type": "string"
          }
        }
      },
      "RentalTenantPutMessage": {
        "required": ["FirstName", "LastName", "Address"],
        "type": "object",
        "properties": {
          "FirstName": {
            "description": "First name of the tenant. The value cannot exceed 127 characters.",
            "type": "string"
          },
          "LastName": {
            "description": "Last name of the tenant. The value cannot exceed 127 characters.",
            "type": "string"
          },
          "Email": {
            "description": "Email of the tenant.",
            "type": "string"
          },
          "AlternateEmail": {
            "description": "Alternate email of the tenant.",
            "type": "string"
          },
          "PhoneNumbers": {
            "$ref": "#/components/schemas/PhoneNumbersMessage"
          },
          "DateOfBirth": {
            "format": "date",
            "description": "Date of birth for the tenant. Must be formatted as `YYYY-MM-DD`.",
            "type": "string"
          },
          "Comment": {
            "description": "Comments about the tenant. The value cannot exceed 65,535 characters.",
            "type": "string"
          },
          "TaxId": {
            "description": "Tax identifier of the tenant. Valid formats are: `12-1234567`, `123-12-1234`, `123456789`",
            "type": "string"
          },
          "EmergencyContact": {
            "$ref": "#/components/schemas/SaveEmergencyContactMessage"
          },
          "Address": {
            "$ref": "#/components/schemas/SaveAddressMessage"
          },
          "AlternateAddress": {
            "$ref": "#/components/schemas/SaveAddressMessage"
          },
          "MailingPreference": {
            "description": "Mailing preference for the tenant. If an alternate address exists and this value is not provided then the primary address will be set as the preferred address.",
            "enum": ["PrimaryAddress", "AlternateAddress"],
            "type": "string"
          }
        }
      },
      "RentalUnitMessage": {
        "description": "This object represents a rental property unit.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Rental unit unique identifier.",
            "type": "integer"
          },
          "PropertyId": {
            "format": "int32",
            "description": "Rental property unique identifier that the unit belongs to.",
            "type": "integer"
          },
          "BuildingName": {
            "description": "Building name that the unit belongs to.",
            "type": "string"
          },
          "UnitNumber": {
            "description": "Unit number.",
            "type": "string"
          },
          "Description": {
            "description": "Description of the unit.",
            "type": "string"
          },
          "MarketRent": {
            "format": "double",
            "description": "Market rent of the unit. This value is separate from the lease rent and is typically used for rental listings. Null if no value is set.",
            "type": "number"
          },
          "Address": {
            "$ref": "#/components/schemas/AddressMessage"
          },
          "UnitBedrooms": {
            "description": "Number of bedrooms in the unit. Null if no value is set.",
            "enum": [
              "NotSet",
              "Studio",
              "OneBed",
              "TwoBed",
              "ThreeBed",
              "FourBed",
              "FiveBed",
              "SixBed",
              "SevenBed",
              "EightBed",
              "NineBedPlus"
            ],
            "type": "string"
          },
          "UnitBathrooms": {
            "description": "Number of bathrooms in the unit. Null if no value is set.",
            "enum": [
              "NotSet",
              "OneBath",
              "OnePointFiveBath",
              "TwoBath",
              "TwoPointFiveBath",
              "ThreeBath",
              "FourBath",
              "FiveBath",
              "FivePlusBath",
              "ThreePointFiveBath",
              "FourPointFiveBath"
            ],
            "type": "string"
          },
          "UnitSize": {
            "format": "int32",
            "description": "Size of the unit. Null if no value is set.",
            "type": "integer"
          },
          "IsUnitListed": {
            "description": "Whether the unit is currently listed for rent.",
            "type": "boolean"
          },
          "IsUnitOccupied": {
            "description": "Whether the unit is currently being rented by a tenent.",
            "type": "boolean"
          }
        }
      },
      "RentalUnitPutMessage": {
        "required": ["UnitNumber", "Address"],
        "type": "object",
        "properties": {
          "UnitNumber": {
            "description": "Unit number. Must be unique within the rental property and cannot exceed 30 characters.",
            "type": "string"
          },
          "UnitSize": {
            "format": "int32",
            "description": "Size of the unit.",
            "type": "integer"
          },
          "MarketRent": {
            "format": "double",
            "description": "Market rent of the unit. This value is separate from the lease rent and is typically used for rental listings.",
            "type": "number"
          },
          "Address": {
            "$ref": "#/components/schemas/SaveAddressMessage"
          },
          "UnitBedrooms": {
            "description": "Number of bedrooms in the unit.",
            "enum": [
              "NotSet",
              "Studio",
              "OneBed",
              "TwoBed",
              "ThreeBed",
              "FourBed",
              "FiveBed",
              "SixBed",
              "SevenBed",
              "EightBed",
              "NineBedPlus"
            ],
            "type": "string"
          },
          "UnitBathrooms": {
            "description": "Number of bathrooms in the unit.",
            "enum": [
              "NotSet",
              "OneBath",
              "OnePointFiveBath",
              "TwoBath",
              "TwoPointFiveBath",
              "ThreeBath",
              "FourBath",
              "FiveBath",
              "FivePlusBath",
              "ThreePointFiveBath",
              "FourPointFiveBath"
            ],
            "type": "string"
          },
          "Description": {
            "description": "Description of the unit. The description cannot exceed 65,535 characters.",
            "type": "string"
          }
        }
      },
      "RentalUnitSearchMessage": {
        "type": "object",
        "properties": {
          "PropertyIds": {
            "description": "Filters results to rental units that belong to the specified set of property ids.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      },
      "RentalUnitsPostMessage": {
        "required": ["UnitNumber", "PropertyId", "Address"],
        "type": "object",
        "properties": {
          "UnitNumber": {
            "description": "Unit number. Must be unique within the rental property and cannot exceed 30 characters.",
            "type": "string"
          },
          "PropertyId": {
            "format": "int32",
            "description": "Rental property unique identifier that the unit belongs to.",
            "type": "integer"
          },
          "UnitSize": {
            "format": "int32",
            "description": "Size of the unit.",
            "type": "integer"
          },
          "MarketRent": {
            "format": "double",
            "description": "Market rent of the unit. This value is separate from the lease rent and is typically used for rental listings.",
            "type": "number"
          },
          "Address": {
            "$ref": "#/components/schemas/SaveAddressMessage"
          },
          "UnitBedrooms": {
            "description": "Number of bedrooms in the unit.",
            "enum": [
              "NotSet",
              "Studio",
              "OneBed",
              "TwoBed",
              "ThreeBed",
              "FourBed",
              "FiveBed",
              "SixBed",
              "SevenBed",
              "EightBed",
              "NineBedPlus"
            ],
            "type": "string"
          },
          "UnitBathrooms": {
            "description": "Number of bathrooms in the unit.",
            "enum": [
              "NotSet",
              "OneBath",
              "OnePointFiveBath",
              "TwoBath",
              "TwoPointFiveBath",
              "ThreeBath",
              "FourBath",
              "FiveBath",
              "FivePlusBath",
              "ThreePointFiveBath",
              "FourPointFiveBath"
            ],
            "type": "string"
          },
          "Description": {
            "description": "Description of the unit. The description cannot exceed 65,535 characters.",
            "type": "string"
          }
        }
      },
      "RequestedByUserEntityMessage": {
        "description": "Entity information for the user that submitted the task request.",
        "type": "object",
        "properties": {
          "Type": {
            "description": "Entity type.",
            "enum": [
              "ContactRequestor",
              "RentalOwner",
              "RentalTenant",
              "AssociationOwner"
            ],
            "type": "string"
          },
          "Id": {
            "format": "int32",
            "description": "Entity identifier.",
            "type": "integer"
          },
          "FirstName": {
            "description": "First name.",
            "type": "string"
          },
          "LastName": {
            "description": "Last name.",
            "type": "string"
          },
          "IsCompany": {
            "description": "Indicates whether entity is a company.",
            "type": "boolean"
          },
          "Href": {
            "description": "A link to the entity resource.",
            "type": "string"
          }
        }
      },
      "ResidentRequestTaskMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Request unique identifier.",
            "type": "integer"
          },
          "Category": {
            "$ref": "#/components/schemas/TaskCategoryResponseMessage"
          },
          "Title": {
            "description": "Request title.",
            "type": "string"
          },
          "Description": {
            "description": "Request description.",
            "type": "string"
          },
          "Property": {
            "$ref": "#/components/schemas/PropertyMessage"
          },
          "UnitId": {
            "format": "int32",
            "description": "The unit unique identifier associated with the request.",
            "type": "integer"
          },
          "UnitAgreement": {
            "$ref": "#/components/schemas/UnitAgreementMessage"
          },
          "RequestedByUserEntity": {
            "$ref": "#/components/schemas/RequestedByUserEntityMessage"
          },
          "AssignedToUserId": {
            "format": "int32",
            "description": "The unique identifier of the staff user assigned to the request.",
            "type": "integer"
          },
          "TaskStatus": {
            "description": "Request status.",
            "enum": ["New", "InProgress", "Completed", "Deferred", "Closed"],
            "type": "string"
          },
          "Priority": {
            "description": "Request priority.",
            "enum": ["Low", "Normal", "High"],
            "type": "string"
          },
          "DueDate": {
            "format": "date",
            "description": "Request due date.",
            "type": "string"
          },
          "CreatedDateTime": {
            "format": "date-time",
            "description": "The date and time the request was created.",
            "type": "string"
          },
          "LastUpdatedDateTime": {
            "format": "date-time",
            "description": "The date and time the request was last updated.",
            "type": "string"
          },
          "Appliance": {
            "$ref": "#/components/schemas/ApplianceMessage"
          },
          "IsEntryPermittedByResident": {
            "description": "Indicates whether the resident has permitted entry. A null value represents no response was provided from the resident.",
            "type": "boolean"
          },
          "DoesResidentHavePets": {
            "description": "Indicates whether the resident has pets. A null value represents no response was provided from the resident.",
            "type": "boolean"
          },
          "ResidentEntryNotes": {
            "description": "Notes provided by the resident specific to entering the premises.",
            "type": "string"
          }
        }
      },
      "ResidentRequestTaskPostMessage": {
        "required": [
          "Title",
          "UnitAgreementId",
          "RequestedByEntityId",
          "TaskStatus",
          "Priority"
        ],
        "type": "object",
        "properties": {
          "Title": {
            "description": "Request title. The title can not exceed 127 characters.",
            "type": "string"
          },
          "Description": {
            "description": "Request description. The description can not exceed 65500 characters.",
            "type": "string"
          },
          "CategoryId": {
            "format": "int32",
            "description": "The category identifier to assign the request.",
            "type": "integer"
          },
          "SubCategoryId": {
            "format": "int32",
            "description": "The subcategory identifier to assign the request.",
            "type": "integer"
          },
          "UnitAgreementId": {
            "format": "int32",
            "description": "The unique identifier of the unit agreement associated with the request.",
            "type": "integer"
          },
          "RequestedByEntityId": {
            "format": "int32",
            "description": "The unique identifier of the resident that submitted the request.",
            "type": "integer"
          },
          "AssignedToUserId": {
            "format": "int32",
            "description": "The unique identifier of the staff user assigned to the request. The user must be a `Staff` user type.",
            "type": "integer"
          },
          "TaskStatus": {
            "description": "Request status.",
            "enum": ["New", "InProgress", "Completed", "Deferred", "Closed"],
            "type": "string"
          },
          "Priority": {
            "description": "Request priority.",
            "enum": ["Low", "Normal", "High"],
            "type": "string"
          },
          "DueDate": {
            "format": "date",
            "description": "Request due date. The date must be formatted as YYYY-MM-DD.",
            "type": "string"
          }
        }
      },
      "ResidentRequestTaskPutMessage": {
        "required": ["Title", "TaskStatus", "Priority"],
        "type": "object",
        "properties": {
          "Title": {
            "description": "Request title. The title can not exceed 127 characters.",
            "type": "string"
          },
          "Message": {
            "description": "Description of the request update. The message can not exceed 65500 characters.",
            "type": "string"
          },
          "CategoryId": {
            "format": "int32",
            "description": "The category identifier to assign the request.",
            "type": "integer"
          },
          "SubCategoryId": {
            "format": "int32",
            "description": "The subcategory identifier to assign the request.",
            "type": "integer"
          },
          "AssignedToUserId": {
            "format": "int32",
            "description": "The unique identifier of the staff user assigned to the request. The user must be a `Staff` user type.",
            "type": "integer"
          },
          "TaskStatus": {
            "description": "Request status.",
            "enum": ["New", "InProgress", "Completed", "Deferred", "Closed"],
            "type": "string"
          },
          "Priority": {
            "description": "Request priority.",
            "enum": ["Low", "Normal", "High"],
            "type": "string"
          },
          "DueDate": {
            "format": "date",
            "description": "Request due date. The date must be formatted as YYYY-MM-DD.",
            "type": "string"
          }
        }
      },
      "ResidentRequestTaskSearchMessage": {
        "type": "object",
        "properties": {
          "EntityType": {
            "description": "Specifies the type of entity that the `EntityId` field refers to. This field is required if the `EntityId` field is populated.",
            "enum": ["Rental", "RentalOwner", "Association"],
            "type": "string"
          },
          "EntityId": {
            "format": "int32",
            "description": "Filters results to any task associated with the specified entity id value. The value must be of the type specified in the `EntityType` field.",
            "type": "integer"
          },
          "Statuses": {
            "description": "Filters results by the status of the task. If no status is specified, tasks with any status will be returned.",
            "type": "array",
            "items": {
              "enum": ["New", "InProgress", "Completed", "Deferred", "Closed"],
              "type": "string"
            }
          },
          "UnitId": {
            "format": "int32",
            "description": "Filters results to any task associated with the unit identifier.",
            "type": "integer"
          },
          "UnitAgreementId": {
            "format": "int32",
            "description": "Filters results to any task associated with the unit agreement identifier specified.",
            "type": "integer"
          },
          "LastUpdatedFrom": {
            "format": "date",
            "description": "Filters results to any tasks were updated on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "LastUpdatedTo": {
            "format": "date",
            "description": "Filters results to any tasks were updated on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "DueDateFrom": {
            "format": "date",
            "description": "Filters results to any tasks with a due date on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "DueDateTo": {
            "format": "date",
            "description": "Filters results to any tasks with a due date on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "TaskCategoryId": {
            "format": "int32",
            "description": "Filters results to any tasks with the specified category identifier.",
            "type": "integer"
          },
          "Priorities": {
            "description": "Filters results to any tasks whose priority matches the specified values. If no priority is specified, tasks with any priority will be returned.",
            "type": "array",
            "items": {
              "enum": ["Low", "Normal", "High"],
              "type": "string"
            }
          },
          "AssignedToId": {
            "format": "int32",
            "description": "Filters results to any tasks that have been assigned to the specified staff user identifier.",
            "type": "integer"
          },
          "TaskTitle": {
            "description": "Filters results to any task whose title *contains* the specified value.",
            "type": "string"
          }
        }
      },
      "SaveAddressMessage": {
        "description": "This object represents an address.",
        "required": ["AddressLine1", "Country"],
        "type": "object",
        "properties": {
          "AddressLine1": {
            "description": "Address line 1 (e.g., street, PO Box, or company name). This value cannot exceed 100 characters.",
            "type": "string"
          },
          "AddressLine2": {
            "description": "Address line 2 (e.g., apartment, suite, unit, or building). This value cannot exceed 100 characters.",
            "type": "string"
          },
          "AddressLine3": {
            "description": "Address line 3.  This value cannot exceed 100 characters.",
            "type": "string"
          },
          "City": {
            "description": "City, district, suburb, town, or village. This value cannot exceed 100 characters.",
            "type": "string"
          },
          "State": {
            "description": "State, county, province, or region. When `Country` is set to `UnitedStates` this value must be a valid state name or abbreviation. If the value is `Canada` this value must be a valid Canadian province. For all other countries this field is optional and not validated.",
            "type": "string"
          },
          "PostalCode": {
            "description": "ZIP or postal code.",
            "type": "string"
          },
          "Country": {
            "description": "Country. Must be a valid `Country` enumeration value.",
            "enum": [
              "UnitedStates",
              "Afghanistan",
              "Akrotiri",
              "Albania",
              "Algeria",
              "AmericanSamoa",
              "Andorra",
              "Angola",
              "Anguilla",
              "Antarctica",
              "AntiguaandBarbuda",
              "Argentina",
              "Armenia",
              "Aruba",
              "AshmoreandCartierIslands",
              "Australia",
              "Austria",
              "Azerbaijan",
              "Bahamas",
              "Bahrain",
              "Bangladesh",
              "Barbados",
              "BassasdaIndia",
              "Belarus",
              "Belgium",
              "Belize",
              "Benin",
              "Bermuda",
              "Bhutan",
              "Bolivia",
              "BosniaandHerzegovina",
              "Botswana",
              "BouvetIsland",
              "Brazil",
              "BritishIndianOceanTerritory",
              "BritishVirginIslands",
              "Brunei",
              "Bulgaria",
              "BurkinaFaso",
              "Burma",
              "Burundi",
              "Cambodia",
              "Cameroon",
              "Canada",
              "CapeVerde",
              "CaymanIslands",
              "CentralAfricanRepublic",
              "Chad",
              "Chile",
              "China",
              "ChristmasIsland",
              "ClippertonIsland",
              "CocosIslands",
              "Colombia",
              "Comoros",
              "DemocraticRepublicOfTheCongo",
              "RepublicOfTheCongo",
              "CookIslands",
              "CoralSeaIslands",
              "CostaRica",
              "CotedIvoire",
              "Croatia",
              "Cuba",
              "Cyprus",
              "CzechRepublic",
              "Denmark",
              "Dhekelia",
              "Djibouti",
              "Dominica",
              "DominicanRepublic",
              "Ecuador",
              "Egypt",
              "ElSalvador",
              "EquatorialGuinea",
              "Eritrea",
              "Estonia",
              "Ethiopia",
              "EuropaIsland",
              "FalklandIslands",
              "FaroeIslands",
              "Fiji",
              "Finland",
              "France",
              "FrenchGuiana",
              "FrenchPolynesia",
              "FrenchSouthernandAntarcticLands",
              "Gabon",
              "Gambia",
              "GazaStrip",
              "Georgia",
              "Germany",
              "Ghana",
              "Gibraltar",
              "GloriosoIslands",
              "Greece",
              "Greenland",
              "Grenada",
              "Guadeloupe",
              "Guam",
              "Guatemala",
              "Guernsey",
              "Guinea",
              "GuineaBissau",
              "Guyana",
              "Haiti",
              "HeardIslandandMcDonaldIslands",
              "VaticanCity",
              "Honduras",
              "HongKong",
              "Hungary",
              "Iceland",
              "India",
              "Indonesia",
              "Iran",
              "Iraq",
              "Ireland",
              "IsleofMan",
              "Israel",
              "Italy",
              "Jamaica",
              "JanMayen",
              "Japan",
              "Jersey",
              "Jordan",
              "JuandeNovaIsland",
              "Kazakhstan",
              "Kenya",
              "Kiribati",
              "NorthKorea",
              "SouthKorea",
              "Kuwait",
              "Kyrgyzstan",
              "Laos",
              "Latvia",
              "Lebanon",
              "Lesotho",
              "Liberia",
              "Libya",
              "Liechtenstein",
              "Lithuania",
              "Luxembourg",
              "Macau",
              "Macedonia",
              "Madagascar",
              "Malawi",
              "Malaysia",
              "Maldives",
              "Mali",
              "Malta",
              "MarshallIslands",
              "Martinique",
              "Mauritania",
              "Mauritius",
              "Mayotte",
              "Mexico",
              "Micronesia",
              "Moldova",
              "Monaco",
              "Mongolia",
              "Montserrat",
              "Morocco",
              "Mozambique",
              "Namibia",
              "Nauru",
              "NavassaIsland",
              "Nepal",
              "Netherlands",
              "NetherlandsAntilles",
              "NewCaledonia",
              "NewZealand",
              "Nicaragua",
              "Niger",
              "Nigeria",
              "Niue",
              "NorfolkIsland",
              "NorthernMarianaIslands",
              "Norway",
              "Oman",
              "Pakistan",
              "Palau",
              "Panama",
              "PapuaNewGuinea",
              "ParacelIslands",
              "Paraguay",
              "Peru",
              "Philippines",
              "PitcairnIslands",
              "Poland",
              "Portugal",
              "PuertoRico",
              "Qatar",
              "Reunion",
              "Romania",
              "Russia",
              "Rwanda",
              "SaintHelena",
              "SaintKittsandNevis",
              "SaintLucia",
              "SaintPierreandMiquelon",
              "SaintVincentandtheGrenadines",
              "Samoa",
              "SanMarino",
              "SaoTomeandPrincipe",
              "SaudiArabia",
              "Senegal",
              "SerbiaandMontenegro",
              "Seychelles",
              "SierraLeone",
              "Singapore",
              "Slovakia",
              "Slovenia",
              "SolomonIslands",
              "Somalia",
              "SouthAfrica",
              "SouthGeorgiaandtheSouthSandwichIslands",
              "Spain",
              "SpratlyIslands",
              "SriLanka",
              "Sudan",
              "Suriname",
              "Svalbard",
              "Swaziland",
              "Sweden",
              "Switzerland",
              "Syria",
              "Taiwan",
              "Tajikistan",
              "Tanzania",
              "Thailand",
              "TimorLeste",
              "Togo",
              "Tokelau",
              "Tonga",
              "TrinidadandTobago",
              "TromelinIsland",
              "Tunisia",
              "Turkey",
              "Turkmenistan",
              "TurksandCaicosIslands",
              "Tuvalu",
              "Uganda",
              "Ukraine",
              "UnitedArabEmirates",
              "UnitedKingdom",
              "Uruguay",
              "Uzbekistan",
              "Vanuatu",
              "Venezuela",
              "Vietnam",
              "VirginIslands",
              "WakeIsland",
              "WallisandFutuna",
              "WestBank",
              "WesternSahara",
              "Yemen",
              "Zambia",
              "Zimbabwe"
            ],
            "type": "string"
          }
        }
      },
      "SaveEmergencyContactMessage": {
        "type": "object",
        "properties": {
          "Name": {
            "description": "This is an object that represents an emergency contact.",
            "type": "string"
          },
          "RelationshipDescription": {
            "description": "Emergency contact relationship to the person.",
            "type": "string"
          },
          "Phone": {
            "description": "Emergency contact phone number",
            "type": "string"
          },
          "Email": {
            "description": "Emergency contact email address.",
            "type": "string"
          }
        }
      },
      "TaskCategoryMessage": {
        "description": "Task category.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Task category unique identifier.",
            "type": "integer"
          },
          "Name": {
            "description": "Name of the task category.",
            "type": "string"
          },
          "IsSystemCategory": {
            "description": "Indicates whether the category is a system category. Note, system categories can not be edited.",
            "type": "boolean"
          },
          "SubCategories": {
            "description": "Subcategories associated with the task category.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskSubCategoryMessage"
            }
          }
        }
      },
      "TaskCategoryPutMessage": {
        "description": "Task category.",
        "required": ["Name"],
        "type": "object",
        "properties": {
          "Name": {
            "description": "Name of the task category.",
            "type": "string"
          }
        }
      },
      "TaskCategoryResponseMessage": {
        "description": "Task category.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Task category unique identifier.",
            "type": "integer"
          },
          "Name": {
            "description": "Name of the task category.",
            "type": "string"
          },
          "Href": {
            "description": "A link to the task category resource.",
            "type": "string"
          },
          "SubCategory": {
            "$ref": "#/components/schemas/TaskSubCategoryMessage"
          }
        }
      },
      "TaskCategorySaveMessage": {
        "description": "Task category.",
        "required": ["Name"],
        "type": "object",
        "properties": {
          "Name": {
            "description": "Name of the task category.",
            "type": "string"
          }
        }
      },
      "TaskSearchMessage": {
        "type": "object",
        "properties": {
          "EntityType": {
            "description": "Specifies the type of entity that the `EntityId` field refers to. This field is required if the `EntityId` field is populated.",
            "enum": ["Rental", "RentalOwner", "Association"],
            "type": "string"
          },
          "EntityId": {
            "format": "int32",
            "description": "Filters results to any task associated with the specified entity id value. The value must be of the type specified in the `EntityType` field.",
            "type": "integer"
          },
          "Statuses": {
            "description": "Filters results by the status of the task. If no status is specified, tasks with any status will be returned.",
            "type": "array",
            "items": {
              "enum": ["New", "InProgress", "Completed", "Deferred", "Closed"],
              "type": "string"
            }
          },
          "Type": {
            "description": "Filters results to any task associated with the task type specified.",
            "enum": [
              "ContactRequest",
              "ResidentRequest",
              "Todo",
              "RentalOwnerRequest"
            ],
            "type": "string"
          },
          "UnitId": {
            "format": "int32",
            "description": "Filters results to any task associated with the unit identifier.",
            "type": "integer"
          },
          "UnitAgreementId": {
            "format": "int32",
            "description": "Filters results to any task associated with the unit agreement identifier specified.",
            "type": "integer"
          },
          "LastUpdatedFrom": {
            "format": "date",
            "description": "Filters results to any tasks were updated on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "LastUpdatedTo": {
            "format": "date",
            "description": "Filters results to any tasks were updated on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "DueDateFrom": {
            "format": "date",
            "description": "Filters results to any tasks with a due date on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "DueDateTo": {
            "format": "date",
            "description": "Filters results to any tasks with a due date on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "TaskCategoryId": {
            "format": "int32",
            "description": "Filters results to any tasks with the specified category identifier.",
            "type": "integer"
          },
          "Priorities": {
            "description": "Filters results to any tasks whose priority matches the specified values. If no priority is specified, tasks with any priority will be returned.",
            "type": "array",
            "items": {
              "enum": ["Low", "Normal", "High"],
              "type": "string"
            }
          },
          "AssignedToId": {
            "format": "int32",
            "description": "Filters results to any tasks that have been assigned to the specified staff user identifier.",
            "type": "integer"
          },
          "TaskTitle": {
            "description": "Filters results to any task whose title *contains* the specified value.",
            "type": "string"
          }
        }
      },
      "TaskSubCategoryMessage": {
        "description": "Task subcategory.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Task subcategory unique identifier.",
            "type": "integer"
          },
          "Name": {
            "description": "Name of the task subcategory.",
            "type": "string"
          }
        }
      },
      "TaxInformationPostMessage": {
        "description": "Tax information.",
        "type": "object",
        "properties": {
          "TaxPayerId": {
            "description": "The unique identifier of the tax payer. Required if `TaxPayerType` is set. Format the values based on the `TaxPayerIdType` that is specified in the request. `SSN` must be formatted as 123-45-6789. `EIN` must be formatted as 12-3456789.",
            "type": "string"
          },
          "TaxPayerType": {
            "description": "The tax payer type. Required if `TaxPayerId` is set.",
            "enum": ["SSN", "EIN"],
            "type": "string"
          },
          "TaxPayerName1": {
            "description": "The tax payer name 1. The value cannot exceed 40 characters.",
            "type": "string"
          },
          "TaxPayerName2": {
            "description": "The tax payer name 2. The value cannot exceed 40 characters.",
            "type": "string"
          },
          "Address": {
            "$ref": "#/components/schemas/SaveAddressMessage"
          }
        }
      },
      "TaxInformationSaveMessage": {
        "description": "Tax information.",
        "required": ["IncludeIn1099"],
        "type": "object",
        "properties": {
          "TaxPayerId": {
            "description": "The unique identifier of the tax payer. Required if `TaxPayerType` is set. Format the values based on the `TaxPayerIdType` that is specified in the request. `SSN` must be formatted as 123-45-6789. `EIN` must be formatted as 12-3456789.",
            "type": "string"
          },
          "TaxPayerType": {
            "description": "The tax payer type. Required if `TaxPayerId` is set.",
            "enum": ["SSN", "EIN"],
            "type": "string"
          },
          "TaxPayerName1": {
            "description": "The tax payer name 1. The value cannot exceed 40 characters.",
            "type": "string"
          },
          "TaxPayerName2": {
            "description": "The tax payer name 2. The value cannot exceed 40 characters.",
            "type": "string"
          },
          "IncludeIn1099": {
            "description": "Indicates whether the vendor should be included in 1099 form generation.",
            "type": "boolean"
          },
          "Address": {
            "$ref": "#/components/schemas/SaveAddressMessage"
          }
        }
      },
      "TenantMessage": {
        "description": "This object represents a rental property tenant.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Tenant unique identifier.",
            "type": "integer"
          },
          "FirstName": {
            "description": "First name of the tenant.",
            "type": "string"
          },
          "LastName": {
            "description": "Last name of the tenant.",
            "type": "string"
          },
          "Email": {
            "description": "Email for the tenant.",
            "type": "string"
          },
          "AlternateEmail": {
            "description": "Alternate email of the tenant.",
            "type": "string"
          },
          "PhoneNumbers": {
            "description": "List of phone numbers for the tenant.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberMessage"
            }
          },
          "CreatedDateTime": {
            "format": "date-time",
            "description": "Created date of this tenant record.",
            "type": "string"
          },
          "EmergencyContact": {
            "$ref": "#/components/schemas/EmergencyContactMessage"
          },
          "DateOfBirth": {
            "format": "date",
            "description": "Tenant date of birth.",
            "type": "string"
          },
          "SMSOptInStatus": {
            "description": "Indicates the tenants SMS opt in status. Null if no status exists for the tenant.",
            "enum": ["NotSet", "RequestSent", "OptedIn", "OptedOut"],
            "type": "string"
          },
          "Address": {
            "$ref": "#/components/schemas/AddressMessage"
          },
          "AlternateAddress": {
            "$ref": "#/components/schemas/AddressMessage"
          },
          "MailingPreference": {
            "description": "Mailing preference for the tenant.",
            "enum": ["PrimaryAddress", "AlternateAddress"],
            "type": "string"
          },
          "Leases": {
            "description": "List of leases, regardless of status, that the tenant is associated with.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeaseMessage"
            }
          },
          "Comment": {
            "description": "Comments about the tenant.",
            "type": "string"
          },
          "TaxId": {
            "description": "TaxId of the tenant.",
            "type": "string"
          }
        }
      },
      "TenantSearchMessage": {
        "description": "This object represents a filter for a rental tenant search.",
        "type": "object",
        "properties": {
          "BuildingStatuses": {
            "description": "Filters results by the status of the rental property the tenants are associated with. If no status is specified tenants in either `active` and `inactive` rental properties will be returned.",
            "type": "array",
            "items": {
              "enum": ["Active", "InActive"],
              "type": "string"
            }
          },
          "LeaseTermStatuses": {
            "description": "Filters results to any tenant whose lease term matches the specified status.  If no status is specified tenants with any lease terms status will be returned.",
            "type": "array",
            "items": {
              "enum": ["Active", "Past", "Future"],
              "type": "string"
            }
          },
          "UnitNumber": {
            "description": "Filters results to any tenant whose unit number *contains* the specified value.",
            "type": "string"
          },
          "Name": {
            "description": "Filters results to any tenant whose name *contains* the specified value.",
            "type": "string"
          },
          "Phone": {
            "description": "Filters results to any tenant whose phone number *contains* the specified value.",
            "type": "string"
          },
          "Email": {
            "description": "Filters results to any tenant whose email *contains* the specified value.",
            "type": "string"
          },
          "PropertyIds": {
            "description": "Filters results to tenants whose rental unit belongs to the specified set of property ids.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "RentalOwnerIds": {
            "description": "Filters results to tenants whose rental unit belongs to a property with a rental owner in the specified set of rental owner ids.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      },
      "ToDoTaskMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Request unique identifier.",
            "type": "integer"
          },
          "Category": {
            "$ref": "#/components/schemas/TaskCategoryResponseMessage"
          },
          "Title": {
            "description": "Request title.",
            "type": "string"
          },
          "Description": {
            "description": "Request description.",
            "type": "string"
          },
          "Property": {
            "$ref": "#/components/schemas/PropertyMessage"
          },
          "UnitId": {
            "format": "int32",
            "description": "The unit unique identifier associated with the request.",
            "type": "integer"
          },
          "AssignedToUserId": {
            "format": "int32",
            "description": "The unique identifier of the staff user assigned to the request.",
            "type": "integer"
          },
          "TaskStatus": {
            "description": "Request status.",
            "enum": ["New", "InProgress", "Completed", "Deferred", "Closed"],
            "type": "string"
          },
          "Priority": {
            "description": "Request priority.",
            "enum": ["Low", "Normal", "High"],
            "type": "string"
          },
          "DueDate": {
            "format": "date",
            "description": "Request due date.",
            "type": "string"
          },
          "CreatedDateTime": {
            "format": "date-time",
            "description": "The date and time the request was created.",
            "type": "string"
          },
          "LastUpdatedDateTime": {
            "format": "date-time",
            "description": "The date and time the request was last updated.",
            "type": "string"
          }
        }
      },
      "ToDoTaskPostMessage": {
        "required": ["Title", "AssignedToUserId", "TaskStatus", "Priority"],
        "type": "object",
        "properties": {
          "Title": {
            "description": "Request title. The title can not exceed 127 characters.",
            "type": "string"
          },
          "Description": {
            "description": "Request description. The description can not exceed 65500 characters.",
            "type": "string"
          },
          "CategoryId": {
            "format": "int32",
            "description": "The category identifier to assign the request.",
            "type": "integer"
          },
          "SubCategoryId": {
            "format": "int32",
            "description": "The subcategory identifier to assign the request.",
            "type": "integer"
          },
          "PropertyId": {
            "format": "int32",
            "description": "The unique identifier of property associated with the request. The assigned property must be active.",
            "type": "integer"
          },
          "UnitId": {
            "format": "int32",
            "description": "The unique identifier of the unit associated with the request. The unit must be associated with the `PropertyId` specified.",
            "type": "integer"
          },
          "AssignedToUserId": {
            "format": "int32",
            "description": "The unique identifier of the staff user assigned to the request. The user must be a `Staff` user type.",
            "type": "integer"
          },
          "TaskStatus": {
            "description": "Request status.",
            "enum": ["New", "InProgress", "Completed", "Deferred", "Closed"],
            "type": "string"
          },
          "Priority": {
            "description": "Request priority.",
            "enum": ["Low", "Normal", "High"],
            "type": "string"
          },
          "DueDate": {
            "format": "date",
            "description": "Request due date. The date must be formatted as YYYY-MM-DD.",
            "type": "string"
          }
        }
      },
      "ToDoTaskPutMessage": {
        "required": ["Title", "AssignedToUserId", "TaskStatus", "Priority"],
        "type": "object",
        "properties": {
          "Title": {
            "description": "Request title. The title can not exceed 127 characters.",
            "type": "string"
          },
          "Message": {
            "description": "Description of the request update. The message can not exceed 65500 characters.",
            "type": "string"
          },
          "CategoryId": {
            "format": "int32",
            "description": "The category identifier to assign the request.",
            "type": "integer"
          },
          "SubCategoryId": {
            "format": "int32",
            "description": "The subcategory identifier to assign the request.",
            "type": "integer"
          },
          "PropertyId": {
            "format": "int32",
            "description": "The unique identifier of property associated with the request. The assigned property must be active.",
            "type": "integer"
          },
          "UnitId": {
            "format": "int32",
            "description": "The unique identifier of the unit associated with the request. The unit must be associated with the `PropertyId` specified.",
            "type": "integer"
          },
          "AssignedToUserId": {
            "format": "int32",
            "description": "The unique identifier of the staff user assigned to the request. The user must be a `Staff` user type.",
            "type": "integer"
          },
          "TaskStatus": {
            "description": "Request status.",
            "enum": ["New", "InProgress", "Completed", "Deferred", "Closed"],
            "type": "string"
          },
          "Priority": {
            "description": "Request priority.",
            "enum": ["Low", "Normal", "High"],
            "type": "string"
          },
          "DueDate": {
            "format": "date",
            "description": "Request due date. The date must be formatted as YYYY-MM-DD.",
            "type": "string"
          }
        }
      },
      "ToDoTaskSearchMessage": {
        "type": "object",
        "properties": {
          "EntityType": {
            "description": "Specifies the type of entity that the `EntityId` field refers to. This field is required if the `EntityId` field is populated.",
            "enum": ["Rental", "RentalOwner", "Association"],
            "type": "string"
          },
          "EntityId": {
            "format": "int32",
            "description": "Filters results to any task associated with the specified entity id value. The value must be of the type specified in the `EntityType` field.",
            "type": "integer"
          },
          "Statuses": {
            "description": "Filters results by the status of the task. If no status is specified, tasks with any status will be returned.",
            "type": "array",
            "items": {
              "enum": ["New", "InProgress", "Completed", "Deferred", "Closed"],
              "type": "string"
            }
          },
          "UnitId": {
            "format": "int32",
            "description": "Filters results to any task associated with the unit identifier.",
            "type": "integer"
          },
          "LastUpdatedFrom": {
            "format": "date",
            "description": "Filters results to any tasks were updated on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "LastUpdatedTo": {
            "format": "date",
            "description": "Filters results to any tasks were updated on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "DueDateFrom": {
            "format": "date",
            "description": "Filters results to any tasks with a due date on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "DueDateTo": {
            "format": "date",
            "description": "Filters results to any tasks with a due date on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "TaskCategoryId": {
            "format": "int32",
            "description": "Filters results to any tasks with the specified category identifier.",
            "type": "integer"
          },
          "Priorities": {
            "description": "Filters results to any tasks whose priority matches the specified values. If no priority is specified, tasks with any priority will be returned.",
            "type": "array",
            "items": {
              "enum": ["Low", "Normal", "High"],
              "type": "string"
            }
          },
          "AssignedToId": {
            "format": "int32",
            "description": "Filters results to any tasks that have been assigned to the specified staff user identifier.",
            "type": "integer"
          },
          "TaskTitle": {
            "description": "Filters results to any task whose title *contains* the specified value.",
            "type": "string"
          }
        }
      },
      "UndepositedFundsMessage": {
        "type": "object",
        "properties": {
          "GeneralLedgerTransaction": {
            "$ref": "#/components/schemas/GLTransactionMessageV1"
          }
        }
      },
      "UnitAgreementMessage": {
        "description": "Unit agreement.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Unit agreement unique identifier.",
            "type": "integer"
          },
          "Type": {
            "description": "The type of unit agreement.",
            "enum": ["NotSet", "Lease", "OwnershipAccount"],
            "type": "string"
          },
          "Href": {
            "description": "A link to the unit agreement resource.",
            "type": "string"
          }
        }
      },
      "UserMessage": {
        "description": "This object represents a User.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "User unique identifier.",
            "type": "integer"
          },
          "UserTypes": {
            "description": "User Type.",
            "type": "array",
            "items": {
              "enum": ["Staff", "RentalOwner", "Vendor"],
              "type": "string"
            }
          },
          "IsActive": {
            "description": "User status.",
            "type": "boolean"
          },
          "LastLogin": {
            "format": "date-time",
            "description": "Last Login. Null if no value.",
            "type": "string"
          },
          "FirstName": {
            "description": "First Name of User.",
            "type": "string"
          },
          "LastName": {
            "description": "Last Name of User.",
            "type": "string"
          },
          "CompanyName": {
            "description": "Company Name.",
            "type": "string"
          },
          "Email": {
            "description": "Email of User.",
            "type": "string"
          },
          "AlternateEmail": {
            "description": "Alternate Email of User.",
            "type": "string"
          },
          "PhoneNumbers": {
            "description": "List of phone numbers for the User.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberMessage"
            }
          },
          "UserRole": {
            "$ref": "#/components/schemas/UserRoleMessage"
          },
          "IsCompany": {
            "description": "Specifies whether or not it is a company.",
            "type": "boolean"
          }
        }
      },
      "UserRoleMessage": {
        "description": "This object represents a user role.",
        "type": "object",
        "properties": {
          "Name": {
            "description": "User Role Name.",
            "type": "string"
          },
          "Description": {
            "description": "User Role Description.",
            "type": "string"
          },
          "Id": {
            "format": "int32",
            "description": "User Role unique identifier.",
            "type": "integer"
          },
          "NumberOfUsers": {
            "format": "int64",
            "description": "Number of Users under User Role Type.",
            "type": "integer"
          }
        }
      },
      "UserSearchMessage": {
        "description": "This object represents a filter for a User search.",
        "type": "object",
        "properties": {
          "RoleIds": {
            "description": "Describes the role of the user.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "UserTypes": {
            "description": "Describes the user type of the user.",
            "type": "array",
            "items": {
              "enum": ["Staff", "RentalOwner", "Vendor"],
              "type": "string"
            }
          },
          "Status": {
            "description": "Filters results by the status of the user. If no status is specified both `active` and `inactive` staff members will be returned.",
            "enum": ["Inactive", "Active"],
            "type": "string"
          },
          "Name": {
            "description": "Filters results to only records whose name *contains* the specified value.",
            "type": "string"
          },
          "Email": {
            "description": "Filters results to only records whose email *contains* the specified value.",
            "type": "string"
          }
        }
      },
      "VehicleMessage": {
        "description": "This is an object that represents a vehicle.",
        "type": "object",
        "properties": {
          "Make": {
            "description": "Make of the vehicle.",
            "type": "string"
          },
          "Model": {
            "description": "Model of the vehicle.",
            "type": "string"
          },
          "LicensePlateNumber": {
            "description": "License plate number of the vehicle.",
            "type": "string"
          },
          "ParkingPassNumber": {
            "description": "Parking pass number assigned to the vehicle.",
            "type": "string"
          }
        }
      },
      "VendorCategoryMessage": {
        "description": "This object represents a vendor category.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Unique identifier.",
            "type": "integer"
          },
          "Name": {
            "description": "Name.",
            "type": "string"
          },
          "IsSystemCategory": {
            "description": "Indicates whether the category is a system category.",
            "type": "boolean"
          }
        }
      },
      "VendorCategorySaveMessage": {
        "required": ["Name"],
        "type": "object",
        "properties": {
          "Name": {
            "description": "The category name.",
            "type": "string"
          }
        }
      },
      "VendorInsuranceMessage": {
        "description": "Vendor insurance information.",
        "type": "object",
        "properties": {
          "Provider": {
            "description": "Insurance provider.",
            "type": "string"
          },
          "PolicyNumber": {
            "description": "Insurance policy number.",
            "type": "string"
          },
          "ExpirationDate": {
            "format": "date-time",
            "description": "Expiration date of the insurance policy. Null if no expiration exists.",
            "type": "string"
          }
        }
      },
      "VendorInsuranceSaveMessage": {
        "description": "Vendor insurance information.",
        "type": "object",
        "properties": {
          "Provider": {
            "description": "Insurance provider. This value can not exceed 65 characters.",
            "type": "string"
          },
          "PolicyNumber": {
            "description": "Insurance policy number. This value can not exceed 65 characters.",
            "type": "string"
          },
          "ExpirationDate": {
            "format": "date",
            "description": "Expiration date of the insurance policy. The date must be formatted as YYYY-MM-DD.",
            "type": "string"
          }
        }
      },
      "VendorMessage": {
        "description": "This is an object that represents a vendor.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Vendor unique identifier.",
            "type": "integer"
          },
          "IsCompany": {
            "description": "Indicates whether the vendor is a company.",
            "type": "boolean"
          },
          "IsActive": {
            "description": "Indicates whether the vendor is active within the Buildium platform.",
            "type": "boolean"
          },
          "FirstName": {
            "description": "First name of the vendor. Empty if `IsCompany` is `true`.",
            "type": "string"
          },
          "LastName": {
            "description": "Last name of the vendor. Empty if `IsCompany` is `true`.",
            "type": "string"
          },
          "PrimaryEmail": {
            "description": "Primary email for the vendor.",
            "type": "string"
          },
          "AlternateEmail": {
            "description": "Alternate email for the vendor.",
            "type": "string"
          },
          "CompanyName": {
            "description": "Company name for the vendor. Empty if `IsCompany` is `false`",
            "type": "string"
          },
          "PhoneNumbers": {
            "description": "List of phone numbers for the vendor.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberMessage"
            }
          },
          "Website": {
            "description": "Website of the vendor.",
            "type": "string"
          },
          "Category": {
            "$ref": "#/components/schemas/LookupMessage"
          },
          "Address": {
            "$ref": "#/components/schemas/AddressMessage"
          },
          "VendorInsurance": {
            "$ref": "#/components/schemas/VendorInsuranceMessage"
          },
          "Comments": {
            "description": "General comments about the vendor.",
            "type": "string"
          },
          "AccountNumber": {
            "description": "Vendor account number.",
            "type": "string"
          },
          "ExpenseGLAccountId": {
            "format": "int32",
            "description": "The unique identifier of the default expense general ledger account to associate with the vendor.",
            "type": "integer"
          },
          "TaxInformation": {
            "$ref": "#/components/schemas/VendorTaxInformationMessage"
          }
        }
      },
      "VendorPostMessage": {
        "required": ["IsCompany", "CategoryId"],
        "type": "object",
        "properties": {
          "FirstName": {
            "description": "First name of the vendor. Required if `IsCompany` is `false`. The value cannot exceed 127 characters.",
            "type": "string"
          },
          "LastName": {
            "description": "Last name of the vendor. Required if `IsCompany` is `false`. The value cannot exceed 127 characters.",
            "type": "string"
          },
          "IsCompany": {
            "description": "Indicates whether the vendor should be considered a company or person.",
            "type": "boolean"
          },
          "CompanyName": {
            "description": "Company name of the vendor. Required if `IsCompany` is `true`. The value cannot exceed 127 characters.",
            "type": "string"
          },
          "PrimaryEmail": {
            "description": "Primary email for the vendor.",
            "type": "string"
          },
          "AlternateEmail": {
            "description": "Alternate email for the vendor.",
            "type": "string"
          },
          "PhoneNumbers": {
            "$ref": "#/components/schemas/PhoneNumbersMessage"
          },
          "Address": {
            "$ref": "#/components/schemas/SaveAddressMessage"
          },
          "CategoryId": {
            "format": "int32",
            "description": "The unique identifier of the vendor category.",
            "type": "integer"
          },
          "ExpenseGlAccountId": {
            "format": "int32",
            "description": "The unique identifier of the default expense general ledger account to associate with the vendor.",
            "type": "integer"
          },
          "AccountNumber": {
            "description": "The account number of the vendor. The value cannot exceed 30 characters.",
            "type": "string"
          },
          "Website": {
            "description": "The website of the vendor. The value must be a valid URL. For example `http://www.example.com`. The value cannot exceed 100 characters.",
            "type": "string"
          },
          "VendorInsurance": {
            "$ref": "#/components/schemas/VendorInsuranceSaveMessage"
          },
          "Comments": {
            "description": "Comments about the vendor. The value cannot exceed 65,535 characters.",
            "type": "string"
          },
          "TaxInformation": {
            "$ref": "#/components/schemas/TaxInformationPostMessage"
          }
        }
      },
      "VendorPutMessage": {
        "required": ["IsCompany", "CategoryId"],
        "type": "object",
        "properties": {
          "FirstName": {
            "description": "First name of the vendor. Required if `IsCompany` is `false`. The value cannot exceed 127 characters.",
            "type": "string"
          },
          "LastName": {
            "description": "Last name of the vendor. Required if `IsCompany` is `false`. The value cannot exceed 127 characters.",
            "type": "string"
          },
          "IsCompany": {
            "description": "Indicates whether the vendor should be considered a company or person.",
            "type": "boolean"
          },
          "CompanyName": {
            "description": "Company name of the vendor. Required if `IsCompany` is `true`. The value cannot exceed 127 characters.",
            "type": "string"
          },
          "PrimaryEmail": {
            "description": "Primary email for the vendor.",
            "type": "string"
          },
          "AlternateEmail": {
            "description": "Alternate email for the vendor.",
            "type": "string"
          },
          "PhoneNumbers": {
            "$ref": "#/components/schemas/PhoneNumbersMessage"
          },
          "Address": {
            "$ref": "#/components/schemas/SaveAddressMessage"
          },
          "CategoryId": {
            "format": "int32",
            "description": "The unique identifier of the vendor category.",
            "type": "integer"
          },
          "ExpenseGlAccountId": {
            "format": "int32",
            "description": "The unique identifier of the default expense general ledger account to associate with the vendor.",
            "type": "integer"
          },
          "AccountNumber": {
            "description": "The account number of the vendor. The value cannot exceed 30 characters.",
            "type": "string"
          },
          "Website": {
            "description": "The website of the vendor. The value must be a valid URL. For example \"http://www.example.com\". The value cannot exceed 100 characters.",
            "type": "string"
          },
          "VendorInsurance": {
            "$ref": "#/components/schemas/VendorInsuranceSaveMessage"
          },
          "Comments": {
            "description": "Comments about the vendor. The value cannot exceed 65,535 characters.",
            "type": "string"
          },
          "TaxInformation": {
            "$ref": "#/components/schemas/TaxInformationSaveMessage"
          }
        }
      },
      "VendorSearchMessage": {
        "type": "object",
        "properties": {
          "Status": {
            "description": "Filters results by the status of the vendor. If no status is specified both `active` and `inactive` vendors will be returned.",
            "enum": ["Inactive", "Active"],
            "type": "string"
          },
          "Email": {
            "description": "Filters results to any vendor whose email *contains* the specified value.",
            "type": "string"
          },
          "Website": {
            "description": "Filters results to any vendor whose website *contains* the specified value.",
            "type": "string"
          },
          "Name": {
            "description": "Filters results to any vendor whose name *contains* the specified value.",
            "type": "string"
          },
          "InsuranceExpiration": {
            "description": "Filters results to any vendor whose insurance will expire in the specified date range.",
            "enum": [
              "None",
              "Any",
              "Expired",
              "ThirtyDaysOrLess",
              "SixtyDaysOrLess",
              "NinetyDaysOrLess"
            ],
            "type": "string"
          },
          "Phone": {
            "description": "Filters results to any vendor who has a phone number that *contains* the specified value.",
            "type": "string"
          }
        }
      },
      "VendorTaxInformationMessage": {
        "description": "Vendor tax information.",
        "type": "object",
        "properties": {
          "TaxPayerIdType": {
            "description": "Indicates the type of tax payer id being specified in the request.",
            "enum": ["SSN", "EIN"],
            "type": "string"
          },
          "TaxPayerId": {
            "description": "The tax payer identifier.",
            "type": "string"
          },
          "TaxPayerName1": {
            "description": "Tax payer name line 1.",
            "type": "string"
          },
          "TaxPayerName2": {
            "description": "Tax payer name line 2.",
            "type": "string"
          },
          "IncludeIn1099": {
            "description": "Indicates whether the vendor should be included in 1099 form generation.",
            "type": "boolean"
          },
          "Address": {
            "$ref": "#/components/schemas/AddressMessage"
          }
        }
      },
      "WorkOrderEntryContactMessage": {
        "description": "Contact entity for the work order.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Contact entity unique identifier.",
            "type": "integer"
          },
          "Resources": {
            "description": "List of contact entity resources.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkOrderEntryContactResourceMessage"
            }
          }
        }
      },
      "WorkOrderEntryContactResourceMessage": {
        "description": "Work order entry contact.",
        "type": "object",
        "properties": {
          "Type": {
            "description": "Contact entity type.",
            "enum": [
              "RentalTenant",
              "AssociationOwner",
              "Staff",
              "RentalOwner"
            ],
            "type": "string"
          },
          "Href": {
            "description": "Link to the contact resource.",
            "type": "string"
          }
        }
      },
      "WorkOrderLineItemMessage": {
        "description": "Work order line item.",
        "type": "object",
        "properties": {
          "GlAccountId": {
            "format": "int32",
            "description": "General ledger account unique identifier.",
            "type": "integer"
          },
          "Quantity": {
            "format": "double",
            "description": "Line item quantity.",
            "type": "number"
          },
          "Memo": {
            "description": "Line item memo.",
            "type": "string"
          },
          "UnitPrice": {
            "format": "double",
            "description": "Line item unit price.",
            "type": "number"
          }
        }
      },
      "WorkOrderLineItemSaveMessage": {
        "required": ["Quantity", "UnitPrice"],
        "type": "object",
        "properties": {
          "GlAccountId": {
            "format": "int32",
            "description": "General ledger account unique identifier.",
            "type": "integer"
          },
          "Quantity": {
            "format": "double",
            "description": "Line item quantity.",
            "type": "number"
          },
          "Memo": {
            "description": "Line item memo.",
            "type": "string"
          },
          "UnitPrice": {
            "format": "double",
            "description": "Line item unit price.",
            "type": "number"
          }
        }
      },
      "WorkOrderMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Work order unique identifier.",
            "type": "integer"
          },
          "Task": {
            "$ref": "#/components/schemas/WorkOrderTaskMessage"
          },
          "WorkDetails": {
            "description": "Description of the work order.",
            "type": "string"
          },
          "InvoiceNumber": {
            "description": "The invoice or reference number that the vendor assigned to the invoice.",
            "type": "string"
          },
          "ChargeableTo": {
            "description": "A description of the entity that will be charged for the work.",
            "type": "string"
          },
          "EntryAllowed": {
            "description": "Indicates whether entry has been allowed to the unit.",
            "enum": ["Unknown", "Yes", "No"],
            "type": "string"
          },
          "EntryNotes": {
            "description": "Notes specific to entering the unit.",
            "type": "string"
          },
          "VendorId": {
            "format": "int32",
            "description": "Vendor unique identifier.",
            "type": "integer"
          },
          "VendorNotes": {
            "description": "Notes specific to the vendor.",
            "type": "string"
          },
          "EntryContact": {
            "$ref": "#/components/schemas/WorkOrderEntryContactMessage"
          },
          "BillTransactionId": {
            "format": "int32",
            "description": "Unique identifier for the bill related to this work order. This field will be `null` if no bill is related to this work order.",
            "type": "integer"
          },
          "Amount": {
            "format": "double",
            "description": "The total amount of the work order.",
            "type": "number"
          },
          "LineItems": {
            "description": "A collection of line items associated with the work order.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkOrderLineItemMessage"
            }
          }
        }
      },
      "WorkOrderPostMessage": {
        "required": ["EntryAllowed", "VendorId"],
        "type": "object",
        "properties": {
          "WorkDetails": {
            "description": "Description of the work order. The value cannot exceed 65,535 characters.",
            "type": "string"
          },
          "InvoiceNumber": {
            "description": "The invoice or reference number that the vendor assigned to the work order. The value cannot exceed 50 characters.",
            "type": "string"
          },
          "ChargeableTo": {
            "description": "A description of the entity that will be charged for the work. The value cannot exceed 100 characters.",
            "type": "string"
          },
          "EntryAllowed": {
            "description": "Indicates whether entry has been allowed to the unit.",
            "enum": ["Unknown", "Yes", "No"],
            "type": "string"
          },
          "EntryNotes": {
            "description": "Notes specific to entering the unit. The value cannot exceed 65,535 characters.",
            "type": "string"
          },
          "VendorId": {
            "format": "int32",
            "description": "Vendor unique identifier.",
            "type": "integer"
          },
          "VendorNotes": {
            "description": "Notes specific to the vendor. The value cannot exceed 65,535 characters.",
            "type": "string"
          },
          "EntryContactId": {
            "format": "int32",
            "description": "Contact user unique identifier. The user type must be one of the following types: `RentalTenant`, `AssociationOwner`, `Staff`, `RentalOwner`.",
            "type": "integer"
          },
          "LineItems": {
            "description": "Work order line items.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkOrderLineItemSaveMessage"
            }
          },
          "TaskId": {
            "format": "int32",
            "description": "Task unique identifier to associate with the work order.",
            "type": "integer"
          },
          "Task": {
            "$ref": "#/components/schemas/WorkOrderTaskPostMessage"
          }
        }
      },
      "WorkOrderPutMessage": {
        "required": ["EntryAllowed", "VendorId"],
        "type": "object",
        "properties": {
          "WorkDetails": {
            "description": "Description of the work order. The value cannot exceed 65,535 characters.",
            "type": "string"
          },
          "InvoiceNumber": {
            "description": "The invoice or reference number that the vendor assigned to the invoice. The value cannot exceed 50 characters.",
            "type": "string"
          },
          "ChargeableTo": {
            "description": "A description of the entity that will be charged for the work. The value cannot exceed 100 characters.",
            "type": "string"
          },
          "EntryAllowed": {
            "description": "Indicates whether entry has been allowed to the unit.",
            "enum": ["Unknown", "Yes", "No"],
            "type": "string"
          },
          "EntryNotes": {
            "description": "Notes specific to entering the unit. The value cannot exceed 65,535 characters.",
            "type": "string"
          },
          "VendorId": {
            "format": "int32",
            "description": "Vendor unique identifier.",
            "type": "integer"
          },
          "VendorNotes": {
            "description": "Notes specific to the vendor. The value cannot exceed 65,535 characters.",
            "type": "string"
          },
          "EntryContactId": {
            "format": "int32",
            "description": "Contact user unique identifier. The user type must be one of the following types: `RentalTenant`, `AssociationOwner`, `Staff`, `RentalOwner`.",
            "type": "integer"
          },
          "LineItems": {
            "description": "Work order line items. Note that all existing work order line items will be removed and replaced with this list of line items.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkOrderLineItemSaveMessage"
            }
          }
        }
      },
      "WorkOrderSearchMessage": {
        "type": "object",
        "properties": {
          "EntityType": {
            "description": "Specifies the type of entity that the `EntityId` field refers to. This field is required if the `EntityId` field is populated.",
            "enum": ["Rental", "RentalOwner", "Association"],
            "type": "string"
          },
          "EntityId": {
            "format": "int32",
            "description": "Filters results to any work order associated with the specified entity id value. The value must be of the type specified in the `EntityType` field.",
            "type": "integer"
          },
          "Statuses": {
            "description": "Filters results by the status of the task associated with the work order. If no status is specified, work orders with any status will be returned.",
            "type": "array",
            "items": {
              "enum": ["New", "InProgress", "Completed", "Deferred", "Closed"],
              "type": "string"
            }
          },
          "Type": {
            "description": "Filters results to any work order with an associated task with the task type specified.",
            "enum": [
              "ContactRequest",
              "ResidentRequest",
              "Todo",
              "RentalOwnerRequest"
            ],
            "type": "string"
          },
          "UnitId": {
            "format": "int32",
            "description": "Filters results to any work order associated with the unit identifier.",
            "type": "integer"
          },
          "UnitAgreementId": {
            "format": "int32",
            "description": "Filters results to any work order associated with the unit agreement identifier specified.",
            "type": "integer"
          },
          "LastUpdatedFrom": {
            "format": "date",
            "description": "Filters results to any work orders were updated on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "LastUpdatedTo": {
            "format": "date",
            "description": "Filters results to any work orders were updated on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "DueDateFrom": {
            "format": "date",
            "description": "Filters results to any work orders with a due date on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "DueDateTo": {
            "format": "date",
            "description": "Filters results to any work orders with a due date on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "TaskCategoryId": {
            "format": "int32",
            "description": "Filters results to any work orders whose priority matches the specified values. If no priority is specified, tasks with any priority will be returned.",
            "type": "integer"
          },
          "Priorities": {
            "description": "Filters results to any work orders that have been assigned to the specified staff user identifier.",
            "type": "array",
            "items": {
              "enum": ["Low", "Normal", "High"],
              "type": "string"
            }
          },
          "AssignedToId": {
            "format": "int32",
            "description": "Filters results to any work orders that have been assigned to the specified staff user identifier.",
            "type": "integer"
          },
          "VendorIds": {
            "description": "Filters results to any work orders that have been assigned to the specified vendor identifier.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          },
          "AmountFrom": {
            "format": "double",
            "description": "Filters results to any work orders whose total amounts are equal or greater than the specified amount.",
            "type": "number"
          },
          "AmountTo": {
            "format": "double",
            "description": "Filters results to any work orders whose total amounts are equal or less than the specified amount.",
            "type": "number"
          },
          "IsBilled": {
            "description": "Filters results to work orders that have an associated bill.",
            "type": "boolean"
          },
          "Title": {
            "description": "Filters results to any work orders whose title *contains* the specified value.",
            "type": "string"
          },
          "TaskIds": {
            "description": "Filters results to work orders that have an associated to a task in the specified list.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      },
      "WorkOrderTaskMessage": {
        "description": "Task information related to the work order.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int32",
            "description": "Task unique identifier.",
            "type": "integer"
          },
          "Type": {
            "description": "The task type.",
            "enum": [
              "ContactRequest",
              "ResidentRequest",
              "Todo",
              "RentalOwnerRequest"
            ],
            "type": "string"
          },
          "UnitId": {
            "format": "int32",
            "type": "integer"
          },
          "UnitAgreement": {
            "$ref": "#/components/schemas/UnitAgreementMessage"
          },
          "Title": {
            "description": "Task title.",
            "type": "string"
          },
          "DueDate": {
            "format": "date",
            "description": "Task due date.",
            "type": "string"
          },
          "Priority": {
            "description": "Task priority.",
            "enum": ["Low", "Normal", "High"],
            "type": "string"
          },
          "Status": {
            "description": "Task status.",
            "enum": ["New", "InProgress", "Completed", "Deferred", "Closed"],
            "type": "string"
          }
        }
      },
      "WorkOrderTaskPostMessage": {
        "description": "Task information to create and associate with the work order.",
        "required": ["Title", "Priority", "Status", "AssignedToUserId"],
        "type": "object",
        "properties": {
          "Title": {
            "description": "Task title. The title can not exceed 127 characters.",
            "type": "string"
          },
          "DueDate": {
            "format": "date",
            "description": "Task due date. The date must be formatted as YYYY-MM-DD.",
            "type": "string"
          },
          "Priority": {
            "description": "Task priority.",
            "enum": ["Low", "Normal", "High"],
            "type": "string"
          },
          "Status": {
            "description": "Task status.",
            "enum": ["New", "InProgress", "Completed", "Deferred", "Closed"],
            "type": "string"
          },
          "PropertyId": {
            "format": "int32",
            "description": "The unique identifier of property associated with the request. The assigned property must be active.",
            "type": "integer"
          },
          "UnitId": {
            "format": "int32",
            "description": "The unique identifier of the unit associated with the request. The unit must be associated with the `PropertyId` specified.",
            "type": "integer"
          },
          "AssignedToUserId": {
            "format": "int32",
            "description": "The unique identifier of the staff user assigned to the request. The user must be a `Staff` user type.",
            "type": "integer"
          }
        }
      }
    }
  },
  "security": [{ "clientId": [] }, { "clientSecret": [] }]
}
