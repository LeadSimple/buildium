=begin
#Open API, powered by Buildium

#GetAllGLAccounts) response message now includes the property `IsBankAccount`. This is a boolean property that indicates whether the general ledger account is also a bank account.  * A `Country` property has been added to all Address messages. This property contains an enumeration indicating the country of the address.   

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module Buildium
  class AccountingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a bill
    # Creates a bill.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bills</span> - `View` `Edit`
    # @param bill_post_message [BillPostMessage] 
    # @param [Hash] opts the optional parameters
    # @return [BillMessage]
    def create_bill(bill_post_message, opts = {})
      data, _status_code, _headers = create_bill_with_http_info(bill_post_message, opts)
      data
    end

    # Create a bill
    # Creates a bill.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; Bills&lt;/span&gt; - &#x60;View&#x60; &#x60;Edit&#x60;
    # @param bill_post_message [BillPostMessage] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillMessage, Integer, Hash)>] BillMessage data, response status code and response headers
    def create_bill_with_http_info(bill_post_message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.create_bill ...'
      end
      # verify the required parameter 'bill_post_message' is set
      if @api_client.config.client_side_validation && bill_post_message.nil?
        fail ArgumentError, "Missing the required parameter 'bill_post_message' when calling AccountingApi.create_bill"
      end
      # resource path
      local_var_path = '/v1/bills'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(bill_post_message)

      # return_type
      return_type = opts[:debug_return_type] || 'BillMessage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"AccountingApi.create_bill",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#create_bill\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a budget
    # Creates a budget.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Budgets</span> - `View` `Edit`
    # @param budget_post_message [BudgetPostMessage] 
    # @param [Hash] opts the optional parameters
    # @return [BudgetMessage]
    def create_budget(budget_post_message, opts = {})
      data, _status_code, _headers = create_budget_with_http_info(budget_post_message, opts)
      data
    end

    # Create a budget
    # Creates a budget.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; Budgets&lt;/span&gt; - &#x60;View&#x60; &#x60;Edit&#x60;
    # @param budget_post_message [BudgetPostMessage] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BudgetMessage, Integer, Hash)>] BudgetMessage data, response status code and response headers
    def create_budget_with_http_info(budget_post_message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.create_budget ...'
      end
      # verify the required parameter 'budget_post_message' is set
      if @api_client.config.client_side_validation && budget_post_message.nil?
        fail ArgumentError, "Missing the required parameter 'budget_post_message' when calling AccountingApi.create_budget"
      end
      # resource path
      local_var_path = '/v1/budgets'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(budget_post_message)

      # return_type
      return_type = opts[:debug_return_type] || 'BudgetMessage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"AccountingApi.create_budget",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#create_budget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a general journal entry
    # Creates a general journal entry.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; General Ledger Transactions</span> - `View` `Edit`
    # @param general_journal_entry_post_message [GeneralJournalEntryPostMessage] 
    # @param [Hash] opts the optional parameters
    # @return [GeneralLedgerTransactionMessage]
    def create_general_journal_entry(general_journal_entry_post_message, opts = {})
      data, _status_code, _headers = create_general_journal_entry_with_http_info(general_journal_entry_post_message, opts)
      data
    end

    # Create a general journal entry
    # Creates a general journal entry.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; General Ledger Transactions&lt;/span&gt; - &#x60;View&#x60; &#x60;Edit&#x60;
    # @param general_journal_entry_post_message [GeneralJournalEntryPostMessage] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeneralLedgerTransactionMessage, Integer, Hash)>] GeneralLedgerTransactionMessage data, response status code and response headers
    def create_general_journal_entry_with_http_info(general_journal_entry_post_message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.create_general_journal_entry ...'
      end
      # verify the required parameter 'general_journal_entry_post_message' is set
      if @api_client.config.client_side_validation && general_journal_entry_post_message.nil?
        fail ArgumentError, "Missing the required parameter 'general_journal_entry_post_message' when calling AccountingApi.create_general_journal_entry"
      end
      # resource path
      local_var_path = '/v1/generalledger/journalentries'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(general_journal_entry_post_message)

      # return_type
      return_type = opts[:debug_return_type] || 'GeneralLedgerTransactionMessage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"AccountingApi.create_general_journal_entry",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#create_general_journal_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all general ledger accounts
    # Retrieves a list of general ledger accounts.<br /><br />General ledger accounts are used to categorize transactions for accounting purposes.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; General Ledger Accounts</span> - `View`
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :accounttypes Filters results by the specified general ledger account types.
    # @option opts [String] :orderby &#x60;orderby&#x60; indicates the field(s) and direction to sort the results in the response. See &lt;a href&#x3D;\&quot;#section/API-Overview/Bulk-Request-Options\&quot;&gt;Bulk Request Options&lt;/a&gt; for more information.
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The &#x60;offset&#x60; is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 1000 and the default is 50.
    # @return [Array<GLAccountMessage>]
    def get_all_gl_accounts(opts = {})
      data, _status_code, _headers = get_all_gl_accounts_with_http_info(opts)
      data
    end

    # Retrieve all general ledger accounts
    # Retrieves a list of general ledger accounts.&lt;br /&gt;&lt;br /&gt;General ledger accounts are used to categorize transactions for accounting purposes.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; General Ledger Accounts&lt;/span&gt; - &#x60;View&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :accounttypes Filters results by the specified general ledger account types.
    # @option opts [String] :orderby &#x60;orderby&#x60; indicates the field(s) and direction to sort the results in the response. See &lt;a href&#x3D;\&quot;#section/API-Overview/Bulk-Request-Options\&quot;&gt;Bulk Request Options&lt;/a&gt; for more information.
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The &#x60;offset&#x60; is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 1000 and the default is 50.
    # @return [Array<(Array<GLAccountMessage>, Integer, Hash)>] Array<GLAccountMessage> data, response status code and response headers
    def get_all_gl_accounts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.get_all_gl_accounts ...'
      end
      allowable_values = ["Asset", "Liability", "Equity", "Income", "Expense"]
      if @api_client.config.client_side_validation && opts[:'accounttypes'] && !opts[:'accounttypes'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"accounttypes\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/v1/glaccounts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'accounttypes'] = @api_client.build_collection_param(opts[:'accounttypes'], :multi) if !opts[:'accounttypes'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GLAccountMessage>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"AccountingApi.get_all_gl_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#get_all_gl_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all general ledger transactions
    # Retrieves a list of general ledger transactions.  <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; General Ledger Transactions</span> - `View`
    # @param startdate [Date] Filters results to any transaction whose date is greater than or equal to the specified value.
    # @param enddate [Date] Filters results to any transaction whose date is less than or equal to the specified value.
    # @param glaccountids [Array<Integer>] Filters results to transactions whose general ledger account belongs to the specified set of general ledger account ids.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :selectionentityid Filters results to any transaction containing journal lines for an entity associated with the specified entity id value. The id must be of the type specified in SelectionEntityType.
    # @option opts [String] :selectionentitytype Specifies the type of entity that SelectionEntityId refers to.
    # @option opts [String] :orderby &#x60;orderby&#x60; indicates the field(s) and direction to sort the results in the response. See &lt;a href&#x3D;\&quot;#section/API-Overview/Bulk-Request-Options\&quot;&gt;Bulk Request Options&lt;/a&gt; for more information.
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The &#x60;offset&#x60; is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 1000 and the default is 50.
    # @return [Array<GeneralLedgerTransactionMessage>]
    def get_all_transactions(startdate, enddate, glaccountids, opts = {})
      data, _status_code, _headers = get_all_transactions_with_http_info(startdate, enddate, glaccountids, opts)
      data
    end

    # Retrieve all general ledger transactions
    # Retrieves a list of general ledger transactions.  &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; General Ledger Transactions&lt;/span&gt; - &#x60;View&#x60;
    # @param startdate [Date] Filters results to any transaction whose date is greater than or equal to the specified value.
    # @param enddate [Date] Filters results to any transaction whose date is less than or equal to the specified value.
    # @param glaccountids [Array<Integer>] Filters results to transactions whose general ledger account belongs to the specified set of general ledger account ids.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :selectionentityid Filters results to any transaction containing journal lines for an entity associated with the specified entity id value. The id must be of the type specified in SelectionEntityType.
    # @option opts [String] :selectionentitytype Specifies the type of entity that SelectionEntityId refers to.
    # @option opts [String] :orderby &#x60;orderby&#x60; indicates the field(s) and direction to sort the results in the response. See &lt;a href&#x3D;\&quot;#section/API-Overview/Bulk-Request-Options\&quot;&gt;Bulk Request Options&lt;/a&gt; for more information.
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The &#x60;offset&#x60; is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 1000 and the default is 50.
    # @return [Array<(Array<GeneralLedgerTransactionMessage>, Integer, Hash)>] Array<GeneralLedgerTransactionMessage> data, response status code and response headers
    def get_all_transactions_with_http_info(startdate, enddate, glaccountids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.get_all_transactions ...'
      end
      # verify the required parameter 'startdate' is set
      if @api_client.config.client_side_validation && startdate.nil?
        fail ArgumentError, "Missing the required parameter 'startdate' when calling AccountingApi.get_all_transactions"
      end
      # verify the required parameter 'enddate' is set
      if @api_client.config.client_side_validation && enddate.nil?
        fail ArgumentError, "Missing the required parameter 'enddate' when calling AccountingApi.get_all_transactions"
      end
      # verify the required parameter 'glaccountids' is set
      if @api_client.config.client_side_validation && glaccountids.nil?
        fail ArgumentError, "Missing the required parameter 'glaccountids' when calling AccountingApi.get_all_transactions"
      end
      allowable_values = ["Rental", "RentalOwner", "Association"]
      if @api_client.config.client_side_validation && opts[:'selectionentitytype'] && !allowable_values.include?(opts[:'selectionentitytype'])
        fail ArgumentError, "invalid value for \"selectionentitytype\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/v1/generalledger/transactions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startdate'] = startdate
      query_params[:'enddate'] = enddate
      query_params[:'glaccountids'] = @api_client.build_collection_param(glaccountids, :multi)
      query_params[:'selectionentityid'] = opts[:'selectionentityid'] if !opts[:'selectionentityid'].nil?
      query_params[:'selectionentitytype'] = opts[:'selectionentitytype'] if !opts[:'selectionentitytype'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GeneralLedgerTransactionMessage>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"AccountingApi.get_all_transactions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#get_all_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a bill
    # Retrieves a single bill.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bills</span> - `View`
    # @param bill_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [BillMessage]
    def get_bill_by_id(bill_id, opts = {})
      data, _status_code, _headers = get_bill_by_id_with_http_info(bill_id, opts)
      data
    end

    # Retrieve a bill
    # Retrieves a single bill.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; Bills&lt;/span&gt; - &#x60;View&#x60;
    # @param bill_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillMessage, Integer, Hash)>] BillMessage data, response status code and response headers
    def get_bill_by_id_with_http_info(bill_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.get_bill_by_id ...'
      end
      # verify the required parameter 'bill_id' is set
      if @api_client.config.client_side_validation && bill_id.nil?
        fail ArgumentError, "Missing the required parameter 'bill_id' when calling AccountingApi.get_bill_by_id"
      end
      # resource path
      local_var_path = '/v1/bills/{billId}'.sub('{' + 'billId' + '}', CGI.escape(bill_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BillMessage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"AccountingApi.get_bill_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#get_bill_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a bill payment
    # Retrieves specific bill payment.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bills</span> - `View`
    # @param bill_id [Integer] 
    # @param payment_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [BillPaymentMessage]
    def get_bill_payment_by_id(bill_id, payment_id, opts = {})
      data, _status_code, _headers = get_bill_payment_by_id_with_http_info(bill_id, payment_id, opts)
      data
    end

    # Retrieve a bill payment
    # Retrieves specific bill payment.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; Bills&lt;/span&gt; - &#x60;View&#x60;
    # @param bill_id [Integer] 
    # @param payment_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillPaymentMessage, Integer, Hash)>] BillPaymentMessage data, response status code and response headers
    def get_bill_payment_by_id_with_http_info(bill_id, payment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.get_bill_payment_by_id ...'
      end
      # verify the required parameter 'bill_id' is set
      if @api_client.config.client_side_validation && bill_id.nil?
        fail ArgumentError, "Missing the required parameter 'bill_id' when calling AccountingApi.get_bill_payment_by_id"
      end
      # verify the required parameter 'payment_id' is set
      if @api_client.config.client_side_validation && payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_id' when calling AccountingApi.get_bill_payment_by_id"
      end
      # resource path
      local_var_path = '/v1/bills/{billId}/payments/{paymentId}'.sub('{' + 'billId' + '}', CGI.escape(bill_id.to_s)).sub('{' + 'paymentId' + '}', CGI.escape(payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BillPaymentMessage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"AccountingApi.get_bill_payment_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#get_bill_payment_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all bill payments
    # Retrieves a list of bill payments for a specific bill.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bills</span> - `View`
    # @param bill_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :orderby &#x60;orderby&#x60; indicates the field(s) and direction to sort the results in the response. See &lt;a href&#x3D;\&quot;#section/API-Overview/Bulk-Request-Options\&quot;&gt;Bulk Request Options&lt;/a&gt; for more information.
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The &#x60;offset&#x60; is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 1000 and the default is 50.
    # @return [Array<BillPaymentMessage>]
    def get_bill_payments(bill_id, opts = {})
      data, _status_code, _headers = get_bill_payments_with_http_info(bill_id, opts)
      data
    end

    # Retrieve all bill payments
    # Retrieves a list of bill payments for a specific bill.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; Bills&lt;/span&gt; - &#x60;View&#x60;
    # @param bill_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :orderby &#x60;orderby&#x60; indicates the field(s) and direction to sort the results in the response. See &lt;a href&#x3D;\&quot;#section/API-Overview/Bulk-Request-Options\&quot;&gt;Bulk Request Options&lt;/a&gt; for more information.
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The &#x60;offset&#x60; is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 1000 and the default is 50.
    # @return [Array<(Array<BillPaymentMessage>, Integer, Hash)>] Array<BillPaymentMessage> data, response status code and response headers
    def get_bill_payments_with_http_info(bill_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.get_bill_payments ...'
      end
      # verify the required parameter 'bill_id' is set
      if @api_client.config.client_side_validation && bill_id.nil?
        fail ArgumentError, "Missing the required parameter 'bill_id' when calling AccountingApi.get_bill_payments"
      end
      # resource path
      local_var_path = '/v1/bills/{billId}/payments'.sub('{' + 'billId' + '}', CGI.escape(bill_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<BillPaymentMessage>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"AccountingApi.get_bill_payments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#get_bill_payments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all bills
    # Retrieves a list of bills.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bills</span> - `View`
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :entityid Filters results to any bill containing line items associated with the specified entity identifier. This filter is used in conjunction with the &#x60;EntityType&#x60; field which must be set to the type of entity this identifier references.
    # @option opts [String] :entitytype Specifies the type of entity that &#x60;EntityId&#x60; refers to. This field is required if &#x60;EntityId&#x60; is specified.
    # @option opts [Integer] :vendorid Filters results to bills associated with a specific vendor.
    # @option opts [String] :referencenumber Filters results to bills whose reference number contains the specified value.
    # @option opts [String] :paidstatus Filters results by the bill&#39;s paid status. If no status is specified, bills with any status will be returned.
    # @option opts [Date] :frompaiddate Filters results to any bill whose paid date is greater than or equal to the specified value.
    # @option opts [Date] :topaiddate Filters results to any bill whose paid date is less than or equal to the specified value.
    # @option opts [String] :orderby &#x60;orderby&#x60; indicates the field(s) and direction to sort the results in the response. See &lt;a href&#x3D;\&quot;#section/API-Overview/Bulk-Request-Options\&quot;&gt;Bulk Request Options&lt;/a&gt; for more information.
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The &#x60;offset&#x60; is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 1000 and the default is 50.
    # @return [Array<BillMessage>]
    def get_bills_async(opts = {})
      data, _status_code, _headers = get_bills_async_with_http_info(opts)
      data
    end

    # Retrieve all bills
    # Retrieves a list of bills.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; Bills&lt;/span&gt; - &#x60;View&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :entityid Filters results to any bill containing line items associated with the specified entity identifier. This filter is used in conjunction with the &#x60;EntityType&#x60; field which must be set to the type of entity this identifier references.
    # @option opts [String] :entitytype Specifies the type of entity that &#x60;EntityId&#x60; refers to. This field is required if &#x60;EntityId&#x60; is specified.
    # @option opts [Integer] :vendorid Filters results to bills associated with a specific vendor.
    # @option opts [String] :referencenumber Filters results to bills whose reference number contains the specified value.
    # @option opts [String] :paidstatus Filters results by the bill&#39;s paid status. If no status is specified, bills with any status will be returned.
    # @option opts [Date] :frompaiddate Filters results to any bill whose paid date is greater than or equal to the specified value.
    # @option opts [Date] :topaiddate Filters results to any bill whose paid date is less than or equal to the specified value.
    # @option opts [String] :orderby &#x60;orderby&#x60; indicates the field(s) and direction to sort the results in the response. See &lt;a href&#x3D;\&quot;#section/API-Overview/Bulk-Request-Options\&quot;&gt;Bulk Request Options&lt;/a&gt; for more information.
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The &#x60;offset&#x60; is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 1000 and the default is 50.
    # @return [Array<(Array<BillMessage>, Integer, Hash)>] Array<BillMessage> data, response status code and response headers
    def get_bills_async_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.get_bills_async ...'
      end
      allowable_values = ["Rental", "RentalOwner", "Association"]
      if @api_client.config.client_side_validation && opts[:'entitytype'] && !allowable_values.include?(opts[:'entitytype'])
        fail ArgumentError, "invalid value for \"entitytype\", must be one of #{allowable_values}"
      end
      allowable_values = ["Paid", "Unpaid", "UncollectedMarkups"]
      if @api_client.config.client_side_validation && opts[:'paidstatus'] && !allowable_values.include?(opts[:'paidstatus'])
        fail ArgumentError, "invalid value for \"paidstatus\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/v1/bills'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'entityid'] = opts[:'entityid'] if !opts[:'entityid'].nil?
      query_params[:'entitytype'] = opts[:'entitytype'] if !opts[:'entitytype'].nil?
      query_params[:'vendorid'] = opts[:'vendorid'] if !opts[:'vendorid'].nil?
      query_params[:'referencenumber'] = opts[:'referencenumber'] if !opts[:'referencenumber'].nil?
      query_params[:'paidstatus'] = opts[:'paidstatus'] if !opts[:'paidstatus'].nil?
      query_params[:'frompaiddate'] = opts[:'frompaiddate'] if !opts[:'frompaiddate'].nil?
      query_params[:'topaiddate'] = opts[:'topaiddate'] if !opts[:'topaiddate'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<BillMessage>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"AccountingApi.get_bills_async",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#get_bills_async\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a budget
    # Retrieves a budget.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Budgets</span> - `View`
    # @param budget_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [BudgetMessage]
    def get_budget_by_id(budget_id, opts = {})
      data, _status_code, _headers = get_budget_by_id_with_http_info(budget_id, opts)
      data
    end

    # Retrieve a budget
    # Retrieves a budget.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; Budgets&lt;/span&gt; - &#x60;View&#x60;
    # @param budget_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BudgetMessage, Integer, Hash)>] BudgetMessage data, response status code and response headers
    def get_budget_by_id_with_http_info(budget_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.get_budget_by_id ...'
      end
      # verify the required parameter 'budget_id' is set
      if @api_client.config.client_side_validation && budget_id.nil?
        fail ArgumentError, "Missing the required parameter 'budget_id' when calling AccountingApi.get_budget_by_id"
      end
      # resource path
      local_var_path = '/v1/budgets/{budgetId}'.sub('{' + 'budgetId' + '}', CGI.escape(budget_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BudgetMessage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"AccountingApi.get_budget_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#get_budget_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all budgets
    # Retrieves all budgets.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Budgets</span> - `View`
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :propertyids Filters results to any budget associated to any of the specified set of property ids.
    # @option opts [Integer] :fiscalyear Filters results to any budgets that end in the given fiscal year. FiscalYear must be a positive number.
    # @option opts [String] :name Filters results to any budgets whose name *contains* the specified value.
    # @option opts [String] :orderby &#x60;orderby&#x60; indicates the field(s) and direction to sort the results in the response. See &lt;a href&#x3D;\&quot;#section/API-Overview/Bulk-Request-Options\&quot;&gt;Bulk Request Options&lt;/a&gt; for more information.
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The &#x60;offset&#x60; is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 1000 and the default is 50.
    # @return [Array<BudgetMessage>]
    def get_budgets(opts = {})
      data, _status_code, _headers = get_budgets_with_http_info(opts)
      data
    end

    # Retrieve all budgets
    # Retrieves all budgets.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; Budgets&lt;/span&gt; - &#x60;View&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :propertyids Filters results to any budget associated to any of the specified set of property ids.
    # @option opts [Integer] :fiscalyear Filters results to any budgets that end in the given fiscal year. FiscalYear must be a positive number.
    # @option opts [String] :name Filters results to any budgets whose name *contains* the specified value.
    # @option opts [String] :orderby &#x60;orderby&#x60; indicates the field(s) and direction to sort the results in the response. See &lt;a href&#x3D;\&quot;#section/API-Overview/Bulk-Request-Options\&quot;&gt;Bulk Request Options&lt;/a&gt; for more information.
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The &#x60;offset&#x60; is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 1000 and the default is 50.
    # @return [Array<(Array<BudgetMessage>, Integer, Hash)>] Array<BudgetMessage> data, response status code and response headers
    def get_budgets_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.get_budgets ...'
      end
      # resource path
      local_var_path = '/v1/budgets'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'propertyids'] = @api_client.build_collection_param(opts[:'propertyids'], :multi) if !opts[:'propertyids'].nil?
      query_params[:'fiscalyear'] = opts[:'fiscalyear'] if !opts[:'fiscalyear'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<BudgetMessage>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"AccountingApi.get_budgets",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#get_budgets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all general ledger account balances
    # Retrieves all general ledger account balances as of a given date. The response includes the total balance of each account along with the subtotals for any accounting entities (company, associations or rental properties) that have transactions assigned to the account.  <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; General Ledger Accounts</span> - `View`
    # @param accountingbasis [String] The methodology in which revenues and expenses are recognized when calculating the balances. Specifying &#x60;Cash&#x60; calculates balances based on when money changes hands. Specifying &#x60;Accrual&#x60; calculates balances based on the period in which the transaction originally happened.
    # @param asofdate [Date] Indicates the end date through which the balances will be calculated. This will include all transactions in your account until this specified date.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :entitytype Specifies the type of entity that &#x60;EntityId&#x60; field refers to.
    # @option opts [Integer] :entityid Filters transactions used in calculating the general ledger account balances to only those containing journal lines for with the specified entity id value. The entity id specified must be of the type specified in &#x60;EntityType&#x60;.
    # @option opts [Array<Integer>] :glaccountids Filters results to the specified set of general ledger account identifiers.
    # @option opts [String] :orderby &#x60;orderby&#x60; indicates the field(s) and direction to sort the results in the response. See &lt;a href&#x3D;\&quot;#section/API-Overview/Bulk-Request-Options\&quot;&gt;Bulk Request Options&lt;/a&gt; for more information.
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The &#x60;offset&#x60; is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 1000 and the default is 50.
    # @return [Array<GLAccountBalanceMessage>]
    def get_gl_account_balances(accountingbasis, asofdate, opts = {})
      data, _status_code, _headers = get_gl_account_balances_with_http_info(accountingbasis, asofdate, opts)
      data
    end

    # Retrieve all general ledger account balances
    # Retrieves all general ledger account balances as of a given date. The response includes the total balance of each account along with the subtotals for any accounting entities (company, associations or rental properties) that have transactions assigned to the account.  &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; General Ledger Accounts&lt;/span&gt; - &#x60;View&#x60;
    # @param accountingbasis [String] The methodology in which revenues and expenses are recognized when calculating the balances. Specifying &#x60;Cash&#x60; calculates balances based on when money changes hands. Specifying &#x60;Accrual&#x60; calculates balances based on the period in which the transaction originally happened.
    # @param asofdate [Date] Indicates the end date through which the balances will be calculated. This will include all transactions in your account until this specified date.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :entitytype Specifies the type of entity that &#x60;EntityId&#x60; field refers to.
    # @option opts [Integer] :entityid Filters transactions used in calculating the general ledger account balances to only those containing journal lines for with the specified entity id value. The entity id specified must be of the type specified in &#x60;EntityType&#x60;.
    # @option opts [Array<Integer>] :glaccountids Filters results to the specified set of general ledger account identifiers.
    # @option opts [String] :orderby &#x60;orderby&#x60; indicates the field(s) and direction to sort the results in the response. See &lt;a href&#x3D;\&quot;#section/API-Overview/Bulk-Request-Options\&quot;&gt;Bulk Request Options&lt;/a&gt; for more information.
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The &#x60;offset&#x60; is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 1000 and the default is 50.
    # @return [Array<(Array<GLAccountBalanceMessage>, Integer, Hash)>] Array<GLAccountBalanceMessage> data, response status code and response headers
    def get_gl_account_balances_with_http_info(accountingbasis, asofdate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.get_gl_account_balances ...'
      end
      # verify the required parameter 'accountingbasis' is set
      if @api_client.config.client_side_validation && accountingbasis.nil?
        fail ArgumentError, "Missing the required parameter 'accountingbasis' when calling AccountingApi.get_gl_account_balances"
      end
      # verify enum value
      allowable_values = ["Accrual", "Cash"]
      if @api_client.config.client_side_validation && !allowable_values.include?(accountingbasis)
        fail ArgumentError, "invalid value for \"accountingbasis\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'asofdate' is set
      if @api_client.config.client_side_validation && asofdate.nil?
        fail ArgumentError, "Missing the required parameter 'asofdate' when calling AccountingApi.get_gl_account_balances"
      end
      allowable_values = ["Association", "Rental", "RentalOwner"]
      if @api_client.config.client_side_validation && opts[:'entitytype'] && !allowable_values.include?(opts[:'entitytype'])
        fail ArgumentError, "invalid value for \"entitytype\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/v1/glaccounts/balances'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'accountingbasis'] = accountingbasis
      query_params[:'asofdate'] = asofdate
      query_params[:'entitytype'] = opts[:'entitytype'] if !opts[:'entitytype'].nil?
      query_params[:'entityid'] = opts[:'entityid'] if !opts[:'entityid'].nil?
      query_params[:'glaccountids'] = @api_client.build_collection_param(opts[:'glaccountids'], :multi) if !opts[:'glaccountids'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GLAccountBalanceMessage>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"AccountingApi.get_gl_account_balances",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#get_gl_account_balances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a general ledger account
    # Retrieves a specific general ledger account.  <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; General Ledger Accounts</span> - `View`
    # @param gl_account_id [Integer] The general ledger account identifier.
    # @param [Hash] opts the optional parameters
    # @return [GLAccountMessage]
    def get_gl_account_by_id(gl_account_id, opts = {})
      data, _status_code, _headers = get_gl_account_by_id_with_http_info(gl_account_id, opts)
      data
    end

    # Retrieve a general ledger account
    # Retrieves a specific general ledger account.  &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; General Ledger Accounts&lt;/span&gt; - &#x60;View&#x60;
    # @param gl_account_id [Integer] The general ledger account identifier.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GLAccountMessage, Integer, Hash)>] GLAccountMessage data, response status code and response headers
    def get_gl_account_by_id_with_http_info(gl_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.get_gl_account_by_id ...'
      end
      # verify the required parameter 'gl_account_id' is set
      if @api_client.config.client_side_validation && gl_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'gl_account_id' when calling AccountingApi.get_gl_account_by_id"
      end
      # resource path
      local_var_path = '/v1/glaccounts/{glAccountId}'.sub('{' + 'glAccountId' + '}', CGI.escape(gl_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GLAccountMessage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"AccountingApi.get_gl_account_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#get_gl_account_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a general ledger transaction
    # Retrieves a specific general ledger transaction.  <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; General Ledger Transactions</span> - `View`
    # @param transaction_id [Integer] The general ledger transaction identifier.
    # @param [Hash] opts the optional parameters
    # @return [GeneralLedgerTransactionMessage]
    def get_transaction_by_id(transaction_id, opts = {})
      data, _status_code, _headers = get_transaction_by_id_with_http_info(transaction_id, opts)
      data
    end

    # Retrieve a general ledger transaction
    # Retrieves a specific general ledger transaction.  &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; General Ledger Transactions&lt;/span&gt; - &#x60;View&#x60;
    # @param transaction_id [Integer] The general ledger transaction identifier.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeneralLedgerTransactionMessage, Integer, Hash)>] GeneralLedgerTransactionMessage data, response status code and response headers
    def get_transaction_by_id_with_http_info(transaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.get_transaction_by_id ...'
      end
      # verify the required parameter 'transaction_id' is set
      if @api_client.config.client_side_validation && transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_id' when calling AccountingApi.get_transaction_by_id"
      end
      # resource path
      local_var_path = '/v1/generalledger/transactions/{transactionId}'.sub('{' + 'transactionId' + '}', CGI.escape(transaction_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GeneralLedgerTransactionMessage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"AccountingApi.get_transaction_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#get_transaction_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a bill
    # Use this operation to update any of the writable fields of an existing bill resource. When updating this resource keep the following in mind: <br /><ul><li>Writable fields omitted from the request or that do not have a value in the request message are set to `NULL`. If you do not want to update the field, submit the original field value.</li><li>When a bill has an existing payment any edits to the line items that change the total bill amount must result in the new total bill amount being equal to or greater than the amount paid.</li><li>When adding a new line item leave the `LineItem.Id` field empty.</li></ul><br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bills</span> - `View` `Edit`
    # @param bill_id [Integer] 
    # @param bill_put_message [BillPutMessage] 
    # @param [Hash] opts the optional parameters
    # @return [BillMessage]
    def update_bill(bill_id, bill_put_message, opts = {})
      data, _status_code, _headers = update_bill_with_http_info(bill_id, bill_put_message, opts)
      data
    end

    # Update a bill
    # Use this operation to update any of the writable fields of an existing bill resource. When updating this resource keep the following in mind: &lt;br /&gt;&lt;ul&gt;&lt;li&gt;Writable fields omitted from the request or that do not have a value in the request message are set to &#x60;NULL&#x60;. If you do not want to update the field, submit the original field value.&lt;/li&gt;&lt;li&gt;When a bill has an existing payment any edits to the line items that change the total bill amount must result in the new total bill amount being equal to or greater than the amount paid.&lt;/li&gt;&lt;li&gt;When adding a new line item leave the &#x60;LineItem.Id&#x60; field empty.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; Bills&lt;/span&gt; - &#x60;View&#x60; &#x60;Edit&#x60;
    # @param bill_id [Integer] 
    # @param bill_put_message [BillPutMessage] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillMessage, Integer, Hash)>] BillMessage data, response status code and response headers
    def update_bill_with_http_info(bill_id, bill_put_message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.update_bill ...'
      end
      # verify the required parameter 'bill_id' is set
      if @api_client.config.client_side_validation && bill_id.nil?
        fail ArgumentError, "Missing the required parameter 'bill_id' when calling AccountingApi.update_bill"
      end
      # verify the required parameter 'bill_put_message' is set
      if @api_client.config.client_side_validation && bill_put_message.nil?
        fail ArgumentError, "Missing the required parameter 'bill_put_message' when calling AccountingApi.update_bill"
      end
      # resource path
      local_var_path = '/v1/bills/{billId}'.sub('{' + 'billId' + '}', CGI.escape(bill_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(bill_put_message)

      # return_type
      return_type = opts[:debug_return_type] || 'BillMessage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"AccountingApi.update_bill",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#update_bill\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a budget
    # Updates a budget.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Budgets</span> - `View` `Edit`
    # @param budget_id [Integer] 
    # @param budget_put_message [BudgetPutMessage] 
    # @param [Hash] opts the optional parameters
    # @return [BudgetMessage]
    def update_budget(budget_id, budget_put_message, opts = {})
      data, _status_code, _headers = update_budget_with_http_info(budget_id, budget_put_message, opts)
      data
    end

    # Update a budget
    # Updates a budget.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; Budgets&lt;/span&gt; - &#x60;View&#x60; &#x60;Edit&#x60;
    # @param budget_id [Integer] 
    # @param budget_put_message [BudgetPutMessage] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BudgetMessage, Integer, Hash)>] BudgetMessage data, response status code and response headers
    def update_budget_with_http_info(budget_id, budget_put_message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.update_budget ...'
      end
      # verify the required parameter 'budget_id' is set
      if @api_client.config.client_side_validation && budget_id.nil?
        fail ArgumentError, "Missing the required parameter 'budget_id' when calling AccountingApi.update_budget"
      end
      # verify the required parameter 'budget_put_message' is set
      if @api_client.config.client_side_validation && budget_put_message.nil?
        fail ArgumentError, "Missing the required parameter 'budget_put_message' when calling AccountingApi.update_budget"
      end
      # resource path
      local_var_path = '/v1/budgets/{budgetId}'.sub('{' + 'budgetId' + '}', CGI.escape(budget_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(budget_put_message)

      # return_type
      return_type = opts[:debug_return_type] || 'BudgetMessage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"AccountingApi.update_budget",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#update_budget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a general journal entry
    # Updates a general journal entry.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; General Ledger Transactions</span> - `View` `Edit`
    # @param journal_entry_id [Integer] 
    # @param general_journal_entry_put_message [GeneralJournalEntryPutMessage] 
    # @param [Hash] opts the optional parameters
    # @return [GeneralLedgerTransactionMessage]
    def update_general_journal_entry(journal_entry_id, general_journal_entry_put_message, opts = {})
      data, _status_code, _headers = update_general_journal_entry_with_http_info(journal_entry_id, general_journal_entry_put_message, opts)
      data
    end

    # Update a general journal entry
    # Updates a general journal entry.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; General Ledger Transactions&lt;/span&gt; - &#x60;View&#x60; &#x60;Edit&#x60;
    # @param journal_entry_id [Integer] 
    # @param general_journal_entry_put_message [GeneralJournalEntryPutMessage] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeneralLedgerTransactionMessage, Integer, Hash)>] GeneralLedgerTransactionMessage data, response status code and response headers
    def update_general_journal_entry_with_http_info(journal_entry_id, general_journal_entry_put_message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.update_general_journal_entry ...'
      end
      # verify the required parameter 'journal_entry_id' is set
      if @api_client.config.client_side_validation && journal_entry_id.nil?
        fail ArgumentError, "Missing the required parameter 'journal_entry_id' when calling AccountingApi.update_general_journal_entry"
      end
      # verify the required parameter 'general_journal_entry_put_message' is set
      if @api_client.config.client_side_validation && general_journal_entry_put_message.nil?
        fail ArgumentError, "Missing the required parameter 'general_journal_entry_put_message' when calling AccountingApi.update_general_journal_entry"
      end
      # resource path
      local_var_path = '/v1/generalledger/journalentries/{journalEntryId}'.sub('{' + 'journalEntryId' + '}', CGI.escape(journal_entry_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(general_journal_entry_put_message)

      # return_type
      return_type = opts[:debug_return_type] || 'GeneralLedgerTransactionMessage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"AccountingApi.update_general_journal_entry",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#update_general_journal_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
