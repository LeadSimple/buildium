=begin
#Open API, powered by Buildium

#GetAllGLAccounts) response message now includes the property `IsBankAccount`. This is a boolean property that indicates whether the general ledger account is also a bank account.  * A `Country` property has been added to all Address messages. This property contains an enumeration indicating the country of the address.     

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.1

=end

require 'cgi'

module Buildium
  class BankAccountsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a bank account
    # Creates a bank account.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Banking</span> - `View` `Edit`
    # @param bank_account_post_message [BankAccountPostMessage] 
    # @param [Hash] opts the optional parameters
    # @return [BankAccountMessage]
    def create_bank_account(bank_account_post_message, opts = {})
      data, _status_code, _headers = create_bank_account_with_http_info(bank_account_post_message, opts)
      data
    end

    # Create a bank account
    # Creates a bank account.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; Banking&lt;/span&gt; - &#x60;View&#x60; &#x60;Edit&#x60;
    # @param bank_account_post_message [BankAccountPostMessage] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BankAccountMessage, Integer, Hash)>] BankAccountMessage data, response status code and response headers
    def create_bank_account_with_http_info(bank_account_post_message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankAccountsApi.create_bank_account ...'
      end
      # verify the required parameter 'bank_account_post_message' is set
      if @api_client.config.client_side_validation && bank_account_post_message.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_post_message' when calling BankAccountsApi.create_bank_account"
      end
      # resource path
      local_var_path = '/v1/bankaccounts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(bank_account_post_message)

      # return_type
      return_type = opts[:debug_return_type] || 'BankAccountMessage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BankAccountsApi.create_bank_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankAccountsApi#create_bank_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a check
    # Creates a check.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bank Accounts</span> - `View` `Edit`
    # @param bank_account_id [Integer] 
    # @param bank_account_check_post_message [BankAccountCheckPostMessage] 
    # @param [Hash] opts the optional parameters
    # @return [BankAccountCheckMessage]
    def create_bank_account_check(bank_account_id, bank_account_check_post_message, opts = {})
      data, _status_code, _headers = create_bank_account_check_with_http_info(bank_account_id, bank_account_check_post_message, opts)
      data
    end

    # Create a check
    # Creates a check.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; Bank Accounts&lt;/span&gt; - &#x60;View&#x60; &#x60;Edit&#x60;
    # @param bank_account_id [Integer] 
    # @param bank_account_check_post_message [BankAccountCheckPostMessage] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BankAccountCheckMessage, Integer, Hash)>] BankAccountCheckMessage data, response status code and response headers
    def create_bank_account_check_with_http_info(bank_account_id, bank_account_check_post_message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankAccountsApi.create_bank_account_check ...'
      end
      # verify the required parameter 'bank_account_id' is set
      if @api_client.config.client_side_validation && bank_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_id' when calling BankAccountsApi.create_bank_account_check"
      end
      # verify the required parameter 'bank_account_check_post_message' is set
      if @api_client.config.client_side_validation && bank_account_check_post_message.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_check_post_message' when calling BankAccountsApi.create_bank_account_check"
      end
      # resource path
      local_var_path = '/v1/bankaccounts/{bankAccountId}/checks'.sub('{' + 'bankAccountId' + '}', CGI.escape(bank_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(bank_account_check_post_message)

      # return_type
      return_type = opts[:debug_return_type] || 'BankAccountCheckMessage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BankAccountsApi.create_bank_account_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankAccountsApi#create_bank_account_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a deposit
    # Creates a deposit.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bank Accounts</span> - `View` `Edit`
    # @param bank_account_id [Integer] 
    # @param bank_account_deposit_post_message [BankAccountDepositPostMessage] 
    # @param [Hash] opts the optional parameters
    # @return [BankAccountDepositMessage]
    def create_bank_account_deposit(bank_account_id, bank_account_deposit_post_message, opts = {})
      data, _status_code, _headers = create_bank_account_deposit_with_http_info(bank_account_id, bank_account_deposit_post_message, opts)
      data
    end

    # Create a deposit
    # Creates a deposit.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; Bank Accounts&lt;/span&gt; - &#x60;View&#x60; &#x60;Edit&#x60;
    # @param bank_account_id [Integer] 
    # @param bank_account_deposit_post_message [BankAccountDepositPostMessage] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BankAccountDepositMessage, Integer, Hash)>] BankAccountDepositMessage data, response status code and response headers
    def create_bank_account_deposit_with_http_info(bank_account_id, bank_account_deposit_post_message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankAccountsApi.create_bank_account_deposit ...'
      end
      # verify the required parameter 'bank_account_id' is set
      if @api_client.config.client_side_validation && bank_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_id' when calling BankAccountsApi.create_bank_account_deposit"
      end
      # verify the required parameter 'bank_account_deposit_post_message' is set
      if @api_client.config.client_side_validation && bank_account_deposit_post_message.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_deposit_post_message' when calling BankAccountsApi.create_bank_account_deposit"
      end
      # resource path
      local_var_path = '/v1/bankaccounts/{bankAccountId}/deposits'.sub('{' + 'bankAccountId' + '}', CGI.escape(bank_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(bank_account_deposit_post_message)

      # return_type
      return_type = opts[:debug_return_type] || 'BankAccountDepositMessage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BankAccountsApi.create_bank_account_deposit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankAccountsApi#create_bank_account_deposit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a transfer
    # Creates a bank account transfer.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bank Accounts</span> - `Edit`
    # @param bank_account_id [Integer] 
    # @param bank_account_transfer_save_message [BankAccountTransferSaveMessage] 
    # @param [Hash] opts the optional parameters
    # @return [BankAccountTransferMessage]
    def create_bank_account_transfer(bank_account_id, bank_account_transfer_save_message, opts = {})
      data, _status_code, _headers = create_bank_account_transfer_with_http_info(bank_account_id, bank_account_transfer_save_message, opts)
      data
    end

    # Create a transfer
    # Creates a bank account transfer.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; Bank Accounts&lt;/span&gt; - &#x60;Edit&#x60;
    # @param bank_account_id [Integer] 
    # @param bank_account_transfer_save_message [BankAccountTransferSaveMessage] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BankAccountTransferMessage, Integer, Hash)>] BankAccountTransferMessage data, response status code and response headers
    def create_bank_account_transfer_with_http_info(bank_account_id, bank_account_transfer_save_message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankAccountsApi.create_bank_account_transfer ...'
      end
      # verify the required parameter 'bank_account_id' is set
      if @api_client.config.client_side_validation && bank_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_id' when calling BankAccountsApi.create_bank_account_transfer"
      end
      # verify the required parameter 'bank_account_transfer_save_message' is set
      if @api_client.config.client_side_validation && bank_account_transfer_save_message.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_transfer_save_message' when calling BankAccountsApi.create_bank_account_transfer"
      end
      # resource path
      local_var_path = '/v1/bankaccounts/{bankAccountId}/transfers'.sub('{' + 'bankAccountId' + '}', CGI.escape(bank_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(bank_account_transfer_save_message)

      # return_type
      return_type = opts[:debug_return_type] || 'BankAccountTransferMessage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BankAccountsApi.create_bank_account_transfer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankAccountsApi#create_bank_account_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a quick deposit
    # Creates a quick deposit.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; BankAccount</span> - `View`
    # @param bank_account_id [Integer] 
    # @param bank_account_quick_deposit_save_message [BankAccountQuickDepositSaveMessage] 
    # @param [Hash] opts the optional parameters
    # @return [BankAccountQuickDepositMessage]
    def create_quick_deposit(bank_account_id, bank_account_quick_deposit_save_message, opts = {})
      data, _status_code, _headers = create_quick_deposit_with_http_info(bank_account_id, bank_account_quick_deposit_save_message, opts)
      data
    end

    # Create a quick deposit
    # Creates a quick deposit.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; BankAccount&lt;/span&gt; - &#x60;View&#x60;
    # @param bank_account_id [Integer] 
    # @param bank_account_quick_deposit_save_message [BankAccountQuickDepositSaveMessage] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BankAccountQuickDepositMessage, Integer, Hash)>] BankAccountQuickDepositMessage data, response status code and response headers
    def create_quick_deposit_with_http_info(bank_account_id, bank_account_quick_deposit_save_message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankAccountsApi.create_quick_deposit ...'
      end
      # verify the required parameter 'bank_account_id' is set
      if @api_client.config.client_side_validation && bank_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_id' when calling BankAccountsApi.create_quick_deposit"
      end
      # verify the required parameter 'bank_account_quick_deposit_save_message' is set
      if @api_client.config.client_side_validation && bank_account_quick_deposit_save_message.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_quick_deposit_save_message' when calling BankAccountsApi.create_quick_deposit"
      end
      # resource path
      local_var_path = '/v1/bankaccounts/{bankAccountId}/quickdeposits'.sub('{' + 'bankAccountId' + '}', CGI.escape(bank_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(bank_account_quick_deposit_save_message)

      # return_type
      return_type = opts[:debug_return_type] || 'BankAccountQuickDepositMessage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BankAccountsApi.create_quick_deposit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankAccountsApi#create_quick_deposit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a withdrawal
    # Creates a bank account withdrawal.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bank Accounts</span> - `View` `Edit`
    # @param bank_account_id [Integer] 
    # @param bank_account_withdrawal_save_message [BankAccountWithdrawalSaveMessage] 
    # @param [Hash] opts the optional parameters
    # @return [BankAccountWithdrawalMessage]
    def create_withdrawal_for_bank_account(bank_account_id, bank_account_withdrawal_save_message, opts = {})
      data, _status_code, _headers = create_withdrawal_for_bank_account_with_http_info(bank_account_id, bank_account_withdrawal_save_message, opts)
      data
    end

    # Create a withdrawal
    # Creates a bank account withdrawal.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; Bank Accounts&lt;/span&gt; - &#x60;View&#x60; &#x60;Edit&#x60;
    # @param bank_account_id [Integer] 
    # @param bank_account_withdrawal_save_message [BankAccountWithdrawalSaveMessage] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BankAccountWithdrawalMessage, Integer, Hash)>] BankAccountWithdrawalMessage data, response status code and response headers
    def create_withdrawal_for_bank_account_with_http_info(bank_account_id, bank_account_withdrawal_save_message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankAccountsApi.create_withdrawal_for_bank_account ...'
      end
      # verify the required parameter 'bank_account_id' is set
      if @api_client.config.client_side_validation && bank_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_id' when calling BankAccountsApi.create_withdrawal_for_bank_account"
      end
      # verify the required parameter 'bank_account_withdrawal_save_message' is set
      if @api_client.config.client_side_validation && bank_account_withdrawal_save_message.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_withdrawal_save_message' when calling BankAccountsApi.create_withdrawal_for_bank_account"
      end
      # resource path
      local_var_path = '/v1/bankaccounts/{bankAccountId}/withdrawals'.sub('{' + 'bankAccountId' + '}', CGI.escape(bank_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(bank_account_withdrawal_save_message)

      # return_type
      return_type = opts[:debug_return_type] || 'BankAccountWithdrawalMessage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BankAccountsApi.create_withdrawal_for_bank_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankAccountsApi#create_withdrawal_for_bank_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all bank accounts
    # Retrieves a list of bank accounts.  <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bank Accounts</span> - `View`
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bankaccountstatus Filters results by the status of the bank account. If no status is specified, bank accounts with any status will be returned.
    # @option opts [String] :bankname Filters results to any bank account whose name *contains* the specified value.
    # @option opts [String] :orderby &#x60;orderby&#x60; indicates the field(s) and direction to sort the results in the response. See &lt;a href&#x3D;\&quot;#section/API-Overview/Bulk-Request-Options\&quot;&gt;Bulk Request Options&lt;/a&gt; for more information.
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The &#x60;offset&#x60; is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 1000 and the default is 50.
    # @return [Array<BankAccountMessage>]
    def get_all_bank_accounts(opts = {})
      data, _status_code, _headers = get_all_bank_accounts_with_http_info(opts)
      data
    end

    # Retrieve all bank accounts
    # Retrieves a list of bank accounts.  &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; Bank Accounts&lt;/span&gt; - &#x60;View&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bankaccountstatus Filters results by the status of the bank account. If no status is specified, bank accounts with any status will be returned.
    # @option opts [String] :bankname Filters results to any bank account whose name *contains* the specified value.
    # @option opts [String] :orderby &#x60;orderby&#x60; indicates the field(s) and direction to sort the results in the response. See &lt;a href&#x3D;\&quot;#section/API-Overview/Bulk-Request-Options\&quot;&gt;Bulk Request Options&lt;/a&gt; for more information.
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The &#x60;offset&#x60; is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 1000 and the default is 50.
    # @return [Array<(Array<BankAccountMessage>, Integer, Hash)>] Array<BankAccountMessage> data, response status code and response headers
    def get_all_bank_accounts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankAccountsApi.get_all_bank_accounts ...'
      end
      allowable_values = ["Active", "InActive"]
      if @api_client.config.client_side_validation && opts[:'bankaccountstatus'] && !allowable_values.include?(opts[:'bankaccountstatus'])
        fail ArgumentError, "invalid value for \"bankaccountstatus\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/v1/bankaccounts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'bankaccountstatus'] = opts[:'bankaccountstatus'] if !opts[:'bankaccountstatus'].nil?
      query_params[:'bankname'] = opts[:'bankname'] if !opts[:'bankname'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<BankAccountMessage>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BankAccountsApi.get_all_bank_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankAccountsApi#get_all_bank_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all quick deposits
    # Retrieves all quick deposits.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; BankAccount</span> - `View`
    # @param bank_account_id [Integer] 
    # @param startdate [Date] Filters results to any transactions that were recorded on or after the specified date. The value must be formatted as YYYY-MM-DD.
    # @param enddate [Date] Filters results to any transactions that were recorded on or before the specified date. The value must be formatted as YYYY-MM-DD.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :orderby &#x60;orderby&#x60; indicates the field(s) and direction to sort the results in the response. See &lt;a href&#x3D;\&quot;#section/API-Overview/Bulk-Request-Options\&quot;&gt;Bulk Request Options&lt;/a&gt; for more information.
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The &#x60;offset&#x60; is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 1000 and the default is 50.
    # @return [Array<BankAccountQuickDepositMessage>]
    def get_all_quick_deposits(bank_account_id, startdate, enddate, opts = {})
      data, _status_code, _headers = get_all_quick_deposits_with_http_info(bank_account_id, startdate, enddate, opts)
      data
    end

    # Retrieve all quick deposits
    # Retrieves all quick deposits.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; BankAccount&lt;/span&gt; - &#x60;View&#x60;
    # @param bank_account_id [Integer] 
    # @param startdate [Date] Filters results to any transactions that were recorded on or after the specified date. The value must be formatted as YYYY-MM-DD.
    # @param enddate [Date] Filters results to any transactions that were recorded on or before the specified date. The value must be formatted as YYYY-MM-DD.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :orderby &#x60;orderby&#x60; indicates the field(s) and direction to sort the results in the response. See &lt;a href&#x3D;\&quot;#section/API-Overview/Bulk-Request-Options\&quot;&gt;Bulk Request Options&lt;/a&gt; for more information.
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The &#x60;offset&#x60; is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 1000 and the default is 50.
    # @return [Array<(Array<BankAccountQuickDepositMessage>, Integer, Hash)>] Array<BankAccountQuickDepositMessage> data, response status code and response headers
    def get_all_quick_deposits_with_http_info(bank_account_id, startdate, enddate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankAccountsApi.get_all_quick_deposits ...'
      end
      # verify the required parameter 'bank_account_id' is set
      if @api_client.config.client_side_validation && bank_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_id' when calling BankAccountsApi.get_all_quick_deposits"
      end
      # verify the required parameter 'startdate' is set
      if @api_client.config.client_side_validation && startdate.nil?
        fail ArgumentError, "Missing the required parameter 'startdate' when calling BankAccountsApi.get_all_quick_deposits"
      end
      # verify the required parameter 'enddate' is set
      if @api_client.config.client_side_validation && enddate.nil?
        fail ArgumentError, "Missing the required parameter 'enddate' when calling BankAccountsApi.get_all_quick_deposits"
      end
      # resource path
      local_var_path = '/v1/bankaccounts/{bankAccountId}/quickdeposits'.sub('{' + 'bankAccountId' + '}', CGI.escape(bank_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startdate'] = startdate
      query_params[:'enddate'] = enddate
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<BankAccountQuickDepositMessage>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BankAccountsApi.get_all_quick_deposits",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankAccountsApi#get_all_quick_deposits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a bank account
    # Retrieves a specific bank account.  <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bank Accounts</span> - `View`
    # @param bank_account_id [Integer] The bank account identifier.
    # @param [Hash] opts the optional parameters
    # @return [BankAccountMessage]
    def get_bank_account(bank_account_id, opts = {})
      data, _status_code, _headers = get_bank_account_with_http_info(bank_account_id, opts)
      data
    end

    # Retrieve a bank account
    # Retrieves a specific bank account.  &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; Bank Accounts&lt;/span&gt; - &#x60;View&#x60;
    # @param bank_account_id [Integer] The bank account identifier.
    # @param [Hash] opts the optional parameters
    # @return [Array<(BankAccountMessage, Integer, Hash)>] BankAccountMessage data, response status code and response headers
    def get_bank_account_with_http_info(bank_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankAccountsApi.get_bank_account ...'
      end
      # verify the required parameter 'bank_account_id' is set
      if @api_client.config.client_side_validation && bank_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_id' when calling BankAccountsApi.get_bank_account"
      end
      # resource path
      local_var_path = '/v1/bankaccounts/{bankAccountId}'.sub('{' + 'bankAccountId' + '}', CGI.escape(bank_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BankAccountMessage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BankAccountsApi.get_bank_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankAccountsApi#get_bank_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all checks
    # Retrieves all bank account checks.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bank Accounts</span> - `View`
    # @param bank_account_id [Integer] 
    # @param startdate [Date] Filters results to any transactions that were recorded on or after the specified date. The value must be formatted as YYYY-MM-DD.
    # @param enddate [Date] Filters results to any transactions that were recorded on or before the specified date. The value must be formatted as YYYY-MM-DD.
    # @param [Hash] opts the optional parameters
    # @return [Array<BankAccountCheckMessage>]
    def get_bank_account_checks(bank_account_id, startdate, enddate, opts = {})
      data, _status_code, _headers = get_bank_account_checks_with_http_info(bank_account_id, startdate, enddate, opts)
      data
    end

    # Retrieve all checks
    # Retrieves all bank account checks.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; Bank Accounts&lt;/span&gt; - &#x60;View&#x60;
    # @param bank_account_id [Integer] 
    # @param startdate [Date] Filters results to any transactions that were recorded on or after the specified date. The value must be formatted as YYYY-MM-DD.
    # @param enddate [Date] Filters results to any transactions that were recorded on or before the specified date. The value must be formatted as YYYY-MM-DD.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<BankAccountCheckMessage>, Integer, Hash)>] Array<BankAccountCheckMessage> data, response status code and response headers
    def get_bank_account_checks_with_http_info(bank_account_id, startdate, enddate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankAccountsApi.get_bank_account_checks ...'
      end
      # verify the required parameter 'bank_account_id' is set
      if @api_client.config.client_side_validation && bank_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_id' when calling BankAccountsApi.get_bank_account_checks"
      end
      # verify the required parameter 'startdate' is set
      if @api_client.config.client_side_validation && startdate.nil?
        fail ArgumentError, "Missing the required parameter 'startdate' when calling BankAccountsApi.get_bank_account_checks"
      end
      # verify the required parameter 'enddate' is set
      if @api_client.config.client_side_validation && enddate.nil?
        fail ArgumentError, "Missing the required parameter 'enddate' when calling BankAccountsApi.get_bank_account_checks"
      end
      # resource path
      local_var_path = '/v1/bankaccounts/{bankAccountId}/checks'.sub('{' + 'bankAccountId' + '}', CGI.escape(bank_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startdate'] = startdate
      query_params[:'enddate'] = enddate

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<BankAccountCheckMessage>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BankAccountsApi.get_bank_account_checks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankAccountsApi#get_bank_account_checks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a deposit
    # Retrieves a bank account deposit.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; BankAccount</span> - `View`
    # @param bank_account_id [Integer] 
    # @param deposit_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [BankAccountDepositMessage]
    def get_bank_account_deposit_by_id(bank_account_id, deposit_id, opts = {})
      data, _status_code, _headers = get_bank_account_deposit_by_id_with_http_info(bank_account_id, deposit_id, opts)
      data
    end

    # Retrieve a deposit
    # Retrieves a bank account deposit.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; BankAccount&lt;/span&gt; - &#x60;View&#x60;
    # @param bank_account_id [Integer] 
    # @param deposit_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BankAccountDepositMessage, Integer, Hash)>] BankAccountDepositMessage data, response status code and response headers
    def get_bank_account_deposit_by_id_with_http_info(bank_account_id, deposit_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankAccountsApi.get_bank_account_deposit_by_id ...'
      end
      # verify the required parameter 'bank_account_id' is set
      if @api_client.config.client_side_validation && bank_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_id' when calling BankAccountsApi.get_bank_account_deposit_by_id"
      end
      # verify the required parameter 'deposit_id' is set
      if @api_client.config.client_side_validation && deposit_id.nil?
        fail ArgumentError, "Missing the required parameter 'deposit_id' when calling BankAccountsApi.get_bank_account_deposit_by_id"
      end
      # resource path
      local_var_path = '/v1/bankaccounts/{bankAccountId}/deposits/{depositId}'.sub('{' + 'bankAccountId' + '}', CGI.escape(bank_account_id.to_s)).sub('{' + 'depositId' + '}', CGI.escape(deposit_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BankAccountDepositMessage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BankAccountsApi.get_bank_account_deposit_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankAccountsApi#get_bank_account_deposit_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all deposits
    # Retrieves all bank account deposits.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; BankAccount</span> - `View`
    # @param bank_account_id [Integer] 
    # @param startdate [Date] Filters results to any deposits that were recorded on or after the specified date. The value must be formatted as YYYY-MM-DD.
    # @param enddate [Date] Filters results to any deposits that were recorded on or before the specified date. The value must be formatted as YYYY-MM-DD.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :orderby &#x60;orderby&#x60; indicates the field(s) and direction to sort the results in the response. See &lt;a href&#x3D;\&quot;#section/API-Overview/Bulk-Request-Options\&quot;&gt;Bulk Request Options&lt;/a&gt; for more information.
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The &#x60;offset&#x60; is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 1000 and the default is 50.
    # @return [Array<BankAccountDepositMessage>]
    def get_bank_account_deposits(bank_account_id, startdate, enddate, opts = {})
      data, _status_code, _headers = get_bank_account_deposits_with_http_info(bank_account_id, startdate, enddate, opts)
      data
    end

    # Retrieve all deposits
    # Retrieves all bank account deposits.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; BankAccount&lt;/span&gt; - &#x60;View&#x60;
    # @param bank_account_id [Integer] 
    # @param startdate [Date] Filters results to any deposits that were recorded on or after the specified date. The value must be formatted as YYYY-MM-DD.
    # @param enddate [Date] Filters results to any deposits that were recorded on or before the specified date. The value must be formatted as YYYY-MM-DD.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :orderby &#x60;orderby&#x60; indicates the field(s) and direction to sort the results in the response. See &lt;a href&#x3D;\&quot;#section/API-Overview/Bulk-Request-Options\&quot;&gt;Bulk Request Options&lt;/a&gt; for more information.
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The &#x60;offset&#x60; is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 1000 and the default is 50.
    # @return [Array<(Array<BankAccountDepositMessage>, Integer, Hash)>] Array<BankAccountDepositMessage> data, response status code and response headers
    def get_bank_account_deposits_with_http_info(bank_account_id, startdate, enddate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankAccountsApi.get_bank_account_deposits ...'
      end
      # verify the required parameter 'bank_account_id' is set
      if @api_client.config.client_side_validation && bank_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_id' when calling BankAccountsApi.get_bank_account_deposits"
      end
      # verify the required parameter 'startdate' is set
      if @api_client.config.client_side_validation && startdate.nil?
        fail ArgumentError, "Missing the required parameter 'startdate' when calling BankAccountsApi.get_bank_account_deposits"
      end
      # verify the required parameter 'enddate' is set
      if @api_client.config.client_side_validation && enddate.nil?
        fail ArgumentError, "Missing the required parameter 'enddate' when calling BankAccountsApi.get_bank_account_deposits"
      end
      # resource path
      local_var_path = '/v1/bankaccounts/{bankAccountId}/deposits'.sub('{' + 'bankAccountId' + '}', CGI.escape(bank_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startdate'] = startdate
      query_params[:'enddate'] = enddate
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<BankAccountDepositMessage>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BankAccountsApi.get_bank_account_deposits",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankAccountsApi#get_bank_account_deposits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a transaction
    # Retrieves a specific bank account transaction.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bank Account</span> - `View`
    # @param bank_account_id [Integer] 
    # @param transaction_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [BankAccountTransactionMessage]
    def get_bank_account_transaction_by_id(bank_account_id, transaction_id, opts = {})
      data, _status_code, _headers = get_bank_account_transaction_by_id_with_http_info(bank_account_id, transaction_id, opts)
      data
    end

    # Retrieve a transaction
    # Retrieves a specific bank account transaction.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; Bank Account&lt;/span&gt; - &#x60;View&#x60;
    # @param bank_account_id [Integer] 
    # @param transaction_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BankAccountTransactionMessage, Integer, Hash)>] BankAccountTransactionMessage data, response status code and response headers
    def get_bank_account_transaction_by_id_with_http_info(bank_account_id, transaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankAccountsApi.get_bank_account_transaction_by_id ...'
      end
      # verify the required parameter 'bank_account_id' is set
      if @api_client.config.client_side_validation && bank_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_id' when calling BankAccountsApi.get_bank_account_transaction_by_id"
      end
      # verify the required parameter 'transaction_id' is set
      if @api_client.config.client_side_validation && transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_id' when calling BankAccountsApi.get_bank_account_transaction_by_id"
      end
      # resource path
      local_var_path = '/v1/bankaccounts/{bankAccountId}/transactions/{transactionId}'.sub('{' + 'bankAccountId' + '}', CGI.escape(bank_account_id.to_s)).sub('{' + 'transactionId' + '}', CGI.escape(transaction_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BankAccountTransactionMessage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BankAccountsApi.get_bank_account_transaction_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankAccountsApi#get_bank_account_transaction_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all transactions
    # Retrieves all bank account transactions.              <br /><br />              Note: When using the `orderby` query string parameter, the only supported parameter is `EntryDate`.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bank Accounts</span> - `View`
    # @param bank_account_id [Integer] 
    # @param startdate [Date] Filters results to any transactions that were recorded on or after the specified date. The value must be formatted as YYYY-MM-DD.
    # @param enddate [Date] Filters results to any transactions that were recorded on or before the specified date. The value must be formatted as YYYY-MM-DD.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :selectionentityid Filters results to any transaction containing journal lines for an entity associated with the specified entity id value. The id must be of the type specified in SelectionEntityType.
    # @option opts [String] :selectionentitytype Specifies the type of entity that SelectionEntityId refers to.
    # @option opts [String] :orderby &#x60;orderby&#x60; indicates the field(s) and direction to sort the results in the response. See &lt;a href&#x3D;\&quot;#section/API-Overview/Bulk-Request-Options\&quot;&gt;Bulk Request Options&lt;/a&gt; for more information.
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The &#x60;offset&#x60; is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 1000 and the default is 50.
    # @return [Array<BankAccountTransactionMessage>]
    def get_bank_account_transactions(bank_account_id, startdate, enddate, opts = {})
      data, _status_code, _headers = get_bank_account_transactions_with_http_info(bank_account_id, startdate, enddate, opts)
      data
    end

    # Retrieve all transactions
    # Retrieves all bank account transactions.              &lt;br /&gt;&lt;br /&gt;              Note: When using the &#x60;orderby&#x60; query string parameter, the only supported parameter is &#x60;EntryDate&#x60;.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; Bank Accounts&lt;/span&gt; - &#x60;View&#x60;
    # @param bank_account_id [Integer] 
    # @param startdate [Date] Filters results to any transactions that were recorded on or after the specified date. The value must be formatted as YYYY-MM-DD.
    # @param enddate [Date] Filters results to any transactions that were recorded on or before the specified date. The value must be formatted as YYYY-MM-DD.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :selectionentityid Filters results to any transaction containing journal lines for an entity associated with the specified entity id value. The id must be of the type specified in SelectionEntityType.
    # @option opts [String] :selectionentitytype Specifies the type of entity that SelectionEntityId refers to.
    # @option opts [String] :orderby &#x60;orderby&#x60; indicates the field(s) and direction to sort the results in the response. See &lt;a href&#x3D;\&quot;#section/API-Overview/Bulk-Request-Options\&quot;&gt;Bulk Request Options&lt;/a&gt; for more information.
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The &#x60;offset&#x60; is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 1000 and the default is 50.
    # @return [Array<(Array<BankAccountTransactionMessage>, Integer, Hash)>] Array<BankAccountTransactionMessage> data, response status code and response headers
    def get_bank_account_transactions_with_http_info(bank_account_id, startdate, enddate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankAccountsApi.get_bank_account_transactions ...'
      end
      # verify the required parameter 'bank_account_id' is set
      if @api_client.config.client_side_validation && bank_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_id' when calling BankAccountsApi.get_bank_account_transactions"
      end
      # verify the required parameter 'startdate' is set
      if @api_client.config.client_side_validation && startdate.nil?
        fail ArgumentError, "Missing the required parameter 'startdate' when calling BankAccountsApi.get_bank_account_transactions"
      end
      # verify the required parameter 'enddate' is set
      if @api_client.config.client_side_validation && enddate.nil?
        fail ArgumentError, "Missing the required parameter 'enddate' when calling BankAccountsApi.get_bank_account_transactions"
      end
      allowable_values = ["Company", "Rental", "RentalOwner", "Association"]
      if @api_client.config.client_side_validation && opts[:'selectionentitytype'] && !allowable_values.include?(opts[:'selectionentitytype'])
        fail ArgumentError, "invalid value for \"selectionentitytype\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/v1/bankaccounts/{bankAccountId}/transactions'.sub('{' + 'bankAccountId' + '}', CGI.escape(bank_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startdate'] = startdate
      query_params[:'enddate'] = enddate
      query_params[:'selectionentityid'] = opts[:'selectionentityid'] if !opts[:'selectionentityid'].nil?
      query_params[:'selectionentitytype'] = opts[:'selectionentitytype'] if !opts[:'selectionentitytype'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<BankAccountTransactionMessage>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BankAccountsApi.get_bank_account_transactions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankAccountsApi#get_bank_account_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a transfer
    # Retrieves a bank account transfer.  <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bank Accounts</span> - `View`
    # @param bank_account_id [Integer] The bank account identifier.
    # @param transfer_id [Integer] The transfer identifier.
    # @param [Hash] opts the optional parameters
    # @return [BankAccountMessage]
    def get_bank_account_transfer_by_id(bank_account_id, transfer_id, opts = {})
      data, _status_code, _headers = get_bank_account_transfer_by_id_with_http_info(bank_account_id, transfer_id, opts)
      data
    end

    # Retrieve a transfer
    # Retrieves a bank account transfer.  &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; Bank Accounts&lt;/span&gt; - &#x60;View&#x60;
    # @param bank_account_id [Integer] The bank account identifier.
    # @param transfer_id [Integer] The transfer identifier.
    # @param [Hash] opts the optional parameters
    # @return [Array<(BankAccountMessage, Integer, Hash)>] BankAccountMessage data, response status code and response headers
    def get_bank_account_transfer_by_id_with_http_info(bank_account_id, transfer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankAccountsApi.get_bank_account_transfer_by_id ...'
      end
      # verify the required parameter 'bank_account_id' is set
      if @api_client.config.client_side_validation && bank_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_id' when calling BankAccountsApi.get_bank_account_transfer_by_id"
      end
      # verify the required parameter 'transfer_id' is set
      if @api_client.config.client_side_validation && transfer_id.nil?
        fail ArgumentError, "Missing the required parameter 'transfer_id' when calling BankAccountsApi.get_bank_account_transfer_by_id"
      end
      # resource path
      local_var_path = '/v1/bankaccounts/{bankAccountId}/transfers/{transferId}'.sub('{' + 'bankAccountId' + '}', CGI.escape(bank_account_id.to_s)).sub('{' + 'transferId' + '}', CGI.escape(transfer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BankAccountMessage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BankAccountsApi.get_bank_account_transfer_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankAccountsApi#get_bank_account_transfer_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all transfers
    # Retrieves all bank account transfers.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; BankAccount</span> - `View`
    # @param bank_account_id [Integer] 
    # @param startdate [Date] Filters results to any transfers that were recorded on or after the specified date. The value must be formatted as YYYY-MM-DD.
    # @param enddate [Date] Filters results to any transfers that were recorded on or before the specified date. The value must be formatted as YYYY-MM-DD.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :orderby &#x60;orderby&#x60; indicates the field(s) and direction to sort the results in the response. See &lt;a href&#x3D;\&quot;#section/API-Overview/Bulk-Request-Options\&quot;&gt;Bulk Request Options&lt;/a&gt; for more information.
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The &#x60;offset&#x60; is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 1000 and the default is 50.
    # @return [Array<BankAccountTransferMessage>]
    def get_bank_account_transfers(bank_account_id, startdate, enddate, opts = {})
      data, _status_code, _headers = get_bank_account_transfers_with_http_info(bank_account_id, startdate, enddate, opts)
      data
    end

    # Retrieve all transfers
    # Retrieves all bank account transfers.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; BankAccount&lt;/span&gt; - &#x60;View&#x60;
    # @param bank_account_id [Integer] 
    # @param startdate [Date] Filters results to any transfers that were recorded on or after the specified date. The value must be formatted as YYYY-MM-DD.
    # @param enddate [Date] Filters results to any transfers that were recorded on or before the specified date. The value must be formatted as YYYY-MM-DD.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :orderby &#x60;orderby&#x60; indicates the field(s) and direction to sort the results in the response. See &lt;a href&#x3D;\&quot;#section/API-Overview/Bulk-Request-Options\&quot;&gt;Bulk Request Options&lt;/a&gt; for more information.
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The &#x60;offset&#x60; is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 1000 and the default is 50.
    # @return [Array<(Array<BankAccountTransferMessage>, Integer, Hash)>] Array<BankAccountTransferMessage> data, response status code and response headers
    def get_bank_account_transfers_with_http_info(bank_account_id, startdate, enddate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankAccountsApi.get_bank_account_transfers ...'
      end
      # verify the required parameter 'bank_account_id' is set
      if @api_client.config.client_side_validation && bank_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_id' when calling BankAccountsApi.get_bank_account_transfers"
      end
      # verify the required parameter 'startdate' is set
      if @api_client.config.client_side_validation && startdate.nil?
        fail ArgumentError, "Missing the required parameter 'startdate' when calling BankAccountsApi.get_bank_account_transfers"
      end
      # verify the required parameter 'enddate' is set
      if @api_client.config.client_side_validation && enddate.nil?
        fail ArgumentError, "Missing the required parameter 'enddate' when calling BankAccountsApi.get_bank_account_transfers"
      end
      # resource path
      local_var_path = '/v1/bankaccounts/{bankAccountId}/transfers'.sub('{' + 'bankAccountId' + '}', CGI.escape(bank_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startdate'] = startdate
      query_params[:'enddate'] = enddate
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<BankAccountTransferMessage>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BankAccountsApi.get_bank_account_transfers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankAccountsApi#get_bank_account_transfers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a withdrawal
    # Retrieves a bank account withdrawal.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; BankAccounts</span> - `View`
    # @param bank_account_id [Integer] 
    # @param withdrawal_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [BankAccountWithdrawalMessage]
    def get_bank_account_withdrawal_by_id(bank_account_id, withdrawal_id, opts = {})
      data, _status_code, _headers = get_bank_account_withdrawal_by_id_with_http_info(bank_account_id, withdrawal_id, opts)
      data
    end

    # Retrieve a withdrawal
    # Retrieves a bank account withdrawal.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; BankAccounts&lt;/span&gt; - &#x60;View&#x60;
    # @param bank_account_id [Integer] 
    # @param withdrawal_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BankAccountWithdrawalMessage, Integer, Hash)>] BankAccountWithdrawalMessage data, response status code and response headers
    def get_bank_account_withdrawal_by_id_with_http_info(bank_account_id, withdrawal_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankAccountsApi.get_bank_account_withdrawal_by_id ...'
      end
      # verify the required parameter 'bank_account_id' is set
      if @api_client.config.client_side_validation && bank_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_id' when calling BankAccountsApi.get_bank_account_withdrawal_by_id"
      end
      # verify the required parameter 'withdrawal_id' is set
      if @api_client.config.client_side_validation && withdrawal_id.nil?
        fail ArgumentError, "Missing the required parameter 'withdrawal_id' when calling BankAccountsApi.get_bank_account_withdrawal_by_id"
      end
      # resource path
      local_var_path = '/v1/bankaccounts/{bankAccountId}/withdrawals/{withdrawalId}'.sub('{' + 'bankAccountId' + '}', CGI.escape(bank_account_id.to_s)).sub('{' + 'withdrawalId' + '}', CGI.escape(withdrawal_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BankAccountWithdrawalMessage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BankAccountsApi.get_bank_account_withdrawal_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankAccountsApi#get_bank_account_withdrawal_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all withdrawals
    # Retrieves all bank account withdrawals.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; BankAccounts</span> - `View`
    # @param bank_account_id [Integer] 
    # @param startdate [Date] Filters results to any transactions that were recorded on or after the specified date. The value must be formatted as YYYY-MM-DD.
    # @param enddate [Date] Filters results to any transactions that were recorded on or before the specified date. The value must be formatted as YYYY-MM-DD.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :orderby &#x60;orderby&#x60; indicates the field(s) and direction to sort the results in the response. See &lt;a href&#x3D;\&quot;#section/API-Overview/Bulk-Request-Options\&quot;&gt;Bulk Request Options&lt;/a&gt; for more information.
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The &#x60;offset&#x60; is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 1000 and the default is 50.
    # @return [Array<BankAccountWithdrawalMessage>]
    def get_bank_account_withdrawals(bank_account_id, startdate, enddate, opts = {})
      data, _status_code, _headers = get_bank_account_withdrawals_with_http_info(bank_account_id, startdate, enddate, opts)
      data
    end

    # Retrieve all withdrawals
    # Retrieves all bank account withdrawals.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; BankAccounts&lt;/span&gt; - &#x60;View&#x60;
    # @param bank_account_id [Integer] 
    # @param startdate [Date] Filters results to any transactions that were recorded on or after the specified date. The value must be formatted as YYYY-MM-DD.
    # @param enddate [Date] Filters results to any transactions that were recorded on or before the specified date. The value must be formatted as YYYY-MM-DD.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :orderby &#x60;orderby&#x60; indicates the field(s) and direction to sort the results in the response. See &lt;a href&#x3D;\&quot;#section/API-Overview/Bulk-Request-Options\&quot;&gt;Bulk Request Options&lt;/a&gt; for more information.
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The &#x60;offset&#x60; is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 1000 and the default is 50.
    # @return [Array<(Array<BankAccountWithdrawalMessage>, Integer, Hash)>] Array<BankAccountWithdrawalMessage> data, response status code and response headers
    def get_bank_account_withdrawals_with_http_info(bank_account_id, startdate, enddate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankAccountsApi.get_bank_account_withdrawals ...'
      end
      # verify the required parameter 'bank_account_id' is set
      if @api_client.config.client_side_validation && bank_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_id' when calling BankAccountsApi.get_bank_account_withdrawals"
      end
      # verify the required parameter 'startdate' is set
      if @api_client.config.client_side_validation && startdate.nil?
        fail ArgumentError, "Missing the required parameter 'startdate' when calling BankAccountsApi.get_bank_account_withdrawals"
      end
      # verify the required parameter 'enddate' is set
      if @api_client.config.client_side_validation && enddate.nil?
        fail ArgumentError, "Missing the required parameter 'enddate' when calling BankAccountsApi.get_bank_account_withdrawals"
      end
      # resource path
      local_var_path = '/v1/bankaccounts/{bankAccountId}/withdrawals'.sub('{' + 'bankAccountId' + '}', CGI.escape(bank_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startdate'] = startdate
      query_params[:'enddate'] = enddate
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<BankAccountWithdrawalMessage>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BankAccountsApi.get_bank_account_withdrawals",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankAccountsApi#get_bank_account_withdrawals\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a check
    # Retrieves a bank account check.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bank Accounts</span> - `View`
    # @param bank_account_id [Integer] 
    # @param check_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [BankAccountCheckMessage]
    def get_check_for_bank_account(bank_account_id, check_id, opts = {})
      data, _status_code, _headers = get_check_for_bank_account_with_http_info(bank_account_id, check_id, opts)
      data
    end

    # Retrieve a check
    # Retrieves a bank account check.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; Bank Accounts&lt;/span&gt; - &#x60;View&#x60;
    # @param bank_account_id [Integer] 
    # @param check_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BankAccountCheckMessage, Integer, Hash)>] BankAccountCheckMessage data, response status code and response headers
    def get_check_for_bank_account_with_http_info(bank_account_id, check_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankAccountsApi.get_check_for_bank_account ...'
      end
      # verify the required parameter 'bank_account_id' is set
      if @api_client.config.client_side_validation && bank_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_id' when calling BankAccountsApi.get_check_for_bank_account"
      end
      # verify the required parameter 'check_id' is set
      if @api_client.config.client_side_validation && check_id.nil?
        fail ArgumentError, "Missing the required parameter 'check_id' when calling BankAccountsApi.get_check_for_bank_account"
      end
      # resource path
      local_var_path = '/v1/bankaccounts/{bankAccountId}/checks/{checkId}'.sub('{' + 'bankAccountId' + '}', CGI.escape(bank_account_id.to_s)).sub('{' + 'checkId' + '}', CGI.escape(check_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BankAccountCheckMessage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BankAccountsApi.get_check_for_bank_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankAccountsApi#get_check_for_bank_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a quick deposit
    # Retrieves a quick deposit.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; BankAccount</span> - `View`
    # @param bank_account_id [Integer] 
    # @param quick_deposit_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [BankAccountQuickDepositMessage]
    def get_quick_deposit_by_id(bank_account_id, quick_deposit_id, opts = {})
      data, _status_code, _headers = get_quick_deposit_by_id_with_http_info(bank_account_id, quick_deposit_id, opts)
      data
    end

    # Retrieve a quick deposit
    # Retrieves a quick deposit.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; BankAccount&lt;/span&gt; - &#x60;View&#x60;
    # @param bank_account_id [Integer] 
    # @param quick_deposit_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BankAccountQuickDepositMessage, Integer, Hash)>] BankAccountQuickDepositMessage data, response status code and response headers
    def get_quick_deposit_by_id_with_http_info(bank_account_id, quick_deposit_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankAccountsApi.get_quick_deposit_by_id ...'
      end
      # verify the required parameter 'bank_account_id' is set
      if @api_client.config.client_side_validation && bank_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_id' when calling BankAccountsApi.get_quick_deposit_by_id"
      end
      # verify the required parameter 'quick_deposit_id' is set
      if @api_client.config.client_side_validation && quick_deposit_id.nil?
        fail ArgumentError, "Missing the required parameter 'quick_deposit_id' when calling BankAccountsApi.get_quick_deposit_by_id"
      end
      # resource path
      local_var_path = '/v1/bankaccounts/{bankAccountId}/quickdeposits/{quickDepositId}'.sub('{' + 'bankAccountId' + '}', CGI.escape(bank_account_id.to_s)).sub('{' + 'quickDepositId' + '}', CGI.escape(quick_deposit_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BankAccountQuickDepositMessage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BankAccountsApi.get_quick_deposit_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankAccountsApi#get_quick_deposit_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all undeposited funds
    # Retrieve all bank account undeposited funds.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bank Accounts</span> - `View`
    # @param bank_account_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :orderby &#x60;orderby&#x60; indicates the field(s) and direction to sort the results in the response. See &lt;a href&#x3D;\&quot;#section/API-Overview/Bulk-Request-Options\&quot;&gt;Bulk Request Options&lt;/a&gt; for more information.
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The &#x60;offset&#x60; is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 1000 and the default is 50.
    # @return [Array<UndepositedFundsMessage>]
    def get_undeposited_funds(bank_account_id, opts = {})
      data, _status_code, _headers = get_undeposited_funds_with_http_info(bank_account_id, opts)
      data
    end

    # Retrieve all undeposited funds
    # Retrieve all bank account undeposited funds.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; Bank Accounts&lt;/span&gt; - &#x60;View&#x60;
    # @param bank_account_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :orderby &#x60;orderby&#x60; indicates the field(s) and direction to sort the results in the response. See &lt;a href&#x3D;\&quot;#section/API-Overview/Bulk-Request-Options\&quot;&gt;Bulk Request Options&lt;/a&gt; for more information.
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The &#x60;offset&#x60; is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 1000 and the default is 50.
    # @return [Array<(Array<UndepositedFundsMessage>, Integer, Hash)>] Array<UndepositedFundsMessage> data, response status code and response headers
    def get_undeposited_funds_with_http_info(bank_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankAccountsApi.get_undeposited_funds ...'
      end
      # verify the required parameter 'bank_account_id' is set
      if @api_client.config.client_side_validation && bank_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_id' when calling BankAccountsApi.get_undeposited_funds"
      end
      # resource path
      local_var_path = '/v1/bankaccounts/{bankAccountId}/undepositedfunds'.sub('{' + 'bankAccountId' + '}', CGI.escape(bank_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UndepositedFundsMessage>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BankAccountsApi.get_undeposited_funds",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankAccountsApi#get_undeposited_funds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a bank account
    # Updates a bank account.              <br /><br /><strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. <br />The recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Banking</span> - `View` `Edit`
    # @param bank_account_id [Integer] 
    # @param bank_account_put_message [BankAccountPutMessage] 
    # @param [Hash] opts the optional parameters
    # @return [BankAccountMessage]
    def update_bank_account(bank_account_id, bank_account_put_message, opts = {})
      data, _status_code, _headers = update_bank_account_with_http_info(bank_account_id, bank_account_put_message, opts)
      data
    end

    # Update a bank account
    # Updates a bank account.              &lt;br /&gt;&lt;br /&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Any field not included in the update request will be set to either an empty string or &#x60;null&#x60; in the database depending on the field definition. &lt;br /&gt;The recommended workflow to ensure no data is inadvertently overwritten is to execute a &#x60;GET&#x60; request for the resource you&#39;re about to update and then use this response to fill any of the fields that are not being updated.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; Banking&lt;/span&gt; - &#x60;View&#x60; &#x60;Edit&#x60;
    # @param bank_account_id [Integer] 
    # @param bank_account_put_message [BankAccountPutMessage] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BankAccountMessage, Integer, Hash)>] BankAccountMessage data, response status code and response headers
    def update_bank_account_with_http_info(bank_account_id, bank_account_put_message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankAccountsApi.update_bank_account ...'
      end
      # verify the required parameter 'bank_account_id' is set
      if @api_client.config.client_side_validation && bank_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_id' when calling BankAccountsApi.update_bank_account"
      end
      # verify the required parameter 'bank_account_put_message' is set
      if @api_client.config.client_side_validation && bank_account_put_message.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_put_message' when calling BankAccountsApi.update_bank_account"
      end
      # resource path
      local_var_path = '/v1/bankaccounts/{bankAccountId}'.sub('{' + 'bankAccountId' + '}', CGI.escape(bank_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(bank_account_put_message)

      # return_type
      return_type = opts[:debug_return_type] || 'BankAccountMessage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BankAccountsApi.update_bank_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankAccountsApi#update_bank_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a deposit
    # Updates a deposit.              <br /><br /><strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. <br />The recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bank Accounts</span> - `View` `Edit`
    # @param bank_account_id [Integer] 
    # @param deposit_id [Integer] 
    # @param bank_account_deposit_put_message [BankAccountDepositPutMessage] 
    # @param [Hash] opts the optional parameters
    # @return [BankAccountDepositMessage]
    def update_bank_account_deposit(bank_account_id, deposit_id, bank_account_deposit_put_message, opts = {})
      data, _status_code, _headers = update_bank_account_deposit_with_http_info(bank_account_id, deposit_id, bank_account_deposit_put_message, opts)
      data
    end

    # Update a deposit
    # Updates a deposit.              &lt;br /&gt;&lt;br /&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Any field not included in the update request will be set to either an empty string or &#x60;null&#x60; in the database depending on the field definition. &lt;br /&gt;The recommended workflow to ensure no data is inadvertently overwritten is to execute a &#x60;GET&#x60; request for the resource you&#39;re about to update and then use this response to fill any of the fields that are not being updated.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; Bank Accounts&lt;/span&gt; - &#x60;View&#x60; &#x60;Edit&#x60;
    # @param bank_account_id [Integer] 
    # @param deposit_id [Integer] 
    # @param bank_account_deposit_put_message [BankAccountDepositPutMessage] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BankAccountDepositMessage, Integer, Hash)>] BankAccountDepositMessage data, response status code and response headers
    def update_bank_account_deposit_with_http_info(bank_account_id, deposit_id, bank_account_deposit_put_message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankAccountsApi.update_bank_account_deposit ...'
      end
      # verify the required parameter 'bank_account_id' is set
      if @api_client.config.client_side_validation && bank_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_id' when calling BankAccountsApi.update_bank_account_deposit"
      end
      # verify the required parameter 'deposit_id' is set
      if @api_client.config.client_side_validation && deposit_id.nil?
        fail ArgumentError, "Missing the required parameter 'deposit_id' when calling BankAccountsApi.update_bank_account_deposit"
      end
      # verify the required parameter 'bank_account_deposit_put_message' is set
      if @api_client.config.client_side_validation && bank_account_deposit_put_message.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_deposit_put_message' when calling BankAccountsApi.update_bank_account_deposit"
      end
      # resource path
      local_var_path = '/v1/bankaccounts/{bankAccountId}/deposits/{depositId}'.sub('{' + 'bankAccountId' + '}', CGI.escape(bank_account_id.to_s)).sub('{' + 'depositId' + '}', CGI.escape(deposit_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(bank_account_deposit_put_message)

      # return_type
      return_type = opts[:debug_return_type] || 'BankAccountDepositMessage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BankAccountsApi.update_bank_account_deposit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankAccountsApi#update_bank_account_deposit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a transfer
    # Updates a bank account transfer.              <br /><br /><strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. <br />The recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bank Accounts</span> - `Edit`
    # @param bank_account_id [Integer] 
    # @param transfer_id [Integer] 
    # @param bank_account_transfer_save_message [BankAccountTransferSaveMessage] 
    # @param [Hash] opts the optional parameters
    # @return [BankAccountTransferMessage]
    def update_bank_account_transfer(bank_account_id, transfer_id, bank_account_transfer_save_message, opts = {})
      data, _status_code, _headers = update_bank_account_transfer_with_http_info(bank_account_id, transfer_id, bank_account_transfer_save_message, opts)
      data
    end

    # Update a transfer
    # Updates a bank account transfer.              &lt;br /&gt;&lt;br /&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Any field not included in the update request will be set to either an empty string or &#x60;null&#x60; in the database depending on the field definition. &lt;br /&gt;The recommended workflow to ensure no data is inadvertently overwritten is to execute a &#x60;GET&#x60; request for the resource you&#39;re about to update and then use this response to fill any of the fields that are not being updated.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; Bank Accounts&lt;/span&gt; - &#x60;Edit&#x60;
    # @param bank_account_id [Integer] 
    # @param transfer_id [Integer] 
    # @param bank_account_transfer_save_message [BankAccountTransferSaveMessage] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BankAccountTransferMessage, Integer, Hash)>] BankAccountTransferMessage data, response status code and response headers
    def update_bank_account_transfer_with_http_info(bank_account_id, transfer_id, bank_account_transfer_save_message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankAccountsApi.update_bank_account_transfer ...'
      end
      # verify the required parameter 'bank_account_id' is set
      if @api_client.config.client_side_validation && bank_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_id' when calling BankAccountsApi.update_bank_account_transfer"
      end
      # verify the required parameter 'transfer_id' is set
      if @api_client.config.client_side_validation && transfer_id.nil?
        fail ArgumentError, "Missing the required parameter 'transfer_id' when calling BankAccountsApi.update_bank_account_transfer"
      end
      # verify the required parameter 'bank_account_transfer_save_message' is set
      if @api_client.config.client_side_validation && bank_account_transfer_save_message.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_transfer_save_message' when calling BankAccountsApi.update_bank_account_transfer"
      end
      # resource path
      local_var_path = '/v1/bankaccounts/{bankAccountId}/transfers/{transferId}'.sub('{' + 'bankAccountId' + '}', CGI.escape(bank_account_id.to_s)).sub('{' + 'transferId' + '}', CGI.escape(transfer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(bank_account_transfer_save_message)

      # return_type
      return_type = opts[:debug_return_type] || 'BankAccountTransferMessage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BankAccountsApi.update_bank_account_transfer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankAccountsApi#update_bank_account_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a withdrawal
    # Updates a bank account withdrawal.              <br /><br /><strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. <br />The recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bank Accounts</span> - `View` `Edit`
    # @param bank_account_id [Integer] 
    # @param withdrawal_id [Integer] 
    # @param bank_account_withdrawal_save_message [BankAccountWithdrawalSaveMessage] 
    # @param [Hash] opts the optional parameters
    # @return [BankAccountWithdrawalMessage]
    def update_bank_account_withdrawal(bank_account_id, withdrawal_id, bank_account_withdrawal_save_message, opts = {})
      data, _status_code, _headers = update_bank_account_withdrawal_with_http_info(bank_account_id, withdrawal_id, bank_account_withdrawal_save_message, opts)
      data
    end

    # Update a withdrawal
    # Updates a bank account withdrawal.              &lt;br /&gt;&lt;br /&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Any field not included in the update request will be set to either an empty string or &#x60;null&#x60; in the database depending on the field definition. &lt;br /&gt;The recommended workflow to ensure no data is inadvertently overwritten is to execute a &#x60;GET&#x60; request for the resource you&#39;re about to update and then use this response to fill any of the fields that are not being updated.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; Bank Accounts&lt;/span&gt; - &#x60;View&#x60; &#x60;Edit&#x60;
    # @param bank_account_id [Integer] 
    # @param withdrawal_id [Integer] 
    # @param bank_account_withdrawal_save_message [BankAccountWithdrawalSaveMessage] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BankAccountWithdrawalMessage, Integer, Hash)>] BankAccountWithdrawalMessage data, response status code and response headers
    def update_bank_account_withdrawal_with_http_info(bank_account_id, withdrawal_id, bank_account_withdrawal_save_message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankAccountsApi.update_bank_account_withdrawal ...'
      end
      # verify the required parameter 'bank_account_id' is set
      if @api_client.config.client_side_validation && bank_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_id' when calling BankAccountsApi.update_bank_account_withdrawal"
      end
      # verify the required parameter 'withdrawal_id' is set
      if @api_client.config.client_side_validation && withdrawal_id.nil?
        fail ArgumentError, "Missing the required parameter 'withdrawal_id' when calling BankAccountsApi.update_bank_account_withdrawal"
      end
      # verify the required parameter 'bank_account_withdrawal_save_message' is set
      if @api_client.config.client_side_validation && bank_account_withdrawal_save_message.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_withdrawal_save_message' when calling BankAccountsApi.update_bank_account_withdrawal"
      end
      # resource path
      local_var_path = '/v1/bankaccounts/{bankAccountId}/withdrawals/{withdrawalId}'.sub('{' + 'bankAccountId' + '}', CGI.escape(bank_account_id.to_s)).sub('{' + 'withdrawalId' + '}', CGI.escape(withdrawal_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(bank_account_withdrawal_save_message)

      # return_type
      return_type = opts[:debug_return_type] || 'BankAccountWithdrawalMessage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BankAccountsApi.update_bank_account_withdrawal",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankAccountsApi#update_bank_account_withdrawal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a check
    # Updates a check.              <br /><br /><strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. <br />The recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bank Accounts</span> - `View` `Edit`
    # @param bank_account_id [Integer] 
    # @param check_id [Integer] 
    # @param bank_account_check_put_message [BankAccountCheckPutMessage] 
    # @param [Hash] opts the optional parameters
    # @return [BankAccountCheckMessage]
    def update_check_for_bank_account(bank_account_id, check_id, bank_account_check_put_message, opts = {})
      data, _status_code, _headers = update_check_for_bank_account_with_http_info(bank_account_id, check_id, bank_account_check_put_message, opts)
      data
    end

    # Update a check
    # Updates a check.              &lt;br /&gt;&lt;br /&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Any field not included in the update request will be set to either an empty string or &#x60;null&#x60; in the database depending on the field definition. &lt;br /&gt;The recommended workflow to ensure no data is inadvertently overwritten is to execute a &#x60;GET&#x60; request for the resource you&#39;re about to update and then use this response to fill any of the fields that are not being updated.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; Bank Accounts&lt;/span&gt; - &#x60;View&#x60; &#x60;Edit&#x60;
    # @param bank_account_id [Integer] 
    # @param check_id [Integer] 
    # @param bank_account_check_put_message [BankAccountCheckPutMessage] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BankAccountCheckMessage, Integer, Hash)>] BankAccountCheckMessage data, response status code and response headers
    def update_check_for_bank_account_with_http_info(bank_account_id, check_id, bank_account_check_put_message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankAccountsApi.update_check_for_bank_account ...'
      end
      # verify the required parameter 'bank_account_id' is set
      if @api_client.config.client_side_validation && bank_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_id' when calling BankAccountsApi.update_check_for_bank_account"
      end
      # verify the required parameter 'check_id' is set
      if @api_client.config.client_side_validation && check_id.nil?
        fail ArgumentError, "Missing the required parameter 'check_id' when calling BankAccountsApi.update_check_for_bank_account"
      end
      # verify the required parameter 'bank_account_check_put_message' is set
      if @api_client.config.client_side_validation && bank_account_check_put_message.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_check_put_message' when calling BankAccountsApi.update_check_for_bank_account"
      end
      # resource path
      local_var_path = '/v1/bankaccounts/{bankAccountId}/checks/{checkId}'.sub('{' + 'bankAccountId' + '}', CGI.escape(bank_account_id.to_s)).sub('{' + 'checkId' + '}', CGI.escape(check_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(bank_account_check_put_message)

      # return_type
      return_type = opts[:debug_return_type] || 'BankAccountCheckMessage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BankAccountsApi.update_check_for_bank_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankAccountsApi#update_check_for_bank_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a quick deposit
    # Updates a quick deposit.              <br /><br /><strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. <br />The recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting &gt; Bank Accounts</span> - `Edit`
    # @param bank_account_id [Integer] 
    # @param quick_deposit_id [Integer] 
    # @param bank_account_quick_deposit_save_message [BankAccountQuickDepositSaveMessage] 
    # @param [Hash] opts the optional parameters
    # @return [BankAccountQuickDepositMessage]
    def update_quick_deposit(bank_account_id, quick_deposit_id, bank_account_quick_deposit_save_message, opts = {})
      data, _status_code, _headers = update_quick_deposit_with_http_info(bank_account_id, quick_deposit_id, bank_account_quick_deposit_save_message, opts)
      data
    end

    # Update a quick deposit
    # Updates a quick deposit.              &lt;br /&gt;&lt;br /&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Any field not included in the update request will be set to either an empty string or &#x60;null&#x60; in the database depending on the field definition. &lt;br /&gt;The recommended workflow to ensure no data is inadvertently overwritten is to execute a &#x60;GET&#x60; request for the resource you&#39;re about to update and then use this response to fill any of the fields that are not being updated.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Accounting &amp;gt; Bank Accounts&lt;/span&gt; - &#x60;Edit&#x60;
    # @param bank_account_id [Integer] 
    # @param quick_deposit_id [Integer] 
    # @param bank_account_quick_deposit_save_message [BankAccountQuickDepositSaveMessage] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BankAccountQuickDepositMessage, Integer, Hash)>] BankAccountQuickDepositMessage data, response status code and response headers
    def update_quick_deposit_with_http_info(bank_account_id, quick_deposit_id, bank_account_quick_deposit_save_message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankAccountsApi.update_quick_deposit ...'
      end
      # verify the required parameter 'bank_account_id' is set
      if @api_client.config.client_side_validation && bank_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_id' when calling BankAccountsApi.update_quick_deposit"
      end
      # verify the required parameter 'quick_deposit_id' is set
      if @api_client.config.client_side_validation && quick_deposit_id.nil?
        fail ArgumentError, "Missing the required parameter 'quick_deposit_id' when calling BankAccountsApi.update_quick_deposit"
      end
      # verify the required parameter 'bank_account_quick_deposit_save_message' is set
      if @api_client.config.client_side_validation && bank_account_quick_deposit_save_message.nil?
        fail ArgumentError, "Missing the required parameter 'bank_account_quick_deposit_save_message' when calling BankAccountsApi.update_quick_deposit"
      end
      # resource path
      local_var_path = '/v1/bankaccounts/{bankAccountId}/quickdeposits/{quickDepositId}'.sub('{' + 'bankAccountId' + '}', CGI.escape(bank_account_id.to_s)).sub('{' + 'quickDepositId' + '}', CGI.escape(quick_deposit_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(bank_account_quick_deposit_save_message)

      # return_type
      return_type = opts[:debug_return_type] || 'BankAccountQuickDepositMessage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"BankAccountsApi.update_quick_deposit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankAccountsApi#update_quick_deposit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
