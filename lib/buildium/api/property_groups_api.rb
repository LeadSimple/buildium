=begin
#Open API, powered by Buildium

#GetAllGLAccounts) response message now includes the property `IsBankAccount`. This is a boolean property that indicates whether the general ledger account is also a bank account.  * A `Country` property has been added to all Address messages. This property contains an enumeration indicating the country of the address.   

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module Buildium
  class PropertyGroupsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a property group
    # Creates a property group.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Rental properties and units or</span> - `View` `Edit`              <span class=\"permissionBlock\">Associations &gt; Associations and units</span> - `View` `Edit`
    # @param property_group_post_message [PropertyGroupPostMessage] 
    # @param [Hash] opts the optional parameters
    # @return [PropertyGroupMessage]
    def create_property_group(property_group_post_message, opts = {})
      data, _status_code, _headers = create_property_group_with_http_info(property_group_post_message, opts)
      data
    end

    # Create a property group
    # Creates a property group.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Rentals &amp;gt; Rental properties and units or&lt;/span&gt; - &#x60;View&#x60; &#x60;Edit&#x60;              &lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Associations &amp;gt; Associations and units&lt;/span&gt; - &#x60;View&#x60; &#x60;Edit&#x60;
    # @param property_group_post_message [PropertyGroupPostMessage] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PropertyGroupMessage, Integer, Hash)>] PropertyGroupMessage data, response status code and response headers
    def create_property_group_with_http_info(property_group_post_message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PropertyGroupsApi.create_property_group ...'
      end
      # verify the required parameter 'property_group_post_message' is set
      if @api_client.config.client_side_validation && property_group_post_message.nil?
        fail ArgumentError, "Missing the required parameter 'property_group_post_message' when calling PropertyGroupsApi.create_property_group"
      end
      # resource path
      local_var_path = '/v1/propertygroups'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(property_group_post_message)

      # return_type
      return_type = opts[:debug_return_type] || 'PropertyGroupMessage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"PropertyGroupsApi.create_property_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PropertyGroupsApi#create_property_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a property group
    # Retrieves a property group.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Rental properties and units or</span> - `View`              <span class=\"permissionBlock\">Associations &gt; Associations and units</span> - `View`
    # @param property_group_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [PropertyGroupMessage]
    def get_property_group_by_id(property_group_id, opts = {})
      data, _status_code, _headers = get_property_group_by_id_with_http_info(property_group_id, opts)
      data
    end

    # Retrieve a property group
    # Retrieves a property group.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Rentals &amp;gt; Rental properties and units or&lt;/span&gt; - &#x60;View&#x60;              &lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Associations &amp;gt; Associations and units&lt;/span&gt; - &#x60;View&#x60;
    # @param property_group_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PropertyGroupMessage, Integer, Hash)>] PropertyGroupMessage data, response status code and response headers
    def get_property_group_by_id_with_http_info(property_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PropertyGroupsApi.get_property_group_by_id ...'
      end
      # verify the required parameter 'property_group_id' is set
      if @api_client.config.client_side_validation && property_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_group_id' when calling PropertyGroupsApi.get_property_group_by_id"
      end
      # resource path
      local_var_path = '/v1/propertygroups/{propertyGroupId}'.sub('{' + 'propertyGroupId' + '}', CGI.escape(property_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PropertyGroupMessage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"PropertyGroupsApi.get_property_group_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PropertyGroupsApi#get_property_group_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all property groups
    # Retrieves all property groups.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Rental properties and units or</span> - `View`              <span class=\"permissionBlock\">Associations &gt; Associations and units</span> - `View`
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :propertyids Filters results to property groups that contain any of the specified property ids.
    # @option opts [String] :nameordescription Filters results to any property group whose name or description contains the specified value.
    # @option opts [String] :orderby &#x60;orderby&#x60; indicates the field(s) and direction to sort the results in the response. See &lt;a href&#x3D;\&quot;#section/API-Overview/Bulk-Request-Options\&quot;&gt;Bulk Request Options&lt;/a&gt; for more information.
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The &#x60;offset&#x60; is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 1000 and the default is 50.
    # @return [Array<PropertyGroupMessage>]
    def get_property_groups(opts = {})
      data, _status_code, _headers = get_property_groups_with_http_info(opts)
      data
    end

    # Retrieve all property groups
    # Retrieves all property groups.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Rentals &amp;gt; Rental properties and units or&lt;/span&gt; - &#x60;View&#x60;              &lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Associations &amp;gt; Associations and units&lt;/span&gt; - &#x60;View&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :propertyids Filters results to property groups that contain any of the specified property ids.
    # @option opts [String] :nameordescription Filters results to any property group whose name or description contains the specified value.
    # @option opts [String] :orderby &#x60;orderby&#x60; indicates the field(s) and direction to sort the results in the response. See &lt;a href&#x3D;\&quot;#section/API-Overview/Bulk-Request-Options\&quot;&gt;Bulk Request Options&lt;/a&gt; for more information.
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The &#x60;offset&#x60; is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 1000 and the default is 50.
    # @return [Array<(Array<PropertyGroupMessage>, Integer, Hash)>] Array<PropertyGroupMessage> data, response status code and response headers
    def get_property_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PropertyGroupsApi.get_property_groups ...'
      end
      # resource path
      local_var_path = '/v1/propertygroups'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'propertyids'] = @api_client.build_collection_param(opts[:'propertyids'], :multi) if !opts[:'propertyids'].nil?
      query_params[:'nameordescription'] = opts[:'nameordescription'] if !opts[:'nameordescription'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PropertyGroupMessage>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"PropertyGroupsApi.get_property_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PropertyGroupsApi#get_property_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a property group
    # Updates a property group.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals &gt; Rental properties and units or</span> - `View` `Edit`              <span class=\"permissionBlock\">Associations &gt; Associations and units</span> - `View` `Edit`
    # @param property_group_id [Integer] 
    # @param property_group_put_message [PropertyGroupPutMessage] 
    # @param [Hash] opts the optional parameters
    # @return [PropertyGroupMessage]
    def update_property_group(property_group_id, property_group_put_message, opts = {})
      data, _status_code, _headers = update_property_group_with_http_info(property_group_id, property_group_put_message, opts)
      data
    end

    # Update a property group
    # Updates a property group.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Rentals &amp;gt; Rental properties and units or&lt;/span&gt; - &#x60;View&#x60; &#x60;Edit&#x60;              &lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Associations &amp;gt; Associations and units&lt;/span&gt; - &#x60;View&#x60; &#x60;Edit&#x60;
    # @param property_group_id [Integer] 
    # @param property_group_put_message [PropertyGroupPutMessage] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PropertyGroupMessage, Integer, Hash)>] PropertyGroupMessage data, response status code and response headers
    def update_property_group_with_http_info(property_group_id, property_group_put_message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PropertyGroupsApi.update_property_group ...'
      end
      # verify the required parameter 'property_group_id' is set
      if @api_client.config.client_side_validation && property_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_group_id' when calling PropertyGroupsApi.update_property_group"
      end
      # verify the required parameter 'property_group_put_message' is set
      if @api_client.config.client_side_validation && property_group_put_message.nil?
        fail ArgumentError, "Missing the required parameter 'property_group_put_message' when calling PropertyGroupsApi.update_property_group"
      end
      # resource path
      local_var_path = '/v1/propertygroups/{propertyGroupId}'.sub('{' + 'propertyGroupId' + '}', CGI.escape(property_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(property_group_put_message)

      # return_type
      return_type = opts[:debug_return_type] || 'PropertyGroupMessage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"PropertyGroupsApi.update_property_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PropertyGroupsApi#update_property_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
