=begin
#Open API, powered by Buildium

#GetAllGLAccounts) response message now includes the property `IsBankAccount`. This is a boolean property that indicates whether the general ledger account is also a bank account.  * A `Country` property has been added to all Address messages. This property contains an enumeration indicating the country of the address.   

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module Buildium
  class ResidentCenterApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve all resident center users
    # Retrieves all resident center users for both rentals and associations.              <br /><br /><h4>Required permission(s):</h4><span class=\"permissionBlock\">Communications &gt; Resident Center Users</span> - `View`              <br /><span class=\"permissionBlock\">Rentals &gt; Tenants</span> - `View` is required to retrieve resident center users that are tenants.              <br /><span class=\"permissionBlock\">Associations &gt; Association owners and tenants</span> - `View` is required to retrieve resident center users that are association owners.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :unitagreementids Filters results to any resident center user who is associated with the specified lease and/or association ownership account identifiers.
    # @option opts [Array<Integer>] :userids Filters results to any resident center user with the specified tenant and/or association owner identifiers.
    # @option opts [Array<String>] :usertypes Filters results to any resident center user with the specified types.
    # @option opts [Array<String>] :residentcenteruserstatuses Filters results to any resident center user with the specified resident center user statuses.
    # @option opts [Boolean] :isautopayenabled If true, filters results to any resident center users who have automatic payments scheduled for the future. If false, filters results to any resident center users  who do not have automatic payments scheduled for the future. If not provided, will not filter results based on automatic payments.
    # @option opts [String] :orderby &#x60;orderby&#x60; indicates the field(s) and direction to sort the results in the response. See &lt;a href&#x3D;\&quot;#section/API-Overview/Bulk-Request-Options\&quot;&gt;Bulk Request Options&lt;/a&gt; for more information.
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The &#x60;offset&#x60; is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 1000 and the default is 50.
    # @return [Array<ResidentCenterUserMessage>]
    def get_resident_center_users(opts = {})
      data, _status_code, _headers = get_resident_center_users_with_http_info(opts)
      data
    end

    # Retrieve all resident center users
    # Retrieves all resident center users for both rentals and associations.              &lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Required permission(s):&lt;/h4&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Communications &amp;gt; Resident Center Users&lt;/span&gt; - &#x60;View&#x60;              &lt;br /&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Rentals &amp;gt; Tenants&lt;/span&gt; - &#x60;View&#x60; is required to retrieve resident center users that are tenants.              &lt;br /&gt;&lt;span class&#x3D;\&quot;permissionBlock\&quot;&gt;Associations &amp;gt; Association owners and tenants&lt;/span&gt; - &#x60;View&#x60; is required to retrieve resident center users that are association owners.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :unitagreementids Filters results to any resident center user who is associated with the specified lease and/or association ownership account identifiers.
    # @option opts [Array<Integer>] :userids Filters results to any resident center user with the specified tenant and/or association owner identifiers.
    # @option opts [Array<String>] :usertypes Filters results to any resident center user with the specified types.
    # @option opts [Array<String>] :residentcenteruserstatuses Filters results to any resident center user with the specified resident center user statuses.
    # @option opts [Boolean] :isautopayenabled If true, filters results to any resident center users who have automatic payments scheduled for the future. If false, filters results to any resident center users  who do not have automatic payments scheduled for the future. If not provided, will not filter results based on automatic payments.
    # @option opts [String] :orderby &#x60;orderby&#x60; indicates the field(s) and direction to sort the results in the response. See &lt;a href&#x3D;\&quot;#section/API-Overview/Bulk-Request-Options\&quot;&gt;Bulk Request Options&lt;/a&gt; for more information.
    # @option opts [Integer] :offset &#x60;offset&#x60; indicates the position of the first record to return. The &#x60;offset&#x60; is zero-based and the default is 0.
    # @option opts [Integer] :limit &#x60;limit&#x60; indicates the maximum number of results to be returned in the response. &#x60;limit&#x60; can range between 1 and 1000 and the default is 50.
    # @return [Array<(Array<ResidentCenterUserMessage>, Integer, Hash)>] Array<ResidentCenterUserMessage> data, response status code and response headers
    def get_resident_center_users_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResidentCenterApi.get_resident_center_users ...'
      end
      allowable_values = ["Tenant", "AssociationOwner"]
      if @api_client.config.client_side_validation && opts[:'usertypes'] && !opts[:'usertypes'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"usertypes\", must include one of #{allowable_values}"
      end
      allowable_values = ["AccountExistsButNoEmailSent", "PasswordSent", "EmailFailed", "SignedIn", "Blocked"]
      if @api_client.config.client_side_validation && opts[:'residentcenteruserstatuses'] && !opts[:'residentcenteruserstatuses'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"residentcenteruserstatuses\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/v1/residentCenterUsers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'unitagreementids'] = @api_client.build_collection_param(opts[:'unitagreementids'], :multi) if !opts[:'unitagreementids'].nil?
      query_params[:'userids'] = @api_client.build_collection_param(opts[:'userids'], :multi) if !opts[:'userids'].nil?
      query_params[:'usertypes'] = @api_client.build_collection_param(opts[:'usertypes'], :multi) if !opts[:'usertypes'].nil?
      query_params[:'residentcenteruserstatuses'] = @api_client.build_collection_param(opts[:'residentcenteruserstatuses'], :multi) if !opts[:'residentcenteruserstatuses'].nil?
      query_params[:'isautopayenabled'] = opts[:'isautopayenabled'] if !opts[:'isautopayenabled'].nil?
      query_params[:'orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ResidentCenterUserMessage>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['clientId', 'clientSecret']

      new_options = opts.merge(
        :operation => :"ResidentCenterApi.get_resident_center_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResidentCenterApi#get_resident_center_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
