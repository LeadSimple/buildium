=begin
#Open API, powered by Buildium

#GetAllGLAccounts) response message now includes the property `IsBankAccount`. This is a boolean property that indicates whether the general ledger account is also a bank account.  * A `Country` property has been added to all Address messages. This property contains an enumeration indicating the country of the address.     

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.1

=end

require 'date'
require 'time'

module Buildium
  class WorkOrderMessage
    # Work order unique identifier.
    attr_accessor :id

    attr_accessor :task

    # Description of the work order.
    attr_accessor :work_details

    # The invoice or reference number that the vendor assigned to the invoice.
    attr_accessor :invoice_number

    # A description of the entity that will be charged for the work.
    attr_accessor :chargeable_to

    # Indicates whether entry has been allowed to the unit.
    attr_accessor :entry_allowed

    # Notes specific to entering the unit.
    attr_accessor :entry_notes

    # Vendor unique identifier.
    attr_accessor :vendor_id

    # Notes specific to the vendor.
    attr_accessor :vendor_notes

    attr_accessor :entry_contact

    # Unique identifier for the bill related to this work order. This field will be `null` if no bill is related to this work order.
    attr_accessor :bill_transaction_id

    # The total amount of the work order.
    attr_accessor :amount

    # A collection of line items associated with the work order.
    attr_accessor :line_items

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'Id',
        :'task' => :'Task',
        :'work_details' => :'WorkDetails',
        :'invoice_number' => :'InvoiceNumber',
        :'chargeable_to' => :'ChargeableTo',
        :'entry_allowed' => :'EntryAllowed',
        :'entry_notes' => :'EntryNotes',
        :'vendor_id' => :'VendorId',
        :'vendor_notes' => :'VendorNotes',
        :'entry_contact' => :'EntryContact',
        :'bill_transaction_id' => :'BillTransactionId',
        :'amount' => :'Amount',
        :'line_items' => :'LineItems'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'task' => :'WorkOrderTaskMessage',
        :'work_details' => :'String',
        :'invoice_number' => :'String',
        :'chargeable_to' => :'String',
        :'entry_allowed' => :'String',
        :'entry_notes' => :'String',
        :'vendor_id' => :'Integer',
        :'vendor_notes' => :'String',
        :'entry_contact' => :'WorkOrderEntryContactMessage',
        :'bill_transaction_id' => :'Integer',
        :'amount' => :'Float',
        :'line_items' => :'Array<WorkOrderLineItemMessage>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Buildium::WorkOrderMessage` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Buildium::WorkOrderMessage`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'task')
        self.task = attributes[:'task']
      end

      if attributes.key?(:'work_details')
        self.work_details = attributes[:'work_details']
      end

      if attributes.key?(:'invoice_number')
        self.invoice_number = attributes[:'invoice_number']
      end

      if attributes.key?(:'chargeable_to')
        self.chargeable_to = attributes[:'chargeable_to']
      end

      if attributes.key?(:'entry_allowed')
        self.entry_allowed = attributes[:'entry_allowed']
      end

      if attributes.key?(:'entry_notes')
        self.entry_notes = attributes[:'entry_notes']
      end

      if attributes.key?(:'vendor_id')
        self.vendor_id = attributes[:'vendor_id']
      end

      if attributes.key?(:'vendor_notes')
        self.vendor_notes = attributes[:'vendor_notes']
      end

      if attributes.key?(:'entry_contact')
        self.entry_contact = attributes[:'entry_contact']
      end

      if attributes.key?(:'bill_transaction_id')
        self.bill_transaction_id = attributes[:'bill_transaction_id']
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'line_items')
        if (value = attributes[:'line_items']).is_a?(Array)
          self.line_items = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      entry_allowed_validator = EnumAttributeValidator.new('String', ["Unknown", "Yes", "No"])
      return false unless entry_allowed_validator.valid?(@entry_allowed)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] entry_allowed Object to be assigned
    def entry_allowed=(entry_allowed)
      validator = EnumAttributeValidator.new('String', ["Unknown", "Yes", "No"])
      unless validator.valid?(entry_allowed)
        fail ArgumentError, "invalid value #{ entry_allowed.inspect } for \"entry_allowed\", must be one of #{validator.allowable_values}."
      end
      @entry_allowed = entry_allowed
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          task == o.task &&
          work_details == o.work_details &&
          invoice_number == o.invoice_number &&
          chargeable_to == o.chargeable_to &&
          entry_allowed == o.entry_allowed &&
          entry_notes == o.entry_notes &&
          vendor_id == o.vendor_id &&
          vendor_notes == o.vendor_notes &&
          entry_contact == o.entry_contact &&
          bill_transaction_id == o.bill_transaction_id &&
          amount == o.amount &&
          line_items == o.line_items
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, task, work_details, invoice_number, chargeable_to, entry_allowed, entry_notes, vendor_id, vendor_notes, entry_contact, bill_transaction_id, amount, line_items].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Buildium.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
